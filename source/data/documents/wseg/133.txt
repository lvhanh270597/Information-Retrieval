Xâu ( string ) xuất_hiện rất nhiều trong các bài_toán .
Bài viết này giới_thiệu sơ_qua một_số thuật_ngữ cũng_như thuật_toán về xâu .
Thuật_ngữ Một xâu X là xâu con ( substring ) của một xâu Y nếu X là một chuỗi các ký_tự liên_tiếp của Y .
Ví_dụ : ab và bc là 2 xâu con của abcd .
Nhưng ac thì không_phải là xâu con của abcd .
Một xâu X là tiền_tố ( prefix ) của một xâu Y nếu X là xâu con của Y và X xuất_hiện ở đầu của xâu Y .
Ví_dụ : ab là tiền_tố của abcd , nhưng bc không_phải là tiền_tố của abcd .
Một xâu X là một tiền_tố không tầm_thường ( proper prefix ) của xâu Y nếu nó là tiền_tố của xâu Y và khác xâu Y .
Một xâu X là hậu_tố ( hậu_tố ) của một xâu Y nếu X là xâu con của Y và X xuất_hiện ở cuối của xâu Y .
Ví_dụ : cd là hậu_tố của abcd , nhưng bc không_phải là hậu_tố của abcd .
Một xâu X là một hậu_tố không tầm_thường ( proper suffix ) của xâu Y nếu nó là hậu_tố của xâu Y và khác xâu Y .
Các dạng bài So khớp chuỗi (string matching) Cho một xâu T và xâu S .
Tìm tất_cả các lần xuất_hiện của xâu S trong xâu T .
Ví_dụ : S = abc T = abcabcabc Các lần xuất_hiện : 1 , 4 , 7 .
Bài_toán này còn được gọi_là tìm_kiếm cây_kim ( needle ) trong đống rơm ( haystack ) , vì nó xuất_hiện trong thực_tế khi ta cần tìm một xâu rất nhỏ trong một lượng dữ_liệu rất lớn (ví dụ Google cần tìm từ khóa trong hàng_tỉ_tỉ trang web) .
Có 3 thuật_toán chính để giải_quyết bài này , đó là : Thuật_toán KMP_Hash_Z_Algorithm_Xâu đối_xứng (Palindrome) Palindrome hay còn gọi_là xâu đối_xứng , xâu đối gương là tên_gọi của những xâu kí_tự mà khi viết từ phải qua trái hay từ trái qua phải_thì xâu đó không thay_đổi .
VD : MADAM , IOI , . . .
Có rất nhiều bài_tập liên_quan đến xâu đối_xứng .
Các bạn có_thể tìm đọc ở trong các bài viết : Một_vài bài_tập QHD về Palindrome_Hash_Palindrome_Tree Cấu_trúc dữ_liệu Trie là CTDL cơ_bản nhất trong xử_lý xâu .
Nó giúp giải_quyết các bài_toán về tìm_kiếm xâu .
Lớp_CTDL được gọi chung là Suffix_Structures gồm : Suffix_Array Suffix_Automaton_Suffix_Tree_Aho_Corasick_Gọi chung như_vậy vì các CTDL này có_thể dùng thay_thế nhau để giải_quyết cùng một lớp bài_toán liên_quan đến các suffix của cây .
Các bài Ad-hoc_Trong xử_lý xâu còn một_vài thuật_toán chỉ áp_dụng được cho 1 bài_toán (ad-hoc) .
Thuật_toán Manacher Bài_toán Cho xâu S .
Với mỗi vị_trí i của xâu S , tìm xâu đối_xứng dài nhất nhận i là tâm .
Với mỗi cặp i , i+1 của xâu S , tìm xâu đối_xứng dài nhất nhận i và i+1 là tâm .
Mô_tả thuật_toán Tham_khảo thêm ở link Code const char DUMMY = .
; int manacher ( string s ) // Để tránh phải xét riêng trường_hợp độ_dài xâu đối_xứng chẵn / lẻ , // ta thêm 1 ký_tự DUMMY vào giữa các ký_tự của s .
// CHÚ_Ý : Phải đảm_bảo DUMMY không có trong xâu s int n = s .
size () 2 - 1 ; vector lt; int gt; f = vector lt; int gt; ( n , 0 ); // Tạo xâu a bằng cách chèn ký_tự DUMMY vào giữa các ký_tự của s .
// Ví_dụ : // s = aabcb // a = a . a . b . c . b string a = string ( n , DUMMY ); for ( int i = 0 ; i lt; n ; i += 2 ) a i = s i / 2 ; int l = 0 , r = - 1 , center , res = 0 ; for ( int i = 0 , j = 0 ; i lt; n ; i ++ ) j = ( i gt; r ?
0 : min ( f l + r - i , r - i )) + 1 ; while ( i - j gt;= 0 amp;amp; i + j lt; n amp;amp; a i - j == a i + j ) j ++ ; f i = -- j ; if ( i + j gt; r ) r = i + j ; l = i - j ; int len = ( f i + i % 2 ) / 2 2 + 1 - i % 2 ; if ( len gt; res ) res = len ; center = i ; // Với mỗi vị_trí i , xâu đối_xứng dài nhất nhận i là tâm là i - fi , i + fi .
// Ví_dụ : // s = aabcb // a = a . a . b . c . b // f = 011010200 return res ; Minimal string rotation Bài_toán Cho một xâu S .
Xét các xâu thu được từ xâu S bằng phép xoay .
Ví_dụ : S = abcd , thì các xâu thu được từ S bằng phép xoay là : abcd bcda cdab dabc Tìm xâu có thứ_tự từ_điển nhỏ nhất .
Mô_tả thuật_toán Bạn có_thể xem ở đây Code // Tính vị_trí của xâu xoay vòng có thứ_tự từ_điển nhỏ nhất của xâu s int minmove ( string s ) int n = s .
length (); int x , y , i , j , u , v ; // x is the smallest string before string y for ( x = 0 , y = 1 ; y lt; n ; ++ y ) i = u = x ; j = v = y ; while ( s i == s j ) ++ u ; ++ v ; if ( ++ i == n ) i = 0 ; if ( ++ j == n ) j = 0 ; if ( i == x ) break ; // All strings are equal if ( s i lt;= s j ) y = v ; else x = y ; if ( u gt; y ) y = u ; return x ; Lyndon_Decomposition Bài_toán Lyndon word là các xâu khác rỗng , mà có thứ_tự từ_điển nhỏ hơn tất_cả các xâu thu được bằng phép xoay của nó .
Cho một xâu S .
Tìm cách tách S thành ít_nhất các xâu , sao_cho mỗi xâu đều là Lyndon word .
Code void lyndon ( string s ) int n = ( int ) s .
length (); int i = 0 ; while ( i lt; n ) int j = i + 1 , k = i ; while ( j lt; n amp;amp; s k lt;= s j ) if ( s k lt; s j ) k = i ; else ++ k ; ++ j ; while ( i lt;= k ) cout lt;lt; s .
substr ( i , j - k ) lt;lt; ; i += j - k ; cout lt;lt; endl ;
