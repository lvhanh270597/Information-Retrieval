Nguồn : wcipeg Người dịch : Trần_Kim_Thạch Giới_thiệu Trước_khi đọc_bài này , bạn có_thể đọc về các thuật_ngữ trong xử_lý xâu cũng_như về bài_toán so khớp chuỗi ở đây Thuật_toán Knuth-Morris-Pratt (KMP) là một thuật_toán với thời_gian chạy tuyến_tính nhằm giải_quyết bài_toán so khớp chuỗi .
Thuật_toán được xây_dựng dựa vào quan_sát rằng một xâu con chung của S và T sẽ đưa_ra được thông_tin S có khớp với các_vị trí sau của T hay_không .
Bởi_vì xâu con chung này đồng_nghĩa với một phần của T đã khớp với một phần của S , nên bằng việc khởi tạo trước một_số thông_tin với xâu S , ta sẽ thu được những kết_luận về T (nhờ xâu con chung) mà không cần quay ngược và so_sánh lại những ký_tự đã khớp .
Cụ_thể hơn , ta muốn tính_toán trước cách xâu S tự khớp với chính nó .
Nhờ vậy thuật_toán sẽ không quay nhìn lại và chỉ duyệt qua T một_lần duy_nhất .
Cùng_với quá_trình tiền xử_lí tuyến_tính O(T) (với T là độ_dài xâu T) , thuật_toán có thời_gian chạy tuyến_tính .
Cảm_hứng Cảm_hứng của KMP có_thể được minh_họa rõ nhất qua 3 ví_dụ dưới_đây .
Ví_dụ 1 S = aaa T = aaaaaaaaa Ở ví_dụ này , ta cần các lần xuất_hiện của xâu S trong xâu T (S xuất_hiện 7 lần) .
Ta có_thể duyệt bình_thường với độ phức_tạp O(S_T) như_sau : So S_1 với T_1 , S_2 với T_2 , S_3 với T_3 , do_đó vị_trí số 1 là vị_trí khớp của S trong T .
So S_1 với T_2 , S_2 với T_3 , S_3 với T_4 , tìm được vị_trí số 2 là vị_trí khớp của S trong T .
So S_1 với T_3 , S_2 với T_4 , S_3 với T_5 , tìm được vị_trí số 3 là vị_trí khớp của S trong T .
Và cứ mãi như_vậy cho_đến khi đủ hết trường_hợp .
Tuy_nhiên ta có_thể làm tốt hơn nếu ta tiền xử_lý S và để_ý : S_1 giống S_2 S_2 giống S_3 .
Vậy tiền_tố độ_dài 2 của S (S_1 S_2) khớp với xâu con độ_dài 2 ở vị_trí thứ 2 của S (S_2 S_3) - nói_cách_khác , S tự khớp một phần .
Sau khi kiểm_tra khớp ở vị_trí số 1 (so sánh S với T_1 T_2 T_3) , ta đã biết : S_1 = T_1 S_2 = T_2 S_3 = T_3 Khi ta kiểm_tra khớp ở vị_trí số 2 (so sánh S với T_2 T_3 T_4) , ta có : S_2 = T_2 , S_3 = T_3 S_1 = S_2 , S_2 = S_3 Suy ra : S_1 = T_2 S_2 = T_3 .
Do_vậy , việc so_sánh với T_2 , T_3 là không cần_thiết nữa .
Ta chỉ_cần kiểm_tra nốt S_3 = T_4 là đã kết_luận được S được tìm_thấy ở vị_trí 2 trong T .
Như_vậy , sau đáp_án ở vị_trí 1 , ta chỉ_cần thêm 1 thao_tác để kết_luận S cũng có ở vị_trí 2 trong T , thay_vì 3 như thuật duyệt bình_thường .
Đến đây ta biết : S_1 = T_2 S_2 = T_3 S_3 = T_4 Và tương_tự , lại kết_luận được : S_1 = T_3 S_2 = T_4 .
Ta sau_đó chỉ_cần so S_3 với T_5 , tìm được một đáp_án nữa , cứ thế tiếp_tục .
Trong_khi thuật_toán duyệt cần đến 3 phép_tính cho mỗi lần so_sánh S với một xâu con của T , kĩ_thuật của chúng_ta chỉ_cần 3 phép_tính ở lần_lặp đầu và 1 cho mỗi kết_quả sau , và không xét_lại các kí_tự của T .
(Đây cũng là cách con_người giải_quyết bài toán) Ví_dụ 2 S = aaa T = aabaabaaa Như ở trên , ta bắt_đầu như thuật_toán duyệt , so_sánh : S_1 với T_1 S_2 với T_2 S_3 với T_3 Ở đây ta thấy S_3 khác T_3 , vậy S không khớp với T ở vị_trí 1 .
Đến bước này thuật duyệt sẽ tiếp_tục bằng cách so S_1 với T_2 và S_2 với T_3 , không khớp; rồi lại so S_1 với T_3 , không khớp; cứ_như vậy .
Thế_nhưng chúng_ta sẽ thấy ngay rằng sau kết_quả không khớp ở vị_trí_đầu , khả_năng tìm_thấy S ở các_vị trí 2 và 3 của T đã không còn .
Lí_do là_vì , như đã trình_bày ở ví_dụ 1 : S_2 = S_3 S_3 \neq T_3 Do_đó S_2 \neq T_3 .
Tương_tự như_vậy , do : S_1 = S_2 S_2 \neq T_3 Nên S_1 \neq T_3 , ta không cần tìm S ở vị_trí thứ 3 của T làm_gì .
Sẽ hợp_lí hơn khi bắt_đầu tiếp ở vị_trí số 4 (do ta không_thể chắc_chắn có_thể tìm được hay_không S_2 S_3 S_4 \ , = \ , T_4T_5T_6) .
Sau khi so_sánh ở vị_trí 4 và thấy tiếp_tục không khớp , ta dùng lập_luận tương_tự loại_bỏ vị_trí số 5 và 6 , và bắt_đầu lại ở vị_trí số 7 (ở đây 2 xâu khớp nhau) .
Lần nữa , hãy chú_ý các kí_tự của T được duyệt qua theo trình_tự .
Ví_dụ 3 Đây là một ví_dụ phức_tạp hơn : S = tartan T = tartaric_acid Ta quan_sát thấy tiền_tố độ_dài 2 của S khớp với chính xâu con độ_dài 2 bắt_đầu ở vị_trí số 4 của nó .
Bây_giờ lần_lượt so_sánh các_vị trí từ S_1 đến S_6 với T_1 đến T_6 .
Ta thấy S_6 không khớp với T_6 , vậy không có kết_quả ở vị_trí số 1 .
Ở đây hãy chú_ý : S_1 \neq S_2 S_1 \neq S_3 S_2 = T_2 S_3 = T_3 Nên ta có S_1 \neq T_2 và S_1 \neq T_3 .
Vậy không_thể có trùng khớp ở vị_trí số 2 và 3 .
Tới đây hãy nhớ_lại rằng : S_1 = S_4 S_2 = S_5 S_4 = T_4 S_5 = T_5 Ta suy ra S_1 = T_4 , S_2 = T_5 .
Vậy_ta sẽ tiếp_tục kiểm_tra vị_trí số 4 bằng việc so_sánh S_3 với T_6 .
Làm_theo cách này , ta loại_bỏ được hai trường_hợp và bắt_đầu duyệt lại không_phải ở đầu mà ở giữa xâu S , tránh được_việc xét_lại T_4 và T_5 .
Ý_tưởng chính Gọi_Si là tiền_tố độ_dài i của xâu S .
Các ví_dụ trên chính là tư_tưởng hoạt_động của KMP : dựa trên quan_sát rằng một_số xâu con của xâu cần tìm có khớp với xâu con nào khác của xâu cần tìm hay_không .
Tuy_nhiên định_hướng chung , mang tính hệ_thống của thuật_toán thì chưa rõ_ràng .
Định_hướng này được phát_biểu như_sau : Ở mỗi vị_trí i của S , tìm hậu_tố chuẩn dài nhất của Si mà cũng là tiền_tố của S .
( Hậu_tố chuẩn của một xâu là hậu_tố có độ_dài bé hơn xâu đó . ) Ta sẽ gọi độ_dài của xâu con này là \pi_i .
Ta cũng có_thể định_nghĩa \pi_i là số j lớn nhất để Sj \sqsupset Si . Ký_hiệu X \sqsupset Y nghĩa_là X là hậu_tố của Y .
Bảng \pi , gọi_là hàm tiền_tố , chiếm bộ_nhớ tuyến_tính , và như sẽ trình_bày dưới_đây , có_thể tính được trong thời_gian tuyến_tính .
Bảng sẽ chứa toàn_bộ các thông_tin cần_thiết để máy thực_hiện những phương_án "thông minh nhất" cho quá_trình tìm_kiếm .
Cụ_thể hơn : Trong ví_dụ 1 và 2 : \pi_1 = 0 , không có tiền_tố chuẩn thỏa_mãn .
\pi_2 = 1 , tiền_tố a khớp hậu_tố a .
\pi_3 = 2 , tiền_tố aa khớp hậu_tố aa .
Trong ví_dụ 3 : \pi_1 = 0 \pi_2 = 0 \pi_3 = 0 \pi_4 = 1 , tiền_tố t khớp với xâu con t kết_thúc ở vị_trí thứ 4 .
\pi_5 = 2 , tiền_tố ta khớp với xâu con ta kết_thúc ở vị_trí thứ 5 .
\pi_6 = 0 .
Tổng_quát , bảng \pi cho ta biết , sau một_lần khớp hoặc không khớp giữa "cây kim" và "đống rơm" , vị_trí tiếp_theo trong "đống rơm" ta cần kiểm_tra là gì .
Các phép so sẽ tiếp_tục ở các_vị trí tiếp_theo , không bao_giờ quay ngược về các kí_tự ta đã kiểm_tra rồi .
Tính_toán độ phức_tạp Để tính độ phức_tạp cho hàm tiền xử_lí , trước_tiên ta có quan_sát : Dãy \pi_i = i , \pi_i , \pi_\pi_i , \pi_\pi_\pi_i , . . .
, 0 chứa toàn_bộ những giá_trị j thỏa_mãn Sj \sqsupset Si . Vậy , ta có_thể đếm toàn_bộ những hậu_tố của Si đồng_thời là tiền_tố của S bằng cách bắt_đầu với i , dò nó trong bảng \pi , dùng kết_quả đó dò tiếp_tục và tiếp_tục , đến khi kết_thúc bằng 0 .
Chứng_minh : Đầu_tiên_ta chứng_minh chiều xuôi : nếu j xuất_hiện trong \pi_i thì Sj \sqsupset Si . Nếu j là phần_tử đầu trong \pi_i .
Vậy j = i và hẳn_nhiên Sj \sqsupset Si . Nếu j không là phần_tử đầu : Gọi phần_tử trước nó là k .
Vậy \pi_k = j .
Theo định_nghĩa , Sj \sqsupset Sk . Nhưng_Sk \sqsupset Si . Do quan_hệ này có tính_chất bắc_cầu , Sj \sqsupset Si . Giờ ta chứng_minh chiều ngược : nếu Sj \sqsupset Si , j thuộc \pi_i .
Giả_sử j không xuất_hiện trong dãy .
Rõ_ràng 0 lt; j lt; i do i và 0 đều có trong dãy .
Do \pi_i luôn giảm , ta có_thể tìm được một_và chỉ một k thuộc \pi_i sao_cho kgt;j và \pi_klt;j .
Nói_cách_khác , ta có_thể tìm được một_và chỉ một k mà sau nó j "có lẽ" sẽ xuất_hiện (để giữ cho dãy luôn giảm) .
Ở phần đầu chứng_minh_ta đã biết Sk \sqsupset Si . Do hậu_tố độ_dài j của Si là một hậu_tố của hậu_tố độ_dài k của Si , hậu_tố độ_dài j của Si phải khớp với hậu_tố độ_dài j của Sk . Nhưng hậu_tố độ_dài j của Si cũng khớp với Sj , nên Sj khớp với hậu_tố độ_dài j của Sk . Vậy_ta kết_luận \pi_k \ge j .
Thế_nhưng j \ge \pi_k , mâu_thuẫn .
Cũng chính nhờ việc chứng_minh này , ta có_thể xây_dựng một thuật_toán để tính bảng \pi .
Với mỗi i : Đầu_tiên_ta tìm số j gt; 0 sao_cho Sj \sqsupset Si . Nếu_không tìm được , ta kết_luận \pi_i = 0 (như trường_hợp i=1) .
Nếu có j gt; 0 thỏa_mãn , vậy khi xóa_bỏ kí_tự cuối của hậu_tố này , ta thu được một hậu_tố của S_i-1 đồng_thời là tiền_tố của S , tức_là Sj-1 \sqsupset Si-1 .
Vậy bước_đầu ta đếm mọi hậu_tố chuẩn và không-rỗng của Si-1 đồng_thời là tiền_tố của S .
Nếu ta tìm được một hậu_tố độ_dài k đồng_thời thỏa S_k = S_i , vậy Sk+1 \sqsupset Si , và k+1 là một giá_trị khả_dĩ của j .
Vậy_ta sẽ gán k = \pi_i-1 và tiếp_tục lặp_lại trong dãy \pi_\pi_i , \pi_\pi_\pi_i , . . .
Quá_trình sẽ dừng lại nếu gặp_phải một phần_tử j trong dãy sao_cho S_j+1 = S_i , và gán \pi_i = j+1; cách này sẽ luôn cho kết_quả tối_ưu vì dãy \pi_i-1 luôn giảm và nó chứa toàn_bộ giá_trị k khả_dĩ .
Nếu đi đến hết dãy , vậy \pi_i = 0 .
Dưới_đây là mã giả để tính \pi : π1 ← 0 for i ∈ 2 . . m k ← πi-1 while k gt; 0 and Sk+1 ≠ Si k ← πk if Sk+1 = Si πi ← 0 else πi ← k+1 Hoặc có_thể viết gọn lại như_sau : π1 ← 0 k ← 0 for i ∈ 2 . . m while k gt; 0 and Sk+1 ≠ Si k ← πk if Sk+1 = Si k ← k+1 πi ← k Thuật_toán có độ phức_tạp O(m) .
Để hiểu tại_sao thì hãy để_ý , k không bao_giờ âm; nó không_thể giảm nhiều hơn mức nó tăng .
k chỉ tăng ở dòng k ← k+1 , vốn chỉ bị gọi nhiều nhất_là m-1 lần .
Vậy k giảm nhiều nhất_là k lần .
Nhưng k giảm ở mỗi lần_lặp của vòng while , vậy tổng tất_cả các bước trong_vòng while không quá O(m) .
Tất_cả những câu_lệnh trong_vòng for đều có độ phức_tạp là hằng_số , nên cả thuật_toán có độ phức_tạp O(m) .
So khớp Coi_như ta đã xây_dựng xong bảng \pi .
Đây là lúc ta sử_dụng những thông_tin cực_khổ lấy_được này .
Giả_sử rằng ta đã kiểm_tra đang vị_trí thứ j , và k kí_tự đầu của S đã khớp .
Nói_cách_khác : S_1 = T_j S_2 = T_j+1 S_3 = T_j+2 . . .
S_k = T_j+k-1 .
Có 2 khả_năng : Ta muốn tiếp_tục chạy trên S và T để kiểm_tra các cặp kí_tự Ta kiểm_tra ở một ví trị khác trên T .
Lí_do cho trường_hợp 2 là : hoặc k = m (tức đã tìm_thấy một vị_trí trùng khớp của S trên T và ta cần tiếp_tục ở vị_trí khác) hoặc S_k+1 \neq T_j+k (loại bỏ vị_trí hiện tại) .
Nếu ta đã biết từ S_1 đến S_k khớp với từ T_j đến T_j+k-1 , vị_trí nào ta có_thể bỏ_qua ?
Đây là cốt_lõi của thuật_toán KMP : Định_lý : Nếu k gt; 0 thì p = k - \pi_k sẽ là giá_trị p nhỏ nhất sao_cho S_1 , . . . , S_k-p khớp với T_j+p , . . . , T_j+k-1 .
(Nếu k=0 , p=1 . ) Nói một_cách dễ hình_dung hơn , ta có_thể bỏ_qua tất_cả các_vị trí từ 0 đến p-1 .
Suy_nghĩ thật kĩ lí_thuyết này .
Nếu p gt; 0 không thỏa_mãn S_1 , . . . , S_k-p khớp với T_j+p , . . . , T_j+k-1 , vậy S không khớp với T ở vị_trí j+p , tức ta có_thể loại_bỏ vị_trí này .
Mặt_khác , nếu p gt; 0 thỏa_mãn yêu_cầu trên , xâu S có khả_năng khớp với T ở vị_trí j+p , và thực_tế là các kí_tự từ_vị trí j+p đến j+k-1 đều đã khớp với các_vị trí tương_ứng ở S .
Ta chỉ_cần tiếp_tục bằng cách so S_k-p+1 với T_j+k , "không quay đầu lại" như đã hứa .
Chứng_minh : Có 0 \le q lt; k .
Nếu_Sq \sqsupset Sk , vậy theo định_nghĩa ta có S_1 , . . . , S_q = S_k-q+1 , . . . , S_k .
Nhưng vì S_1 , . . . , S_k = T_j , . . . , T_j+k-1 , nên S_k-q+1 , . . . , S_k = T_j+k-q , . . . , T_j+k-1 .
Vậy S_1 , . . . S_q = T_j+k-q , . . . , T_j+k-1 .
Ngược_lại , nếu_không có Sq \sqsupset Sk , vậy S_1 , . . . , S_q \neq S_k-q+1 , . . . , S_k , dẫn đến S_k-q+1 , . . . , S_k = T_j+k-q , . . . , T_j+k-1 là sai , và dẫn đến S_1 , . . . S_q = T_j+k-q , . . . , T_j+k-1 là sai .
Ta kết_luận rằng k-q là một giá_trị khả_dĩ của p khi và chỉ khi Sq \sqsupset Sk . Do maximum của q là \pi_k , minumum của p được xác_định bởi k-\pi_k .
Dưới_đây là mã giả : j ← 1 k ← 0 while j+m-1 ≤ n while k ≤ m and Sk+1 = Tj+k k ← k+1 if k = m print "Match at position " j if k = 0 j ← j+1 else j ← j+k-πk k ← πk Ta dò trong xâu cần search một_lần một kí tự; kí_tự đang được xét là nằm ở vị_trí j+k .
Nếu xảy_ra không trùng khớp , ta dùng bảng \pi để tìm đến vị_trí khả_dĩ tiếp_theo .
Đoạn code tương_đương dưới_đây thể_hiện rõ hơn việc thuật_toán xét một kí_tự một_lần và không quay ngược_lại : k ← 0 for i ∈ 1 . . n while k gt; 0 and Sk+1 ≠ Ti k ← πk if Sk+1 = Ti k ← k+1 if k = m print "Match at position " i-m+1 k ← πk Ở đây , i tương_ứng với j+k ở đoạn code trên .
Mỗi lần_lặp của vòng_lặp trong của một trong 2 đoạn code tương_ứng với một_lần lặp của vòng_lặp ngoài ở đoạn còn_lại .
Ở đoạn thứ_hai , ta cũng có_thể chứng_minh thuật có độ phức_tạp O(n); mỗi lần vòng while ở trong được thực_hiện , giá_trị của k giảm , nhưng nó không_thể giảm nhiều hơn n lần bởi k khởi_đầu là không và không bao_giờ âm .
k chỉ tăng nhiều nhất một_lần ở vòng_lặp ngoài (tức nhiều nhất tổng_cộng n lần) .
Vậy vòng_lặp trong chỉ lặp nhiều nhất n lần , và tất_cả các câu_lệnh khác có độ phức_tạp hằng_số .
Bài_tập áp_dụng : VOJ - SUBSTR .
Code_C++_VOJ - TWOOPERS
