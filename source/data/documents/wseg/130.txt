Mảng Hậu_Tố là một CTDL giúp sort các hậu_tố theo thứ_tự từ_điển .
Mảng này chứa các số_nguyên , khởi_đầu của các hậu_tố .
Có 2 cách để xây_dựng một mảng hậu_tố : Thuật_toán không xác_định : Sử_dụng thuật_toán Rabin-Karp và kiểm_tra nếu một hậu_tố có thứ_tự từ_điển nhỏ hơn một hậu_tố khác , tìm mảng tiền_tố chung lớn nhất ( LCP ) , sau_đó sử_dụng Tìm_Kiếm Nhị_Phân và hàm_băm ( Hash ) và kiểm_tra ký_tự tiếp_theo sau LCP của chúng .
Code_C++ : namespace HashSuffixArray const int MAXN = 1 lt;lt; 21 ; typedef unsigned long_long hash ; const hash BASE = 137 ; int N ; char S ; int sa MAXN ; hash h MAXN , hPow MAXN ; define getHash(lo , size) (hlo - h(lo) + (size) hPowsize) inline bool sufCmp ( int i , int j ) int lo = 1 , hi = min ( N - i , N - j ); while ( lo lt;= hi ) int mid = ( lo + hi ) gt;gt; 1 ; if ( getHash ( i , mid ) == getHash ( j , mid )) lo = mid + 1 ; else hi = mid - 1 ; return S i + hi lt; S j + hi ; void buildSA () N = strlen ( S ); hPow 0 = 1 ; for ( int i = 1 ; i lt;= N ; ++ i ) hPow i = hPow i - 1 BASE ; h N = 0 ; for ( int i = N - 1 ; i gt;= 0 ; -- i ) h i = h i + 1 BASE + S i , sa i = i ; stable_sort ( sa , sa + N , sufCmp ); // end namespace HashSuffixArray Thuật_toán xác_định : Sort log(Độ dài lớn nhất) bước , với bước thứ i (tính từ 0) , sort chúng theo 2i ký_tự đầu_tiên và đưa hậu_tố có cùng tiền_tố với 2i ký_tự vào cùng một bucket .
Code : / Suffix_array O(n lg2 n) LCP table O(n) / include lt;cstdiogt; include lt;algorithmgt; include lt;cstringgt; using namespace std ; define REP(i , n) for (int i = 0; i lt; (int)(n); ++i) namespace SuffixArray const int MAXN = 1 lt;lt; 21 ; char S ; int N , gap ; int sa MAXN , pos MAXN , tmp MAXN , lcp MAXN ; bool sufCmp ( int i , int j ) if ( pos i ! = pos j ) return pos i lt; pos j ; i += gap ; j += gap ; return ( i lt; N amp;amp; j lt; N ) ?
pos i lt; pos j : i gt; j ; void buildSA () N = strlen ( S ); REP ( i , N ) sa i = i , pos i = S i ; for ( gap = 1 ;; gap = 2 ) sort ( sa , sa + N , sufCmp ); REP ( i , N - 1 ) tmp i + 1 = tmp i + sufCmp ( sa i , sa i + 1 ); REP ( i , N ) pos sa i = tmp i ; if ( tmp N - 1 == N - 1 ) break ; void buildLCP () for ( int i = 0 , k = 0 ; i lt; N ; ++ i ) if ( pos i ! = N - 1 ) for ( int j = sa pos i + 1 ; S i + k == S j + k ;) ++ k ; lcp pos i = k ; if ( k ) -- k ; // end namespace SuffixArray_Source : mukel Tài_liệu tham_khảo : Codeforces
