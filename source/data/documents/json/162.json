{"content": "Nơi tổng_hợp và chia_sẻ những kiến_thức liên_quan tới giải_thuật nói_chung và lý_thuyết khoa_học máy_tính nói_riêng .\nin Bài này mình sẽ giới_thiệu với các bạn cấu_trúc dữ_liệu Heap nhị_phân .\nĐây là một cấu_trúc dữ_liệu đơn_giản , dễ thực_thi (you will see that ! ) và hiệu_quả .\nĐiểm yếu chính của cấu_trúc này hầu_hết các thao_tác hỗ_trợ có thời_gian .\nHeap thường được dùng để thực_thi (priority queue) .\nNếu các bạn tìm_kiếm , bạn sẽ thấy một bảng so_sánh các loại Heap khác_nhau .\nMỗi loại Heap đều có_một đặc_điểm riêng và lĩnh_vực ứng_dụng cụ_thể .\nMột_số loại Heap như Fibonacci_Heap , Rank-Pairing_Heap , Brodal_Heap , etc . , có thời_gian tiệm_cận cho hầu_hết các thao_tác .\nTuy_nhiên , điểm yếu của chúng là thực_thi rất phức_tạp , tốn bộ_nhớ (do phải lưu_trữ các con_trỏ hỗ trơ) và mặc_dù tiệm_cận là hay , hằng_số ẩn sau kí_hiệu là khá lớn .\nNếu chúng_ta chấp_nhận các thao_tác trong thời_gian , heap nhị_phân là một cấu_trúc hoàn_hảo . Ngữ_cảnh ứng_dụng của Heap nhị_phân thường có dạng như_sau : Ta có_một tập các phần_tử trong đó phần_tử thứ có_giá trị .\nThao_tác mà chúng_ta quan_tâm nhất đối_với tập này là tìm và lấy ra một phần_tử có_giá trị nhỏ nhất (hoặc lớn nhất) của tập_hợp .\nNgoài_ra , chúng_ta cũng muốn hỗ_trợ các thao_tác để thay_đổi tập_hợp đó .\nDanh_sách một_số các thao_tác mà chúng_ta thường quan_tâm như_sau : Ta sẽ sử_dụng cấu_trúc Min-Heap để thực_hiện các thao_tác trên trong thời_gian : Tại thời_điểm này mình vẫn chưa định_nghĩa Heap nhị_phân trong như_thế nào cả .\nMình sẽ định_nghĩa ở dưới .\nTrong phần_ứng dụng dưới_đây , bạn_đọc chỉ_cần quan_tâm đến các thao_tác và thời_gian_thực hiện mỗi thao_tác mà cấu_trúc này hỗ_trợ mà chưa cần quan_tâm đến cấu_trúc Heap sẽ được tổ_chức như_thế nào . Ứng_dụng nổi_bật nhất của cấu_trúc Heap nhị_phân là trong sắp_xếp mà ta gọi_là thuật_toán Heapsort .\nGiả_sử_ta có_một mảng các số_nguyên mà ta muốn sắp_xếp nó theo chiều tăng dần của giá_trị .\nTa sẽ xây_dựng một min-Heap nhị_phân cho mảng này .\nhỗ_trợ các thao_tác liệt_kê ở trên với thời_gian trong Theorem 1 .\nĐể sắp_xếp mảng ta làm_theo các bước sau : Giả mã của Heapsort : Code_C : Do mỗi thao_tác mất thời_gian , tổng thời_gian để sắp_xếp mảng là .\nMột ứng_dụng khác của min-Heap là trong thuật_toán Dijsktra tìm đường_đi ngắn nhất từ một đỉnh trong đồ_thị có trọng số_không âm .\nMình sẽ blog về thuật_toán này sau .\nCấu_trúc biểu_diễn đơn_giản nhất_là danh_sách liên_kết .\nNếu sử_dụng cấu_trúc đó , các thao_tác , mất nhưng , có_thể thực_hiện .\nNếu sửa_đổi một_chút bằng cách luôn lưu phần_tử nhỏ nhất của tập_hợp ở đầu danh_sách và luôn chèn phần_tử mới vào cuối danh_sách , thì ta có_thể thực_hiện trong còn vẫn là do khi ta xóa phần_tử nhỏ nhất khỏi danh_sách , ta phải tìm phần_tử nhỏ nhất trong số các phần_tử còn_lại và đưa nó về đầu danh_sách .\nCách khác là dùng mảng , tuy_nhiên cách này cũng không ổn vì cho_dù có làm thế_nào thì một trong số các thao_tác trên cũng là . Nếu chúng_ta muốn các thao_tác trong trường_hợp tồi nhất_là , ta phải nghĩ ngay đến cấu_trúc cây .\nỞ đây mình sẽ dùng cấu_trúc cây nhị_phân (do đó gọi_là heap nhị phân) .\nTrước_hết để đảm_bảo , cây của chúng_ta phải cân_bằng (do đó độ sâu của cây là ) .\nTa sẽ lưu phần_tử nhỏ nhất tại gốc của cây , do_đó có thời_gian .\nCũng từ_đó ta suy ra khóa của nút gốc nhỏ hơn khóa của hai nút con của nó .\nTa sẽ đảm_bảo tính_chất này cho mọi nút của cây Heap .\nNhư_vậy hai tính_chất cần_thiết của cây Heap là : Ví du_tập các giá_trị có cấu_trúc Heap biểu_diễn minh_họa trong hình dưới_đây : Từ_tính chất Heap , bằng quy_nạp , ta có_thể chứng_minh được : Gọi (depth) của một nút là số cạnh trên đường_đi từ nút gốc đến nút đó .\nGọi_là số cạnh đi từ gốc đến một nút lá tại mức cao nhất của cây đó .\nTừ_tính cân_bằng mạnh , ta suy ra : mặc_dù ta nói nhưng thực_ra ta có_thể biểu_diễn \"cây\" đó bằng một mảng .\nTa sẽ biểu_diễn các nút của cây Heap như_sau : Ví_dụ mảng tương_ứng với cây Heap ở hình trên được minh_họa trong hình dưới_đây .\nCác mũi_tên màu đỏ gạch là các mũi_tên nối từ nút cha tới một nút con . Trong thực_tế cài_đặt , nếu số_lượng phần_tử chèn vào vượt_quá kích_thước của mảng , ta phải cấp_phát lại_bộ nhớ cho mảng .\nChiến_lược cấp_phát bộ_nhớ có_thể áp_dụng là gấp_đôi kích_thước của mảng mỗi lần_ta phải cấp_phát bộ_nhớ (giống trong Java) .\nTrong trường_hợp chúng_ta biết được kích_thước tối_đa của mảng trong mọi thời_điểm thì bài_toán sẽ đơn_giản hơn nhiều . Để chèn một khóa vào Heap , ta sẽ tìm của cây , là nút lá cuối_cùng theo thứ_tự từ trái sang phải .\nGọi nút là đó là .\nĐể đảm_bảo tính cân_bằng mạnh , ta sẽ chèn vào nút anh_em (sibling) gần nhất bên phải của .\nNếu cây nhị_phân là cân_bằng , ta sẽ chèn vào mức tiếp_theo , ngoài_cùng bên trái .\nThao_tác này được minh_họa trong hình (a) và (b) của hình dưới_đây .\nVấn_đề còn_lại là đảm_bảo tính_chất Heap .\nNếu nút mới chèn vào có khóa nhỏ hơn nút cha nó , ta phải thay_thế chỗ của nó với cha nó .\nSau khi đổi chỗ , khóa của nút này vẫn có_thể nhỏ hơn khóa của nút cha mới .\nDo_đó , ta tiếp_tục gọi đệ_quy cho_đến khi_nào khóa của nó nhỏ hơn khóa của nút cha mới thì dừng lại .\nTa gọi thủ_tục đẩy một nút lên là thao_tác (Up-Heapify) .\nThao_tác đó được minh_họa trong hình (c) , (d) , (e) của hình dưới_đây : Với biểu_diễn mảng , của cây chính là và do_đó , anh_em gần nhất bên phải của nó là .\nGiả mã : Code_C : Thủ_tục vun đống ngược lên trên có thời_gian vì theo Fact 2 , cây Heap có độ sâu .\nDo_đó , ta có_thể chèn một nút vào trong Heap trong thời_gian . Khi giảm_giá_trị khóa của một nút mà ta gọi_là , giá_trị mới của có_thể nhỏ hơn giá_trị khóa của nút cha của nó (tại sao ta không cần quan_tâm đến các nút con của nó) .\nDo_đó , ta sẽ sử_dụng thủ_tục vun đống ngược lên trên Up-Heapify để đảm_bảo tính cân_bằng .\nThao_tác này mất thời_gian do chiều_cao của cây là .\nHình minh_họa : Giả mã như_sau : Code_C : Thủ_tục này phức_tạp hơn_cả vì ta cần phải xóa phần_tử nhỏ nhất ra khỏi Heap và cùng một_lúc đảm_bảo các tính_chất của Heap .\nChú_ý phần_tử nhỏ nhất_là gốc của cây Heap .\nDo_đó , để đảm_bảo tính cân_bằng mạnh , đầu_tiên_ta sẽ đưa nút lá cuối_cùng lên làm gốc , thế chỗ cho nút có khóa nhỏ nhất .\nDo nút gốc mới này có_giá trị có_thể lớn hơn nút con của nó , ta sẽ đổi chỗ cho của nó .\nSau_đó tiếp_tục gọi đệ_quy vì sau khi đổi chỗ , khóa của nó có_thể vẫn lớn hơn khóa của các nút con mới .\nTa gọi thủ_tục này là (Down-Heapify) .\nDo độ_cao của cây Heap là , thủ_tục này mất thời_gian .\nThao_tác đó được minh_họa trong hình dưới_đây : Giả mã : Code_C : Giả_sử_ta có đầu_vào là một mảng , ta muốn xây_dựng Heap với khóa là các phần_tử của mảng .\nTa có_thể xây_dựng bằng cách bắt_đầu_từ một Heap rỗng và lần_lượt chèn các phần_tử vào Heap .\nMỗi lần chèn ta mất thời_gian , do_đó , ta có_thể xây_dựng Heap trong thời_gian .\nTuy_nhiên , ta có_thể xây_dựng Heap trong thời_gian như_sau : Thao_tác đó được minh_họa trong hình sau .\nCác nút được đánh_dấu là các nút ta sẽ thực_hiện Down-Heapify .\nGiả mã : Code_C : Ta có các nhận_xét sau : Do_đó , tổng thời_gian của thuật_toán là : Đặt , sử_dụng của đẳng_thức theo và thay_thế , ta suy ra .\nDo_đó , ta có : Cấu_trúc Heap nhị_phân không bắt_buộc quan_hệ giữ con trái và con phải của một nút , có_nghĩa là con trái có_thể lớn hơn con phải và ngược_lại .\nDo_đó , ta có_thể \"tích hợp\" thêm quan_hệ giữa con phải và con trái .\nCấu_trúc sử_dụng ý_tưởng này chính là mà mình đã viết ở bài trước .\nCode đầy_đủ của bài viết : .\n1 Binary_Heap on Wikipedia , , Accessed 11/01/2016 .\n, , , , Trackback link : on Mình thắc_mắc chỗ DecreaseKey Giả_sử dãy ban_đầu của mình là a1 . . n Sau_đó mình xây_dựng min heap H1 . . n từ mảng a Bây_giờ mình thay_đổi giá_trị của phần_tử thứ i trong a thì làm_cho Heap nó thay_đổi như_thế nào ?\nVí_dụ : a = 4 2 3 1 => H = 1 2 3 4 Khi này mình thay_đổi a1 = 2 => Heap sẽ thành H = 1 2 5 2 (chưa hiệu chỉnh) Hiệu_chỉnh thành => H = 1 2 2 5 on Hi_Mình không hiểu ví_dụ của bạn lắm .\nTại_sao thay_đổi phần_tử a1 = 2 lại thay_đổi được toàn_bộ Heap như ví_dụ của bạn ?\nVề cơ_bản , bạn muốn thay_đổi một khóa .\ncó_thể hiểu là bạn muốn tăng hoặc giảm_giá_trị của khóa đó .\nGiảm_giá_trị khóa và duy_trì Heap sau khi giảm mình đã mô_tả trong phần DecreaseKey .\nNếu bạn muốn tăng_giá_trị của một khóa , làm tương_tự , nhưng bạn sẽ gọi DownHeapify thay_vì UpHeapify . Hùng on Về thay_đổi giá_trị của heap mình đã hiểu .\n- Nhưng giả_sử ban_đầu mình có mảng a .\n- Sau_đó mình xây_dựng heap từ mảng a đó => mảng a có n phần_tử thì mảng heap cũng có n phần_tử thôi - Bây_giờ bài_toán thay_đổi giá_trị của phần_tử trong mảng a , điều đó cũng có_nghĩa mình phải cho heap phải thay_đổi tương_ứng , thì mình sẽ code để heap thay_đổi ntn ?\n- Ý bạn là thay_đổi key trên heap , nhưng thay_đổi a1 = 2 chẳng_hạn thì lúc_này a1 ở chỗ nào trong heap để_mà thay_đổi .\non Trong trường_hợp này , có_lẽ bạn cần thêm một mảng nữa , ví_dụ pos1 , . . . , n để xác_định xem phần_tử Ai ở vị_trí nào trong Heap .\nVí_dụ pos1 = 5 nghĩa_là A1 ở vị_trí thứ 5 trong mảng Heap .\nKhi thực_hiện các thao_tác của Heap , ngoài các khung_cơ_bản như_trên thì bạn cần phải cập_nhật mảng post .\nHùngPowered by and\n", "tagged": "Nơi/N tổng_hợp/V và/Cc chia_sẻ/V những/L kiến_thức/N liên_quan/V tới/E giải_thuật/Np nói_chung/X và/Cc lý_thuyết/Np khoa_học/N máy_tính/N nói_riêng/X ./CH\nin/V Bài/N này/P mình/P sẽ/R giới_thiệu/V với/E các/L bạn/N cấu_trúc/N dữ_liệu/N Heap/Np nhị_phân/Np ./CH\nĐây/P là/V một/M cấu_trúc/N dữ_liệu/N đơn_giản/A ,/CH dễ/A thực_thi/V (you/Np will/Np see/Np that/Nb !/CH )/CH và/Cc hiệu_quả/N ./CH\nĐiểm/N yếu/A chính/T của/E cấu_trúc/N này/P hầu_hết/R các/L thao_tác/V hỗ_trợ/V có/V thời_gian/N ./CH\nHeap/Np thường/R được/V dùng/V để/E thực_thi/V (priority/Np queue)/Np ./CH\nNếu/C các/L bạn/N tìm_kiếm/V ,/CH bạn/N sẽ/R thấy/V một/M bảng/N so_sánh/V các/L loại/N Heap/Np khác_nhau/Np ./CH\nMỗi/L loại/N Heap/Np đều/R có_một/Np đặc_điểm/N riêng/A và/Cc lĩnh_vực/N ứng_dụng/V cụ_thể/A ./CH\nMột_số/L loại/N Heap/Np như/C Fibonacci_Heap/Np ,/CH Rank-Pairing_Heap/Np ,/CH Brodal_Heap/Np ,/CH etc/Np ./CH ,/CH có/V thời_gian/N tiệm_cận/Np cho/E hầu_hết/R các/L thao_tác/V ./CH\nTuy_nhiên/C ,/CH điểm/N yếu/A của/E chúng/P là/V thực_thi/V rất/R phức_tạp/A ,/CH tốn/V bộ_nhớ/Np (do/Np phải/V lưu_trữ/Np các/L con_trỏ/Np hỗ/Np trơ)/Np và/Cc mặc_dù/C tiệm_cận/Np là/V hay/Cc ,/CH hằng_số/Np ẩn/V sau/E kí_hiệu/Np là/V khá/R lớn/A ./CH\nNếu/C chúng_ta/P chấp_nhận/V các/L thao_tác/V trong/E thời_gian/N ,/CH heap/Np nhị_phân/Np là/V một/M cấu_trúc/N hoàn_hảo/A ./CH Ngữ_cảnh/Np ứng_dụng/V của/E Heap/Np nhị_phân/Np thường/R có/V dạng/N như_sau/Np :/CH Ta/P có_một/Np tập/V các/L phần_tử/N trong/E đó/P phần_tử/N thứ/N có_giá/Np trị/V ./CH\nThao_tác/V mà/C chúng_ta/P quan_tâm/V nhất/A đối_với/E tập/V này/P là/V tìm/V và/Cc lấy/V ra/V một/M phần_tử/N có_giá/Np trị/V nhỏ/A nhất/A (hoặc/Np lớn/A nhất)/Np của/E tập_hợp/N ./CH\nNgoài_ra/X ,/CH chúng_ta/P cũng/R muốn/V hỗ_trợ/V các/L thao_tác/V để/E thay_đổi/V tập_hợp/N đó/P ./CH\nDanh_sách/N một_số/L các/L thao_tác/V mà/C chúng_ta/P thường/R quan_tâm/V như_sau/Np :/CH Ta/P sẽ/R sử_dụng/V cấu_trúc/N Min-Heap/Np để/E thực_hiện/V các/L thao_tác/V trên/E trong/E thời_gian/N :/CH Tại/E thời_điểm/N này/P mình/P vẫn/R chưa/R định_nghĩa/N Heap/Np nhị_phân/Np trong/E như_thế/X nào/P cả/P ./CH\nMình/P sẽ/R định_nghĩa/N ở/E dưới/E ./CH\nTrong/E phần_ứng/Np dụng/V dưới_đây/Np ,/CH bạn_đọc/N chỉ_cần/Np quan_tâm/V đến/E các/L thao_tác/V và/Cc thời_gian_thực/Np hiện/N mỗi/L thao_tác/V mà/C cấu_trúc/N này/P hỗ_trợ/V mà/C chưa/R cần/V quan_tâm/V đến/E cấu_trúc/N Heap/Np sẽ/R được/V tổ_chức/V như_thế/X nào/P ./CH Ứng_dụng/V nổi_bật/A nhất/A của/E cấu_trúc/N Heap/Np nhị_phân/Np là/V trong/E sắp_xếp/V mà/C ta/P gọi_là/V thuật_toán/N Heapsort/Np ./CH\nGiả_sử_ta/Np có_một/Np mảng/N các/L số_nguyên/Np mà/C ta/P muốn/V sắp_xếp/V nó/P theo/V chiều/N tăng/V dần/R của/E giá_trị/N ./CH\nTa/P sẽ/R xây_dựng/V một/M min-Heap/Np nhị_phân/Np cho/E mảng/N này/P ./CH\nhỗ_trợ/V các/L thao_tác/V liệt_kê/V ở/E trên/E với/E thời_gian/N trong/E Theorem/Np 1/M ./CH\nĐể/E sắp_xếp/V mảng/N ta/P làm_theo/Np các/L bước/V sau/E :/CH Giả/A mã/N của/E Heapsort/Np :/CH Code_C/Np :/CH Do/E mỗi/L thao_tác/V mất/V thời_gian/N ,/CH tổng/N thời_gian/N để/E sắp_xếp/V mảng/N là/V ./CH\nMột/M ứng_dụng/V khác/A của/E min-Heap/Np là/V trong/E thuật_toán/N Dijsktra/Np tìm/V đường_đi/Np ngắn/A nhất/A từ/E một/M đỉnh/N trong/E đồ_thị/Np có/V trọng/Np số_không/Np âm/A ./CH\nMình/P sẽ/R blog/Np về/E thuật_toán/N này/P sau/E ./CH\nCấu_trúc/N biểu_diễn/V đơn_giản/A nhất_là/X danh_sách/N liên_kết/V ./CH\nNếu/C sử_dụng/V cấu_trúc/N đó/P ,/CH các/L thao_tác/V ,/CH mất/V nhưng/C ,/CH có_thể/R thực_hiện/V ./CH\nNếu/C sửa_đổi/V một_chút/L bằng/E cách/N luôn/R lưu/V phần_tử/N nhỏ/A nhất/A của/E tập_hợp/N ở/E đầu/N danh_sách/N và/Cc luôn/R chèn/V phần_tử/N mới/R vào/E cuối/N danh_sách/N ,/CH thì/C ta/P có_thể/R thực_hiện/V trong/E còn/R vẫn/R là/V do/E khi/N ta/P xóa/V phần_tử/N nhỏ/A nhất/A khỏi/V danh_sách/N ,/CH ta/P phải/V tìm/V phần_tử/N nhỏ/A nhất/A trong/E số/N các/L phần_tử/N còn_lại/Np và/Cc đưa/V nó/P về/E đầu/N danh_sách/N ./CH\nCách/N khác/A là/V dùng/V mảng/N ,/CH tuy_nhiên/C cách/N này/P cũng/R không/R ổn/A vì/E cho_dù/C có/V làm/V thế_nào/P thì/C một/M trong/E số/N các/L thao_tác/V trên/E cũng/R là/V ./CH Nếu/C chúng_ta/P muốn/V các/L thao_tác/V trong/E trường_hợp/N tồi/A nhất_là/X ,/CH ta/P phải/V nghĩ/V ngay/R đến/E cấu_trúc/N cây/N ./CH\nỞ/E đây/P mình/P sẽ/R dùng/V cấu_trúc/N cây/N nhị_phân/Np (do/Np đó/P gọi_là/V heap/Np nhị/M phân)/Np ./CH\nTrước_hết/N để/E đảm_bảo/V ,/CH cây/N của/E chúng_ta/P phải/V cân_bằng/A (do/Np đó/P độ/N sâu/A của/E cây/N là/V )/CH ./CH\nTa/P sẽ/R lưu/V phần_tử/N nhỏ/A nhất/A tại/E gốc/N của/E cây/N ,/CH do_đó/C có/V thời_gian/N ./CH\nCũng/R từ_đó/Np ta/P suy/V ra/V khóa/N của/E nút/N gốc/N nhỏ/A hơn/A khóa/N của/E hai/M nút/N con/Nc của/E nó/P ./CH\nTa/P sẽ/R đảm_bảo/V tính_chất/N này/P cho/E mọi/L nút/N của/E cây/N Heap/Np ./CH\nNhư_vậy/X hai/M tính_chất/N cần_thiết/A của/E cây/N Heap/Np là/V :/CH Ví/N du_tập/Np các/L giá_trị/N có/V cấu_trúc/N Heap/Np biểu_diễn/V minh_họa/V trong/E hình/N dưới_đây/Np :/CH Từ_tính/Np chất/N Heap/Np ,/CH bằng/E quy_nạp/Np ,/CH ta/P có_thể/R chứng_minh/V được/V :/CH Gọi/V (depth)/Np của/E một/M nút/N là/V số/N cạnh/N trên/E đường_đi/Np từ/E nút/N gốc/N đến/E nút/N đó/P ./CH\nGọi_là/V số/N cạnh/N đi/V từ/E gốc/N đến/E một/M nút/N lá/N tại/E mức/N cao/A nhất/A của/E cây/N đó/P ./CH\nTừ_tính/Np cân_bằng/A mạnh/A ,/CH ta/P suy/V ra/V :/CH mặc_dù/C ta/P nói/V nhưng/C thực_ra/X ta/P có_thể/R biểu_diễn/V \"cây\"/Np đó/P bằng/E một/M mảng/N ./CH\nTa/P sẽ/R biểu_diễn/V các/L nút/N của/E cây/N Heap/Np như_sau/Np :/CH Ví_dụ/C mảng/N tương_ứng/V với/E cây/N Heap/Np ở/E hình/N trên/E được/V minh_họa/V trong/E hình/N dưới_đây/Np ./CH\nCác/L mũi_tên/N màu/N đỏ/A gạch/N là/V các/L mũi_tên/N nối/V từ/E nút/N cha/N tới/E một/M nút/N con/Nc ./CH Trong/E thực_tế/N cài_đặt/V ,/CH nếu/C số_lượng/N phần_tử/N chèn/V vào/E vượt_quá/Np kích_thước/N của/E mảng/N ,/CH ta/P phải/V cấp_phát/V lại_bộ/Np nhớ/V cho/E mảng/N ./CH\nChiến_lược/N cấp_phát/V bộ_nhớ/Np có_thể/R áp_dụng/V là/V gấp_đôi/Np kích_thước/N của/E mảng/N mỗi/L lần_ta/Np phải/V cấp_phát/V bộ_nhớ/Np (giống/Np trong/E Java)/Np ./CH\nTrong/E trường_hợp/N chúng_ta/P biết/V được/V kích_thước/N tối_đa/A của/E mảng/N trong/E mọi/L thời_điểm/N thì/C bài_toán/N sẽ/R đơn_giản/A hơn/A nhiều/A ./CH Để/E chèn/V một/M khóa/N vào/E Heap/Np ,/CH ta/P sẽ/R tìm/V của/E cây/N ,/CH là/V nút/N lá/N cuối_cùng/A theo/V thứ_tự/N từ/E trái/Nc sang/V phải/V ./CH\nGọi/V nút/N là/V đó/P là/V ./CH\nĐể/E đảm_bảo/V tính/V cân_bằng/A mạnh/A ,/CH ta/P sẽ/R chèn/V vào/E nút/N anh_em/N (sibling)/Np gần/A nhất/A bên/N phải/V của/E ./CH\nNếu/C cây/N nhị_phân/Np là/V cân_bằng/A ,/CH ta/P sẽ/R chèn/V vào/E mức/N tiếp_theo/V ,/CH ngoài_cùng/Np bên/N trái/Nc ./CH\nThao_tác/V này/P được/V minh_họa/V trong/E hình/N (a)/Np và/Cc (b)/Np của/E hình/N dưới_đây/Np ./CH\nVấn_đề/N còn_lại/Np là/V đảm_bảo/V tính_chất/N Heap/Np ./CH\nNếu/C nút/N mới/R chèn/V vào/E có/V khóa/N nhỏ/A hơn/A nút/N cha/N nó/P ,/CH ta/P phải/V thay_thế/V chỗ/N của/E nó/P với/E cha/N nó/P ./CH\nSau/E khi/N đổi/V chỗ/N ,/CH khóa/N của/E nút/N này/P vẫn/R có_thể/R nhỏ/A hơn/A khóa/N của/E nút/N cha/N mới/R ./CH\nDo_đó/C ,/CH ta/P tiếp_tục/V gọi/V đệ_quy/Np cho_đến/E khi_nào/Np khóa/N của/E nó/P nhỏ/A hơn/A khóa/N của/E nút/N cha/N mới/R thì/C dừng/V lại/R ./CH\nTa/P gọi/V thủ_tục/N đẩy/V một/M nút/N lên/V là/V thao_tác/V (Up-Heapify)/Np ./CH\nThao_tác/V đó/P được/V minh_họa/V trong/E hình/N (c)/Np ,/CH (d)/Np ,/CH (e)/Np của/E hình/N dưới_đây/Np :/CH Với/E biểu_diễn/V mảng/N ,/CH của/E cây/N chính/T là/V và/Cc do_đó/C ,/CH anh_em/N gần/A nhất/A bên/N phải/V của/E nó/P là/V ./CH\nGiả/A mã/N :/CH Code_C/Np :/CH Thủ_tục/N vun/V đống/N ngược/A lên/V trên/E có/V thời_gian/N vì/E theo/V Fact/Np 2/M ,/CH cây/N Heap/Np có/V độ/N sâu/A ./CH\nDo_đó/C ,/CH ta/P có_thể/R chèn/V một/M nút/N vào/E trong/E Heap/Np trong/E thời_gian/N ./CH Khi/N giảm_giá_trị/Np khóa/N của/E một/M nút/N mà/C ta/P gọi_là/V ,/CH giá_trị/N mới/R của/E có_thể/R nhỏ/A hơn/A giá_trị/N khóa/N của/E nút/N cha/N của/E nó/P (tại/Np sao/P ta/P không/R cần/V quan_tâm/V đến/E các/L nút/N con/Nc của/E nó)/Np ./CH\nDo_đó/C ,/CH ta/P sẽ/R sử_dụng/V thủ_tục/N vun/V đống/N ngược/A lên/V trên/E Up-Heapify/Np để/E đảm_bảo/V tính/V cân_bằng/A ./CH\nThao_tác/V này/P mất/V thời_gian/N do/E chiều_cao/N của/E cây/N là/V ./CH\nHình/N minh_họa/V :/CH Giả/A mã/N như_sau/Np :/CH Code_C/Np :/CH Thủ_tục/N này/P phức_tạp/A hơn_cả/Np vì/E ta/P cần/V phải/V xóa/V phần_tử/N nhỏ/A nhất/A ra/V khỏi/V Heap/Np và/Cc cùng/A một_lúc/Np đảm_bảo/V các/L tính_chất/N của/E Heap/Np ./CH\nChú_ý/V phần_tử/N nhỏ/A nhất_là/X gốc/N của/E cây/N Heap/Np ./CH\nDo_đó/C ,/CH để/E đảm_bảo/V tính/V cân_bằng/A mạnh/A ,/CH đầu_tiên_ta/Np sẽ/R đưa/V nút/N lá/N cuối_cùng/A lên/V làm/V gốc/N ,/CH thế/P chỗ/N cho/E nút/N có/V khóa/N nhỏ/A nhất/A ./CH\nDo/E nút/N gốc/N mới/R này/P có_giá/Np trị/V có_thể/R lớn/A hơn/A nút/N con/Nc của/E nó/P ,/CH ta/P sẽ/R đổi/V chỗ/N cho/E của/E nó/P ./CH\nSau_đó/Np tiếp_tục/V gọi/V đệ_quy/Np vì/E sau/E khi/N đổi/V chỗ/N ,/CH khóa/N của/E nó/P có_thể/R vẫn/R lớn/A hơn/A khóa/N của/E các/L nút/N con/Nc mới/R ./CH\nTa/P gọi/V thủ_tục/N này/P là/V (Down-Heapify)/Np ./CH\nDo/E độ_cao/Np của/E cây/N Heap/Np là/V ,/CH thủ_tục/N này/P mất/V thời_gian/N ./CH\nThao_tác/V đó/P được/V minh_họa/V trong/E hình/N dưới_đây/Np :/CH Giả/A mã/N :/CH Code_C/Np :/CH Giả_sử_ta/Np có/V đầu_vào/N là/V một/M mảng/N ,/CH ta/P muốn/V xây_dựng/V Heap/Np với/E khóa/N là/V các/L phần_tử/N của/E mảng/N ./CH\nTa/P có_thể/R xây_dựng/V bằng/E cách/N bắt_đầu_từ/Np một/M Heap/Np rỗng/A và/Cc lần_lượt/R chèn/V các/L phần_tử/N vào/E Heap/Np ./CH\nMỗi/L lần/N chèn/V ta/P mất/V thời_gian/N ,/CH do_đó/C ,/CH ta/P có_thể/R xây_dựng/V Heap/Np trong/E thời_gian/N ./CH\nTuy_nhiên/C ,/CH ta/P có_thể/R xây_dựng/V Heap/Np trong/E thời_gian/N như_sau/Np :/CH Thao_tác/V đó/P được/V minh_họa/V trong/E hình/N sau/E ./CH\nCác/L nút/N được/V đánh_dấu/V là/V các/L nút/N ta/P sẽ/R thực_hiện/V Down-Heapify/Np ./CH\nGiả/A mã/N :/CH Code_C/Np :/CH Ta/P có/V các/L nhận_xét/N sau/E :/CH Do_đó/C ,/CH tổng/N thời_gian/N của/E thuật_toán/N là/V :/CH Đặt/V ,/CH sử_dụng/V của/E đẳng_thức/Np theo/V và/Cc thay_thế/V ,/CH ta/P suy/V ra/V ./CH\nDo_đó/C ,/CH ta/P có/V :/CH Cấu_trúc/N Heap/Np nhị_phân/Np không/R bắt_buộc/V quan_hệ/N giữ/V con/Nc trái/Nc và/Cc con/Nc phải/V của/E một/M nút/N ,/CH có_nghĩa/A là/V con/Nc trái/Nc có_thể/R lớn/A hơn/A con/Nc phải/V và/Cc ngược_lại/X ./CH\nDo_đó/C ,/CH ta/P có_thể/R \"tích/Np hợp\"/Np thêm/V quan_hệ/N giữa/N con/Nc phải/V và/Cc con/Nc trái/Nc ./CH\nCấu_trúc/N sử_dụng/V ý_tưởng/N này/P chính/T là/V mà/C mình/P đã/R viết/V ở/E bài/N trước/E ./CH\nCode/Np đầy_đủ/A của/E bài/N viết/V :/CH ./CH\n1/M Binary_Heap/Np on/Np Wikipedia/Np ,/CH ,/CH Accessed/Np 11/01/Np ./CH\n,/CH ,/CH ,/CH ,/CH Trackback/Np link/Np :/CH on/Np Mình/P thắc_mắc/V chỗ/N DecreaseKey/Np Giả_sử/Np dãy/Nc ban_đầu/N của/E mình/P là/V a1/Np ./CH ./CH n/Ny Sau_đó/Np mình/P xây_dựng/V min/Np heap/Np H1/Np ./CH ./CH n/Ny từ/E mảng/N a/Ni Bây_giờ/P mình/P thay_đổi/V giá_trị/N của/E phần_tử/N thứ/N i/M trong/E a/Ni thì/C làm_cho/Np Heap/Np nó/P thay_đổi/V như_thế/X nào/P ?/CH\nVí_dụ/C :/CH a/Ni =/CH 4/M 2/M 3/M 1/M =>/Np H/Ny =/CH 1/M 2/M 3/M 4/M Khi/N này/P mình/P thay_đổi/V a1/Np =/CH 2/M =>/Np Heap/Np sẽ/R thành/V H/Ny =/CH 1/M 2/M 5/M 2/M (chưa/Np hiệu/N chỉnh)/Np Hiệu_chỉnh/Np thành/V =>/Np H/Ny =/CH 1/M 2/M 2/M 5/M on/Np Hi_Mình/Np không/R hiểu/V ví_dụ/C của/E bạn/N lắm/R ./CH\nTại_sao/X thay_đổi/V phần_tử/N a1/Np =/CH 2/M lại/R thay_đổi/V được/V toàn_bộ/L Heap/Np như/C ví_dụ/C của/E bạn/N ?/CH\nVề/E cơ_bản/A ,/CH bạn/N muốn/V thay_đổi/V một/M khóa/N ./CH\ncó_thể/R hiểu/V là/V bạn/N muốn/V tăng/V hoặc/Cc giảm_giá_trị/Np của/E khóa/N đó/P ./CH\nGiảm_giá_trị/Np khóa/N và/Cc duy_trì/V Heap/Np sau/E khi/N giảm/V mình/P đã/R mô_tả/V trong/E phần/N DecreaseKey/Np ./CH\nNếu/C bạn/N muốn/V tăng_giá_trị/Np của/E một/M khóa/N ,/CH làm/V tương_tự/A ,/CH nhưng/C bạn/N sẽ/R gọi/V DownHeapify/Np thay_vì/X UpHeapify/Np ./CH Hùng/A on/Np Về/E thay_đổi/V giá_trị/N của/E heap/Np mình/P đã/R hiểu/V ./CH\n-/CH Nhưng/C giả_sử/Np ban_đầu/N mình/P có/V mảng/N a/Ni ./CH\n-/CH Sau_đó/Np mình/P xây_dựng/V heap/Np từ/E mảng/N a/Ni đó/P =>/Np mảng/N a/Ni có/V n/Ny phần_tử/N thì/C mảng/N heap/Np cũng/R có/V n/Ny phần_tử/N thôi/T -/CH Bây_giờ/P bài_toán/N thay_đổi/V giá_trị/N của/E phần_tử/N trong/E mảng/N a/Ni ,/CH điều/N đó/P cũng/R có_nghĩa/A mình/P phải/V cho/E heap/Np phải/V thay_đổi/V tương_ứng/V ,/CH thì/C mình/P sẽ/R code/Np để/E heap/Np thay_đổi/V ntn/Np ?/CH\n-/CH Ý/N bạn/N là/V thay_đổi/V key/Np trên/E heap/Np ,/CH nhưng/C thay_đổi/V a1/Np =/CH 2/M chẳng_hạn/X thì/C lúc_này/Np a1/Np ở/E chỗ/N nào/P trong/E heap/Np để_mà/Np thay_đổi/V ./CH\non/Np Trong/E trường_hợp/N này/P ,/CH có_lẽ/X bạn/N cần/V thêm/V một/M mảng/N nữa/R ,/CH ví_dụ/C pos1/Np ,/CH ./CH ./CH ./CH ,/CH n/Ny để/E xác_định/V xem/V phần_tử/N Ai/P ở/E vị_trí/N nào/P trong/E Heap/Np ./CH\nVí_dụ/C pos1/Np =/CH 5/M nghĩa_là/V A1/Np ở/E vị_trí/N thứ/N 5/M trong/E mảng/N Heap/Np ./CH\nKhi/N thực_hiện/V các/L thao_tác/V của/E Heap/Np ,/CH ngoài/E các/L khung_cơ_bản/Np như_trên/Np thì/C bạn/N cần/V phải/V cập_nhật/V mảng/N post/Np ./CH\nHùngPowered/Np by/Np and/Np\n", "title": "Heap nhị phân và thuật toán Heapsort -- Binary Heap and Heapsort\n", "link": "http://www.giaithuatlaptrinh.com/?p=736\n"}