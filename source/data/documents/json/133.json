{"content": "Xâu ( string ) xuất_hiện rất nhiều trong các bài_toán .\nBài viết này giới_thiệu sơ_qua một_số thuật_ngữ cũng_như thuật_toán về xâu .\nThuật_ngữ Một xâu X là xâu con ( substring ) của một xâu Y nếu X là một chuỗi các ký_tự liên_tiếp của Y .\nVí_dụ : ab và bc là 2 xâu con của abcd .\nNhưng ac thì không_phải là xâu con của abcd .\nMột xâu X là tiền_tố ( prefix ) của một xâu Y nếu X là xâu con của Y và X xuất_hiện ở đầu của xâu Y .\nVí_dụ : ab là tiền_tố của abcd , nhưng bc không_phải là tiền_tố của abcd .\nMột xâu X là một tiền_tố không tầm_thường ( proper prefix ) của xâu Y nếu nó là tiền_tố của xâu Y và khác xâu Y .\nMột xâu X là hậu_tố ( hậu_tố ) của một xâu Y nếu X là xâu con của Y và X xuất_hiện ở cuối của xâu Y .\nVí_dụ : cd là hậu_tố của abcd , nhưng bc không_phải là hậu_tố của abcd .\nMột xâu X là một hậu_tố không tầm_thường ( proper suffix ) của xâu Y nếu nó là hậu_tố của xâu Y và khác xâu Y .\nCác dạng bài So khớp chuỗi (string matching) Cho một xâu T và xâu S .\nTìm tất_cả các lần xuất_hiện của xâu S trong xâu T .\nVí_dụ : S = abc T = abcabcabc Các lần xuất_hiện : 1 , 4 , 7 .\nBài_toán này còn được gọi_là tìm_kiếm cây_kim ( needle ) trong đống rơm ( haystack ) , vì nó xuất_hiện trong thực_tế khi ta cần tìm một xâu rất nhỏ trong một lượng dữ_liệu rất lớn (ví dụ Google cần tìm từ khóa trong hàng_tỉ_tỉ trang web) .\nCó 3 thuật_toán chính để giải_quyết bài này , đó là : Thuật_toán KMP_Hash_Z_Algorithm_Xâu đối_xứng (Palindrome) Palindrome hay còn gọi_là xâu đối_xứng , xâu đối gương là tên_gọi của những xâu kí_tự mà khi viết từ phải qua trái hay từ trái qua phải_thì xâu đó không thay_đổi .\nVD : MADAM , IOI , . . .\nCó rất nhiều bài_tập liên_quan đến xâu đối_xứng .\nCác bạn có_thể tìm đọc ở trong các bài viết : Một_vài bài_tập QHD về Palindrome_Hash_Palindrome_Tree Cấu_trúc dữ_liệu Trie là CTDL cơ_bản nhất trong xử_lý xâu .\nNó giúp giải_quyết các bài_toán về tìm_kiếm xâu .\nLớp_CTDL được gọi chung là Suffix_Structures gồm : Suffix_Array Suffix_Automaton_Suffix_Tree_Aho_Corasick_Gọi chung như_vậy vì các CTDL này có_thể dùng thay_thế nhau để giải_quyết cùng một lớp bài_toán liên_quan đến các suffix của cây .\nCác bài Ad-hoc_Trong xử_lý xâu còn một_vài thuật_toán chỉ áp_dụng được cho 1 bài_toán (ad-hoc) .\nThuật_toán Manacher Bài_toán Cho xâu S .\nVới mỗi vị_trí i của xâu S , tìm xâu đối_xứng dài nhất nhận i là tâm .\nVới mỗi cặp i , i+1 của xâu S , tìm xâu đối_xứng dài nhất nhận i và i+1 là tâm .\nMô_tả thuật_toán Tham_khảo thêm ở link Code const char DUMMY = .\n; int manacher ( string s ) // Để tránh phải xét riêng trường_hợp độ_dài xâu đối_xứng chẵn / lẻ , // ta thêm 1 ký_tự DUMMY vào giữa các ký_tự của s .\n// CHÚ_Ý : Phải đảm_bảo DUMMY không có trong xâu s int n = s .\nsize () 2 - 1 ; vector lt; int gt; f = vector lt; int gt; ( n , 0 ); // Tạo xâu a bằng cách chèn ký_tự DUMMY vào giữa các ký_tự của s .\n// Ví_dụ : // s = aabcb // a = a . a . b . c . b string a = string ( n , DUMMY ); for ( int i = 0 ; i lt; n ; i += 2 ) a i = s i / 2 ; int l = 0 , r = - 1 , center , res = 0 ; for ( int i = 0 , j = 0 ; i lt; n ; i ++ ) j = ( i gt; r ?\n0 : min ( f l + r - i , r - i )) + 1 ; while ( i - j gt;= 0 amp;amp; i + j lt; n amp;amp; a i - j == a i + j ) j ++ ; f i = -- j ; if ( i + j gt; r ) r = i + j ; l = i - j ; int len = ( f i + i % 2 ) / 2 2 + 1 - i % 2 ; if ( len gt; res ) res = len ; center = i ; // Với mỗi vị_trí i , xâu đối_xứng dài nhất nhận i là tâm là i - fi , i + fi .\n// Ví_dụ : // s = aabcb // a = a . a . b . c . b // f = 011010200 return res ; Minimal string rotation Bài_toán Cho một xâu S .\nXét các xâu thu được từ xâu S bằng phép xoay .\nVí_dụ : S = abcd , thì các xâu thu được từ S bằng phép xoay là : abcd bcda cdab dabc Tìm xâu có thứ_tự từ_điển nhỏ nhất .\nMô_tả thuật_toán Bạn có_thể xem ở đây Code // Tính vị_trí của xâu xoay vòng có thứ_tự từ_điển nhỏ nhất của xâu s int minmove ( string s ) int n = s .\nlength (); int x , y , i , j , u , v ; // x is the smallest string before string y for ( x = 0 , y = 1 ; y lt; n ; ++ y ) i = u = x ; j = v = y ; while ( s i == s j ) ++ u ; ++ v ; if ( ++ i == n ) i = 0 ; if ( ++ j == n ) j = 0 ; if ( i == x ) break ; // All strings are equal if ( s i lt;= s j ) y = v ; else x = y ; if ( u gt; y ) y = u ; return x ; Lyndon_Decomposition Bài_toán Lyndon word là các xâu khác rỗng , mà có thứ_tự từ_điển nhỏ hơn tất_cả các xâu thu được bằng phép xoay của nó .\nCho một xâu S .\nTìm cách tách S thành ít_nhất các xâu , sao_cho mỗi xâu đều là Lyndon word .\nCode void lyndon ( string s ) int n = ( int ) s .\nlength (); int i = 0 ; while ( i lt; n ) int j = i + 1 , k = i ; while ( j lt; n amp;amp; s k lt;= s j ) if ( s k lt; s j ) k = i ; else ++ k ; ++ j ; while ( i lt;= k ) cout lt;lt; s .\nsubstr ( i , j - k ) lt;lt; ; i += j - k ; cout lt;lt; endl ;\n", "tagged": "Xâu/Np (/CH string/Np )/CH xuất_hiện/V rất/R nhiều/A trong/E các/L bài_toán/N ./CH\nBài/N viết/V này/P giới_thiệu/V sơ_qua/Np một_số/L thuật_ngữ/N cũng_như/C thuật_toán/N về/E xâu/Np ./CH\nThuật_ngữ/N Một/M xâu/Np X/CH là/V xâu/Np con/Nc (/CH substring/Np )/CH của/E một/M xâu/Np Y/N nếu/C X/CH là/V một/M chuỗi/N các/L ký_tự/Np liên_tiếp/A của/E Y/N ./CH\nVí_dụ/C :/CH ab/Np và/Cc bc/Np là/V 2/M xâu/Np con/Nc của/E abcd/Np ./CH\nNhưng/C ac/Np thì/C không_phải/Np là/V xâu/Np con/Nc của/E abcd/Np ./CH\nMột/M xâu/Np X/CH là/V tiền_tố/Np (/CH prefix/Np )/CH của/E một/M xâu/Np Y/N nếu/C X/CH là/V xâu/Np con/Nc của/E Y/N và/Cc X/CH xuất_hiện/V ở/E đầu/N của/E xâu/Np Y/N ./CH\nVí_dụ/C :/CH ab/Np là/V tiền_tố/Np của/E abcd/Np ,/CH nhưng/C bc/Np không_phải/Np là/V tiền_tố/Np của/E abcd/Np ./CH\nMột/M xâu/Np X/CH là/V một/M tiền_tố/Np không/R tầm_thường/Np (/CH proper/Np prefix/Np )/CH của/E xâu/Np Y/N nếu/C nó/P là/V tiền_tố/Np của/E xâu/Np Y/N và/Cc khác/A xâu/Np Y/N ./CH\nMột/M xâu/Np X/CH là/V hậu_tố/Np (/CH hậu_tố/Np )/CH của/E một/M xâu/Np Y/N nếu/C X/CH là/V xâu/Np con/Nc của/E Y/N và/Cc X/CH xuất_hiện/V ở/E cuối/N của/E xâu/Np Y/N ./CH\nVí_dụ/C :/CH cd/Np là/V hậu_tố/Np của/E abcd/Np ,/CH nhưng/C bc/Np không_phải/Np là/V hậu_tố/Np của/E abcd/Np ./CH\nMột/M xâu/Np X/CH là/V một/M hậu_tố/Np không/R tầm_thường/Np (/CH proper/Np suffix/Np )/CH của/E xâu/Np Y/N nếu/C nó/P là/V hậu_tố/Np của/E xâu/Np Y/N và/Cc khác/A xâu/Np Y/N ./CH\nCác/L dạng/N bài/N So/V khớp/N chuỗi/N (string/Np matching)/Np Cho/E một/M xâu/Np T/Nu và/Cc xâu/Np S/Y ./CH\nTìm/V tất_cả/P các/L lần/N xuất_hiện/V của/E xâu/Np S/Y trong/E xâu/Np T/Nu ./CH\nVí_dụ/C :/CH S/Y =/CH abc/Ny T/Nu =/CH abcabcabc/Np Các/L lần/N xuất_hiện/V :/CH 1/M ,/CH 4/M ,/CH 7/M ./CH\nBài_toán/N này/P còn/R được/V gọi_là/V tìm_kiếm/V cây_kim/Np (/CH needle/Np )/CH trong/E đống/N rơm/N (/CH haystack/Np )/CH ,/CH vì/E nó/P xuất_hiện/V trong/E thực_tế/N khi/N ta/P cần/V tìm/V một/M xâu/Np rất/R nhỏ/A trong/E một/M lượng/N dữ_liệu/N rất/R lớn/A (ví/Np dụ/V Google/Np cần/V tìm/V từ/E khóa/N trong/E hàng_tỉ_tỉ/Np trang/N web)/Np ./CH\nCó/V 3/M thuật_toán/N chính/T để/E giải_quyết/V bài/N này/P ,/CH đó/P là/V :/CH Thuật_toán/N KMP_Hash_Z_Algorithm_Xâu/Np đối_xứng/Np (Palindrome)/Np Palindrome/Np hay/Cc còn/R gọi_là/V xâu/Np đối_xứng/Np ,/CH xâu/Np đối/V gương/N là/V tên_gọi/Np của/E những/L xâu/Np kí_tự/Np mà/C khi/N viết/V từ/E phải/V qua/V trái/Nc hay/Cc từ/E trái/Nc qua/V phải_thì/Np xâu/Np đó/P không/R thay_đổi/V ./CH\nVD/Np :/CH MADAM/Nb ,/CH IOI/Np ,/CH ./CH ./CH ./CH\nCó/V rất/R nhiều/A bài_tập/Np liên_quan/V đến/E xâu/Np đối_xứng/Np ./CH\nCác/L bạn/N có_thể/R tìm/V đọc/V ở/E trong/E các/L bài/N viết/V :/CH Một_vài/L bài_tập/Np QHD/Np về/E Palindrome_Hash_Palindrome_Tree/Np Cấu_trúc/N dữ_liệu/N Trie/Np là/V CTDL/Np cơ_bản/A nhất/A trong/E xử_lý/V xâu/Np ./CH\nNó/P giúp/V giải_quyết/V các/L bài_toán/N về/E tìm_kiếm/V xâu/Np ./CH\nLớp_CTDL/Np được/V gọi/V chung/A là/V Suffix_Structures/Np gồm/V :/CH Suffix_Array/Np Suffix_Automaton_Suffix_Tree_Aho_Corasick_Gọi/Np chung/A như_vậy/X vì/E các/L CTDL/Np này/P có_thể/R dùng/V thay_thế/V nhau/N để/E giải_quyết/V cùng/A một/M lớp/N bài_toán/N liên_quan/V đến/E các/L suffix/Np của/E cây/N ./CH\nCác/L bài/N Ad-hoc_Trong/Np xử_lý/V xâu/Np còn/R một_vài/L thuật_toán/N chỉ/R áp_dụng/V được/V cho/E 1/M bài_toán/N (ad-hoc)/Np ./CH\nThuật_toán/N Manacher/Np Bài_toán/N Cho/E xâu/Np S/Y ./CH\nVới/E mỗi/L vị_trí/N i/M của/E xâu/Np S/Y ,/CH tìm/V xâu/Np đối_xứng/Np dài/A nhất/A nhận/V i/M là/V tâm/N ./CH\nVới/E mỗi/L cặp/N i/M ,/CH i+1/Np của/E xâu/Np S/Y ,/CH tìm/V xâu/Np đối_xứng/Np dài/A nhất/A nhận/V i/M và/Cc i+1/Np là/V tâm/N ./CH\nMô_tả/V thuật_toán/N Tham_khảo/V thêm/V ở/E link/Np Code/Np const/Np char/Np DUMMY/Np =/CH ./CH\n;/CH int/Np manacher/Np (/CH string/Np s/Y )/CH //CH Để/E tránh/V phải/V xét/V riêng/A trường_hợp/N độ_dài/Np xâu/Np đối_xứng/Np chẵn/Np //CH lẻ/A ,/CH //CH ta/P thêm/V 1/M ký_tự/Np DUMMY/Np vào/E giữa/N các/L ký_tự/Np của/E s/Y ./CH\n//CH CHÚ_Ý/V :/CH Phải/V đảm_bảo/V DUMMY/Np không/R có/V trong/E xâu/Np s/Y int/Np n/Ny =/CH s/Y ./CH\nsize/Nb ()/Np 2/M -/CH 1/M ;/CH vector/Np lt;/Np int/Np gt;/Np f/Np =/CH vector/Np lt;/Np int/Np gt;/Np (/CH n/Ny ,/CH 0/M );/CH //CH Tạo/V xâu/Np a/Ni bằng/E cách/N chèn/V ký_tự/Np DUMMY/Np vào/E giữa/N các/L ký_tự/Np của/E s/Y ./CH\n//CH Ví_dụ/C :/CH //CH s/Y =/CH aabcb/Np //CH a/Ni =/CH a/Ni ./CH a/Ni ./CH b/Ni ./CH c/Ni ./CH b/Ni string/Np a/Ni =/CH string/Np (/CH n/Ny ,/CH DUMMY/Np );/CH for/Np (/CH int/Np i/M =/CH 0/M ;/CH i/M lt;/Np n/Ny ;/CH i/M +=/Np 2/M )/CH a/Ni i/M =/CH s/Y i/M //CH 2/M ;/CH int/Np l/Ny =/CH 0/M ,/CH r/Np =/CH -/CH 1/M ,/CH center/Np ,/CH res/Np =/CH 0/M ;/CH for/Np (/CH int/Np i/M =/CH 0/M ,/CH j/Np =/CH 0/M ;/CH i/M lt;/Np n/Ny ;/CH i/M ++/Np )/CH j/Np =/CH (/CH i/M gt;/Np r/Np ?/CH\n0/M :/CH min/Np (/CH f/Np l/Ny +/CH r/Np -/CH i/M ,/CH r/Np -/CH i/M ))/Np +/CH 1/M ;/CH while/Np (/CH i/M -/CH j/Np gt;=/Np 0/M amp;amp;/Np i/M +/CH j/Np lt;/Np n/Ny amp;amp;/Np a/Ni i/M -/CH j/Np ==/Np a/Ni i/M +/CH j/Np )/CH j/Np ++/Np ;/CH f/Np i/M =/CH --/Np j/Np ;/CH if/Np (/CH i/M +/CH j/Np gt;/Np r/Np )/CH r/Np =/CH i/M +/CH j/Np ;/CH l/Ny =/CH i/M -/CH j/Np ;/CH int/Np len/N =/CH (/CH f/Np i/M +/CH i/M %/CH 2/M )/CH //CH 2/M 2/M +/CH 1/M -/CH i/M %/CH 2/M ;/CH if/Np (/CH len/N gt;/Np res/Np )/CH res/Np =/CH len/N ;/CH center/Np =/CH i/M ;/CH //CH Với/E mỗi/L vị_trí/N i/M ,/CH xâu/Np đối_xứng/Np dài/A nhất/A nhận/V i/M là/V tâm/N là/V i/M -/CH fi/Np ,/CH i/M +/CH fi/Np ./CH\n//CH Ví_dụ/C :/CH //CH s/Y =/CH aabcb/Np //CH a/Ni =/CH a/Ni ./CH a/Ni ./CH b/Ni ./CH c/Ni ./CH b/Ni //CH f/Np =/CH 011010200/Np return/Np res/Np ;/CH Minimal/Np string/Np rotation/Np Bài_toán/N Cho/E một/M xâu/Np S/Y ./CH\nXét/V các/L xâu/Np thu/V được/V từ/E xâu/Np S/Y bằng/E phép/N xoay/V ./CH\nVí_dụ/C :/CH S/Y =/CH abcd/Np ,/CH thì/C các/L xâu/Np thu/V được/V từ/E S/Y bằng/E phép/N xoay/V là/V :/CH abcd/Np bcda/Np cdab/Np dabc/Np Tìm/V xâu/Np có/V thứ_tự/N từ_điển/Np nhỏ/A nhất/A ./CH\nMô_tả/V thuật_toán/N Bạn/N có_thể/R xem/V ở/E đây/P Code/Np //CH Tính/V vị_trí/N của/E xâu/Np xoay/V vòng/N có/V thứ_tự/N từ_điển/Np nhỏ/A nhất/A của/E xâu/Np s/Y int/Np minmove/Np (/CH string/Np s/Y )/CH int/Np n/Ny =/CH s/Y ./CH\nlength/Np ();/Np int/Np x/CH ,/CH y/N ,/CH i/M ,/CH j/Np ,/CH u/N ,/CH v/Nu ;/CH //CH x/CH is/Np the/B smallest/Np string/Np before/Np string/Np y/N for/Np (/CH x/CH =/CH 0/M ,/CH y/N =/CH 1/M ;/CH y/N lt;/Np n/Ny ;/CH ++/Np y/N )/CH i/M =/CH u/N =/CH x/CH ;/CH j/Np =/CH v/Nu =/CH y/N ;/CH while/Np (/CH s/Y i/M ==/Np s/Y j/Np )/CH ++/Np u/N ;/CH ++/Np v/Nu ;/CH if/Np (/CH ++/Np i/M ==/Np n/Ny )/CH i/M =/CH 0/M ;/CH if/Np (/CH ++/Np j/Np ==/Np n/Ny )/CH j/Np =/CH 0/M ;/CH if/Np (/CH i/M ==/Np x/CH )/CH break/Np ;/CH //CH All/Np strings/Np are/Np equal/Np if/Np (/CH s/Y i/M lt;=/Np s/Y j/Np )/CH y/N =/CH v/Nu ;/CH else/Np x/CH =/CH y/N ;/CH if/Np (/CH u/N gt;/Np y/N )/CH y/N =/CH u/N ;/CH return/Np x/CH ;/CH Lyndon_Decomposition/Np Bài_toán/N Lyndon/Np word/Np là/V các/L xâu/Np khác/A rỗng/A ,/CH mà/C có/V thứ_tự/N từ_điển/Np nhỏ/A hơn/A tất_cả/P các/L xâu/Np thu/V được/V bằng/E phép/N xoay/V của/E nó/P ./CH\nCho/E một/M xâu/Np S/Y ./CH\nTìm/V cách/N tách/V S/Y thành/V ít_nhất/A các/L xâu/Np ,/CH sao_cho/Np mỗi/L xâu/Np đều/R là/V Lyndon/Np word/Np ./CH\nCode/Np void/Np lyndon/Np (/CH string/Np s/Y )/CH int/Np n/Ny =/CH (/CH int/Np )/CH s/Y ./CH\nlength/Np ();/Np int/Np i/M =/CH 0/M ;/CH while/Np (/CH i/M lt;/Np n/Ny )/CH int/Np j/Np =/CH i/M +/CH 1/M ,/CH k/N =/CH i/M ;/CH while/Np (/CH j/Np lt;/Np n/Ny amp;amp;/Np s/Y k/N lt;=/Np s/Y j/Np )/CH if/Np (/CH s/Y k/N lt;/Np s/Y j/Np )/CH k/N =/CH i/M ;/CH else/Np ++/Np k/N ;/CH ++/Np j/Np ;/CH while/Np (/CH i/M lt;=/Np k/N )/CH cout/Np lt;lt;/Np s/Y ./CH\nsubstr/Np (/CH i/M ,/CH j/Np -/CH k/N )/CH lt;lt;/Np ;/CH i/M +=/Np j/Np -/CH k/N ;/CH cout/Np lt;lt;/Np endl/Np ;/CH\n", "title": "Xử lý xâu\n", "link": "http://vnoi.info/wiki/algo/string/basic\n"}