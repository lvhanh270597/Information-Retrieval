{"content": "Nơi tổng_hợp và chia_sẻ những kiến_thức liên_quan tới giải_thuật nói_chung và lý_thuyết khoa_học máy_tính nói_riêng .\nin Danh_sách liên_kết (DSLK) đơn (Singly linked list) là một cấu_trúc dữ_liệu cơ_bản và có cực_kì nhiều ứng_dụng .\nÝ_tưởng của DSLK_đơn khá đơn_giản .\nTuy_nhiên , để cài_đặt cấu_trúc DSLK_đơn một_cách ngắn_gọn , hiệu_quả thì không_phải là điều hiển_nhiên .\nTrong bài này , chúng_ta sẽ thảo_luận các cách cài_đặt danh_sách liên_kết (trong C) sao_cho và .\nCài_đặt DSLK trong C không_thể tránh khỏi sử_dụng con_trỏ (pointer) và struct .\nCon_trỏ là một kiểu dữ_liệu cực_kì mạnh_của ngôn_ngữ C .\nNó cho_phép người lập_trình thao_tác bộ_nhớ rất hiệu_quả .\nNhững lập_trình_viên giỏi luôn là những lập_trình_viên biết thao_tác con_trỏ một_cách thuần_thục .\nTuy_nhiên , điểm yếu của con_trỏ là khó học , khó nắm_bắt và cũng khó debug các chương_trình có_con trỏ , nhất_là đối_với những người lần đầu tiếp_xúc với khái_niệm con_trỏ .\nTrong bài này , mình cũng không có gắng giải_thích ý_nghĩa , mặc_dù có nhắc_lại , con_trỏ .\nMình khuyến_khích các bạn tự tìm_hiểu , vì có rất nhiều nguồn , kể_cả tiếng Anh và tiếng Việt .\nPhần cuối bài mình sẽ liên_kết một_số bài viết hay về con_trỏ .\nMục_tiêu của bài này là minh_họa tối_đa khả_năng kì_diệu của con_trỏ trong thao danh_sách liên_kết .\nCác bài khác trong blog mình thường minh_họa bằng giả mã .\nTuy_nhiên , bài này mình sẽ trực_tiếp sử_dụng code C . Một con_trỏ (pointer) là một biến dùng để lưu_trữ của một biến khác .\nBiến khác ở đây có_thể là một biến thông_thường như biến_số nguyên , biến_số thực , hoặc có_thể là một mảng , một hàm , và có_khi cũng chính là một con_trỏ khác .\nVì con_trỏ là một biến nên nó cũng cần phải được lưu_trữ ở đâu_đó trong bộ nhớ; có_nghĩa là bản_thân biến con_trỏ cũng có_một địa_chỉ trong bộ_nhớ .\nDo_đó , ta có_thể dùng con_trỏ đề lưu địa_chỉ của một con_trỏ khác .\nTính_chất này cũng chính là sự kì_diệu của con_trỏ mà mình sẽ minh_họa trong bài này . Cú_pháp khai_báo con_trỏ trong C , nói một_cách đơn_giản (nhưng không hoàn_toàn chính xác) , gồm 3 phần : (i) kiểu của biến khác mà con_trỏ lưu_trữ địa_chỉ , (2) dấu và (3) tên của con_trỏ .\nCon_trỏ hàm thì khai_báo hơi khác một_chút , nhưng đây không_phải vấn_đề trọng_tâm của bài viết .\nVí_dụ , khai_báo một_số con_trỏ : Khai_báo thì như_vậy , nhưng ý_nghĩa của con_trỏ thì không_phải lúc nào cũng nhất_quán .\nVí_dụ con_trỏ vừa có_thể hiểu là con_trỏ tới một biến_số nguyên , vừa có_thể hiểu là con_trỏ tới phần_tử đầu_tiên của một mảng số_nguyên . Struct trong C cho_phép chúng_ta tập_hợp một hoặc một_vài kiểu dữ_liêu khác_nhau thành một kiểu dữ_liệu mới .\nCác kiểu dữ_liệu thành_phần của một struct có_thể là kiểu dữ_liệu sẵn_có như số_nguyên , số_thực , con_trỏ , hoặc một kiểu struct đã định_nghĩa trước đó .\nTóm_lại , struct cho_phép chúng_ta \"gộp\" một_số kiểu dữ_liệu đã có lại với_nhau để tiện thao_tác .\nTrong_DSLK , struct được sử_dụng để khai_báo một \"mắt xích\" của danh_sách .\nVí_dụ ta muốn khai_báo một mắt_xích của một danh_sách liên_kết các biến kiểu int thì ta có_thể khai_báo như_sau : Biến trong khai_báo trên là dữ_liệu của mỗi mắt_xích và nó có kiểu int .\nKiểu của còn có_thể là con_trỏ , hay một struct .\nMỗi mắt_xích thường được minh_họa như trong Figure 1 , trong đó , mũi_tên ám_chỉ con_trỏ lưu địa_chỉ của mắt_xích tiếp_theo (con trỏ next) .\nCon_trỏ này trong mắt_xích cuối_cùng của danh_sách thường là .\nBiểu_diễn một mắt_xích của danh_sách liên_kết . Để khởi tạo một mắt_xích , ta sẽ dùng hàm_malloc (viết tắt của emory ation) .\nMalloc là một hàm quản_lí bộ_nhớ của C .\nBản_thân hàm này cũng khá phức_tạp .\nBạn_đọc xem thêm tại liên_kết ở cuối bài . Danh_sách liên_kết đơn , về_mặt trực_quan , là cấu_trúc dữ_liệu tuyến_tính giống_như một cái xích dài liên_kết các \"mắt xích\" với_nhau .\nMỗi mắt_xích có dạng khai_báo llnode ở trên .\nFigure 2 minh_họa một danh_sách liên_kết với 5 phần_tử .\nMột danh_sách liên_kết với 5 phần_tử . Để theo_dõi danh_sách , ta sẽ dùng một con_trỏ đặc_biệt , gọi_là con_trỏ head .\nCon_trỏ này lưu_trữ của mắt_xích đầu_tiên của danh_sách .\nNhư đã nói ở trên , con_trỏ của mắt_xích cuối_cùng của danh_sách sẽ có_giá trị .\nTa có_thể duyệt qua danh_sách này bằng cách bắt_đầu_từ phần_tử đầu_tiên , đi_theo con_trỏ liên_kết để đi_tới nút tiếp_theo .\nĐến khi ta gặp con_trỏ thì ta đã duyệt xong danh_sách .\nĐoạn code dưới_đây là thủ_tục walk_down để duyệt danh_sách . Trong đoạn code trên , liệu ta có bị mất con_trỏ head ?\nCâu trả_lời là không vì mỗi lần gọi một hàm walk_down như_trên , một bản \"copy\" của con_trỏ head sẽ được tạo ra , và hàm walk_down sẽ thay_đổi bản copy này .\nBản_gốc vẫn không thay_đổi .\nNếu bạn thay_đổi con_trỏ head trong hàm main (hàm mà bạn tạo ra con_trỏ này) hoặc con_trỏ head là một biến toàn_cục , thì con_trỏ head sẽ bị thay_đổi , hay bị mất .\nĐiều gì sẽ xảy_ra nếu_như ta \"làm mất\" con_trỏ head ?\nBạn sẽ mất dấu của danh_sách và do_đó , sẽ không_thể thao_tác được với danh_sách nữa .\nPhần bộ_nhớ của danh_sách lúc_này sẽ vẫn bị chiếm bởi danh_sách , do_đó , tạo ra rác (garbage) trong hệ_thống .\nPhần rác này tồn_tại cho_đến khi chương_trình kết_thúc .\nBài_học rút ra : khi_nào bạn không còn cần danh_sách nữa thì sử_dụng hàm free để giải_phóng bộ_nhớ , đừng bao_giờ để_mất dấu con_trỏ head vì nó sẽ tạo ra rác .\nKhi thêm phần_tử mới vào danh_sách , nếu bài_toán không có yêu_cầu gì đặc_biệt , thì bạn nên của danh_sách .\nNếu bạn thêm vào đuôi của danh_sách (theo tư_duy thông thường) , thì ngoài phải trả thêm bộ_nhớ để lưu_trữ con_trỏ đuôi của danh_sách (nếu không_lưu con_trỏ này thì sẽ phải duyệt rất tốn thời gian) , bạn phải xét trường_hợp khi danh_sách rỗng (con trỏ đuôi là ) , i . e , thêm if-then trong code .\nĐiều này làm code vừa chậm vừa \"tối sủa\" (xem code ví_dụ dưới đây) . Tóm_lại , .\nĐoạn code sau minh_họa thao_tác chèn vào đầu .\nRõ_ràng đoạn code dưới_đây đẹp hơn rất nhiều .\nCác bước chèn một mắt_xích có_giá trị 6 vào đầu DSLK trong Figure 2 . Giả_sử bạn muốn xóa_một mắt_xích có trường dữ_liệu có_giá trị ra khỏi danh_sách , bạn có_thể làm như_sau (xem minh_họa trong Figure 4) : Các bước xóa mắt_xích có_giá trị ra khỏi danh_sách .\nCode : Đoạn code trên chỉ minh_họa ý_tưởng , và nó là đoạn code có bug , nghĩa_là nó chỉ thành_công trong một_số trường_hợp .\nĐiều gì sẽ xảy_ra nếu ta chạy đoạn code trên trong trường_hợp mắt_xích đầu_tiên có_giá trị datum ?\nKhi đó đoạn code trong_vòng while sẽ không thực_hiện , và kết_quả là prev vẫn là sau vòng_lặp while .\nĐến đây bạn có_thể gặp lỗi Segmentation fault .\nBạn có_thể sửa_đổi code trên như_sau : Đoạn code này ok , có_thể không có_lỗi , nhưng trông không được \"sạch sẽ\" và chậm vì có if-then .\nCách tốt hơn , không có if-then , đó là thao_tác trên .\nPhương_pháp này minh_họa cách sử_dụng con_trỏ rất thông_minh .\nHiểu đoạn code này có_thể khó nhưng một_khi đã hiểu thì bạn sẽ thấy cái hay của nó . Nhắc_lại , toán_tử là toán_tử lấy địa_chỉ của một biến , còn toán_tử là toán_tử lấy giá_trị của biến có địa_chỉ lưu trong con_trỏ .\nNhìn vào đoạn code trên , sự khác_biệt so_với đoạn code good_but_not_clean_remove là chúng_ta thao_tác trên của con_trỏ , thay_vì thao_tác trên con_trỏ .\nĐoạn code trên được sửa_đổi từ . Đôi_khi trong một_số trường_hợp , ta muốn xóa_một nút khỏi danh_sách khi mà ta biết trước địa_chỉ của nút đó .\nCụ_thể , ta muốn đoạn code tương_tự như_sau : Nếu chỉ đơn_giản gán current_node = thì đoạn code trên sẽ không thực_hiện đúng như mong_muốn (bạn đọc nên thử và giải_thích tại sao) .\nCó hai cách để làm .\nCách làm không_mấy sạch_sẽ là copy dữ_liệu từ nút mắt_xích sau_đó vào nút hiện_tại và ta xóa nút sau_đó . Tuy_nhiên , cách này không áp_dụng được nếu current_node là mắt_xích cuối_cùng của DSLK (bạn đọc có_thể thử để kiểm tra) .\nCách tốt hơn , lấy ý_tưởng hàm remove ở trên sử_dụng địa_chỉ của con_trỏ , ta sẽ truyên vào hàm địa_chỉ của current_node .\nCách này áp_dụng được ngay_cả khi current_node là mắt_xích cuối_cùng của DSLK . Biến_thể đầu_tiên là DSLK đôi (doubly linked list) , trong đó , mỗi mắt_xích có 2 con_trỏ .\nCon_trỏ đầu_tiên trỏ vào mắt_xích trước nó trong DSLK và con_trỏ thứ_hai trỏ vào mắt_xích sau_đó trong DSLK .\nMột_DSLK đôi với 4 mắt_xích . DSLK đôi so_với DSLK_đơn cần nhiều bộ_nhớ hơn để lưu_trữ thêm một con_trỏ .\nCác thao_tác xóa và thêm mới cũng lâu hơn vì ta còn phải cập_nhật cả con_trỏ prev mỗi khi ta cần xóa hoặc thêm vào DSLK .\nVề điểm mạnh , DSLK đôi mềm_dẻo hơn vì từ một nút , ta có_thể đi đến nút trước nó mà không_phải duyệt từ_đầu DSLK .\nTính mềm_dẻo này được Knuth 2 khai_thác triệt_để trong thiết_kế cấu_trúc Dancing_Links , một cấu_trúc dữ_liệu hỗ_trợ các thuật_toán quay lui cho bài_toán liệt_kê tổ_hợp .\nNgoài_ra , ta có_thể không cần con_trỏ head để xác_định nút đầu_tiên của danh_sách như DSLK_đơn (tại sao ? ) .\nNếu con_trỏ head bị mất , ta vẫn có_thể tìm được phần_tử đầu_tiên của DSLK nếu ta được phép truy_nhập đến một phần_tử bất_kì của DSLK .\nDSLK đôi cũng chính là cấu_trúc đằng_sau của Java . Danh_sách liên_kết vòng (circularly linked list) là một biến_thể khác của DSLK_đơn , trong đó con_trỏ next của mắt_xích cuối_cùng của danh_sách trỏ vào mắt_xích đầu_tiên của danh_sách để tạo_thành một vòng_tròn (xem Figure 6) .\nVới cấu_trúc này , khái_niệm đầu và cuối không thực_sự có_ý nghĩa .\nDo_đó , ta thường chỉ lưu một con_trỏ đặc_biệt để trỏ vào một nút nào_đó trong danh_sách .\nMột_DSLK vòng với 5 mắt_xích . Danh_sách liên_kết vòng thường được dùng trong các ứng_dụng trong đó các thành_phần tham_gia được thực_thi theo lượt .\nVí_dụ trong các game đánh_bài khi mỗi người chơi được phép đi một_lượt theo vòng .\nMột bài_tập hay ứng_dụng danh_sách liên_kết vòng là .\nPhần này sẽ liên_tục được cập_nhật .\nBạn nào có_tài liệu hay về con_trỏ cũng_như quản_lí bộ_nhớ thì comment xuống dưới để mình liên_kết tới bạn_đọc . Tutorial về con_trỏ và ý_nghĩa của con_trỏ : .\nMalloc làm_việc như_thế nào : Con_trỏ hàm : 1 T . H_Cormen , C . E . Leiserson , R .\nRivest , C .\nStein .\n, Chapter 10 .\nMIT_Press and McGraw-Hill (2001) .\nISBN 0-262-03293-7 .\n2 D . E . Knuth , Donald_E .\narXiv preprint cs/0011047 (2000) .\n, , , , , Trackback link : on admin cho mình hỏi nếu ta Insert ở 1 vị_trí bất_kỳ nhưng không_phải là ở đầu hay ở cuối thì sao ?\nví_dụ : thêm giá_trị 5 vào vị_trí 4 trong danh_sách kiểu con_trỏ L ( hiện_tại danh_sách L có 9 phần tử) .\non Hi bạn , Ví_dụ bạn thêm vào vị_trí thứ 2 thì bạn sẽ dùng một biến đếm i để xem bạn đã duyệt qua bao_nhiêu mắt_xích , rồi đến khi_nào i = 3 thì bạn thêm vào sau nút hiện_tại của con_trỏ duyệt .\non Link malloc die rồi anh ơi on Ý bạn là link nào ?\nMình thấy các link mình đưa vẫn hoạt_động mà .\non Ý em là link Malloc làm_việc như_thế nào anh ạ , hôm_qua em không truy_cập được còn bây_giờ lại được rồi ạPowered by and\n", "tagged": "Nơi/N tổng_hợp/V và/Cc chia_sẻ/V những/L kiến_thức/N liên_quan/V tới/E giải_thuật/Np nói_chung/X và/Cc lý_thuyết/Np khoa_học/N máy_tính/N nói_riêng/X ./CH\nin/V Danh_sách/N liên_kết/V (DSLK)/Np đơn/N (Singly/Np linked/Np list)/Np là/V một/M cấu_trúc/N dữ_liệu/N cơ_bản/A và/Cc có/V cực_kì/R nhiều/A ứng_dụng/V ./CH\nÝ_tưởng/N của/E DSLK_đơn/Np khá/R đơn_giản/A ./CH\nTuy_nhiên/C ,/CH để/E cài_đặt/V cấu_trúc/N DSLK_đơn/Np một_cách/N ngắn_gọn/A ,/CH hiệu_quả/N thì/C không_phải/Np là/V điều/N hiển_nhiên/Np ./CH\nTrong/E bài/N này/P ,/CH chúng_ta/P sẽ/R thảo_luận/V các/L cách/N cài_đặt/V danh_sách/N liên_kết/V (trong/Np C)/Np sao_cho/Np và/Cc ./CH\nCài_đặt/V DSLK/Np trong/E C/Ni không_thể/R tránh/V khỏi/V sử_dụng/V con_trỏ/Np (pointer)/Np và/Cc struct/Np ./CH\nCon_trỏ/Np là/V một/M kiểu/N dữ_liệu/N cực_kì/R mạnh_của/Np ngôn_ngữ/N C/Ni ./CH\nNó/P cho_phép/V người/N lập_trình/V thao_tác/V bộ_nhớ/Np rất/R hiệu_quả/N ./CH\nNhững/L lập_trình_viên/Np giỏi/A luôn/R là/V những/L lập_trình_viên/Np biết/V thao_tác/V con_trỏ/Np một_cách/N thuần_thục/A ./CH\nTuy_nhiên/C ,/CH điểm/N yếu/A của/E con_trỏ/Np là/V khó/A học/V ,/CH khó/A nắm_bắt/Np và/Cc cũng/R khó/A debug/Np các/L chương_trình/N có_con/Np trỏ/Np ,/CH nhất_là/X đối_với/E những/L người/N lần/N đầu/N tiếp_xúc/V với/E khái_niệm/N con_trỏ/Np ./CH\nTrong/E bài/N này/P ,/CH mình/P cũng/R không/R có/V gắng/V giải_thích/V ý_nghĩa/N ,/CH mặc_dù/C có/V nhắc_lại/Np ,/CH con_trỏ/Np ./CH\nMình/P khuyến_khích/V các/L bạn/N tự/P tìm_hiểu/V ,/CH vì/E có/V rất/R nhiều/A nguồn/N ,/CH kể_cả/X tiếng/N Anh/N và/Cc tiếng/N Việt/Np ./CH\nPhần/N cuối/N bài/N mình/P sẽ/R liên_kết/V một_số/L bài/N viết/V hay/Cc về/E con_trỏ/Np ./CH\nMục_tiêu/N của/E bài/N này/P là/V minh_họa/V tối_đa/A khả_năng/N kì_diệu/Np của/E con_trỏ/Np trong/E thao/Np danh_sách/N liên_kết/V ./CH\nCác/L bài/N khác/A trong/E blog/Np mình/P thường/R minh_họa/V bằng/E giả/A mã/N ./CH\nTuy_nhiên/C ,/CH bài/N này/P mình/P sẽ/R trực_tiếp/A sử_dụng/V code/Np C/Ni ./CH Một/M con_trỏ/Np (pointer)/Np là/V một/M biến/V dùng/V để/E lưu_trữ/Np của/E một/M biến/V khác/A ./CH\nBiến/V khác/A ở/E đây/P có_thể/R là/V một/M biến/V thông_thường/A như/C biến_số/Np nguyên/A ,/CH biến_số/Np thực/A ,/CH hoặc/Cc có_thể/R là/V một/M mảng/N ,/CH một/M hàm/Np ,/CH và/Cc có_khi/R cũng/R chính/T là/V một/M con_trỏ/Np khác/A ./CH\nVì/E con_trỏ/Np là/V một/M biến/V nên/C nó/P cũng/R cần/V phải/V được/V lưu_trữ/Np ở/E đâu_đó/P trong/E bộ/N nhớ;/Np có_nghĩa/A là/V bản_thân/N biến/V con_trỏ/Np cũng/R có_một/Np địa_chỉ/N trong/E bộ_nhớ/Np ./CH\nDo_đó/C ,/CH ta/P có_thể/R dùng/V con_trỏ/Np đề/V lưu/V địa_chỉ/N của/E một/M con_trỏ/Np khác/A ./CH\nTính_chất/N này/P cũng/R chính/T là/V sự/N kì_diệu/Np của/E con_trỏ/Np mà/C mình/P sẽ/R minh_họa/V trong/E bài/N này/P ./CH Cú_pháp/Np khai_báo/V con_trỏ/Np trong/E C/Ni ,/CH nói/V một_cách/N đơn_giản/A (nhưng/Np không/R hoàn_toàn/A chính/T xác)/Np ,/CH gồm/V 3/M phần/N :/CH (i)/Np kiểu/N của/E biến/V khác/A mà/C con_trỏ/Np lưu_trữ/Np địa_chỉ/N ,/CH (2)/Np dấu/N và/Cc (3)/Np tên/N của/E con_trỏ/Np ./CH\nCon_trỏ/Np hàm/Np thì/C khai_báo/V hơi/R khác/A một_chút/L ,/CH nhưng/C đây/P không_phải/Np vấn_đề/N trọng_tâm/A của/E bài/N viết/V ./CH\nVí_dụ/C ,/CH khai_báo/V một_số/L con_trỏ/Np :/CH Khai_báo/V thì/C như_vậy/X ,/CH nhưng/C ý_nghĩa/N của/E con_trỏ/Np thì/C không_phải/Np lúc/N nào/P cũng/R nhất_quán/Np ./CH\nVí_dụ/C con_trỏ/Np vừa/R có_thể/R hiểu/V là/V con_trỏ/Np tới/E một/M biến_số/Np nguyên/A ,/CH vừa/R có_thể/R hiểu/V là/V con_trỏ/Np tới/E phần_tử/N đầu_tiên/A của/E một/M mảng/N số_nguyên/Np ./CH Struct/Np trong/E C/Ni cho_phép/V chúng_ta/P tập_hợp/N một/M hoặc/Cc một_vài/L kiểu/N dữ_liêu/Np khác_nhau/Np thành/V một/M kiểu/N dữ_liệu/N mới/R ./CH\nCác/L kiểu/N dữ_liệu/N thành_phần/N của/E một/M struct/Np có_thể/R là/V kiểu/N dữ_liệu/N sẵn_có/Np như/C số_nguyên/Np ,/CH số_thực/Np ,/CH con_trỏ/Np ,/CH hoặc/Cc một/M kiểu/N struct/Np đã/R định_nghĩa/N trước/E đó/P ./CH\nTóm_lại/Np ,/CH struct/Np cho_phép/V chúng_ta/P \"gộp\"/Np một_số/L kiểu/N dữ_liệu/N đã/R có/V lại/R với_nhau/Np để/E tiện/V thao_tác/V ./CH\nTrong_DSLK/Np ,/CH struct/Np được/V sử_dụng/V để/E khai_báo/V một/M \"mắt/Np xích\"/Np của/E danh_sách/N ./CH\nVí_dụ/C ta/P muốn/V khai_báo/V một/M mắt_xích/Np của/E một/M danh_sách/N liên_kết/V các/L biến/V kiểu/N int/Np thì/C ta/P có_thể/R khai_báo/V như_sau/Np :/CH Biến/V trong/E khai_báo/V trên/E là/V dữ_liệu/N của/E mỗi/L mắt_xích/Np và/Cc nó/P có/V kiểu/N int/Np ./CH\nKiểu/N của/E còn/R có_thể/R là/V con_trỏ/Np ,/CH hay/Cc một/M struct/Np ./CH\nMỗi/L mắt_xích/Np thường/R được/V minh_họa/V như/C trong/E Figure/Np 1/M ,/CH trong/E đó/P ,/CH mũi_tên/N ám_chỉ/V con_trỏ/Np lưu/V địa_chỉ/N của/E mắt_xích/Np tiếp_theo/V (con/Np trỏ/Np next)/Np ./CH\nCon_trỏ/Np này/P trong/E mắt_xích/Np cuối_cùng/A của/E danh_sách/N thường/R là/V ./CH\nBiểu_diễn/V một/M mắt_xích/Np của/E danh_sách/N liên_kết/V ./CH Để/E khởi/V tạo/V một/M mắt_xích/Np ,/CH ta/P sẽ/R dùng/V hàm_malloc/Np (viết/Np tắt/V của/E emory/Np ation)/Np ./CH\nMalloc/Np là/V một/M hàm/Np quản_lí/V bộ_nhớ/Np của/E C/Ni ./CH\nBản_thân/N hàm/Np này/P cũng/R khá/R phức_tạp/A ./CH\nBạn_đọc/N xem/V thêm/V tại/E liên_kết/V ở/E cuối/N bài/N ./CH Danh_sách/N liên_kết/V đơn/N ,/CH về_mặt/Np trực_quan/Np ,/CH là/V cấu_trúc/N dữ_liệu/N tuyến_tính/Np giống_như/Np một/M cái/Nc xích/V dài/A liên_kết/V các/L \"mắt/Np xích\"/Np với_nhau/Np ./CH\nMỗi/L mắt_xích/Np có/V dạng/N khai_báo/V llnode/Np ở/E trên/E ./CH\nFigure/Np 2/M minh_họa/V một/M danh_sách/N liên_kết/V với/E 5/M phần_tử/N ./CH\nMột/M danh_sách/N liên_kết/V với/E 5/M phần_tử/N ./CH Để/E theo_dõi/V danh_sách/N ,/CH ta/P sẽ/R dùng/V một/M con_trỏ/Np đặc_biệt/A ,/CH gọi_là/V con_trỏ/Np head/Np ./CH\nCon_trỏ/Np này/P lưu_trữ/Np của/E mắt_xích/Np đầu_tiên/A của/E danh_sách/N ./CH\nNhư/C đã/R nói/V ở/E trên/E ,/CH con_trỏ/Np của/E mắt_xích/Np cuối_cùng/A của/E danh_sách/N sẽ/R có_giá/Np trị/V ./CH\nTa/P có_thể/R duyệt/V qua/V danh_sách/N này/P bằng/E cách/N bắt_đầu_từ/Np phần_tử/N đầu_tiên/A ,/CH đi_theo/Np con_trỏ/Np liên_kết/V để/E đi_tới/Np nút/N tiếp_theo/V ./CH\nĐến/E khi/N ta/P gặp/V con_trỏ/Np thì/C ta/P đã/R duyệt/V xong/V danh_sách/N ./CH\nĐoạn/Nc code/Np dưới_đây/Np là/V thủ_tục/N walk_down/Np để/E duyệt/V danh_sách/N ./CH Trong/E đoạn/Nc code/Np trên/E ,/CH liệu/V ta/P có/V bị/V mất/V con_trỏ/Np head/Np ?/CH\nCâu/N trả_lời/V là/V không/R vì/E mỗi/L lần/N gọi/V một/M hàm/Np walk_down/Np như_trên/Np ,/CH một/M bản/Nc \"copy\"/Np của/E con_trỏ/Np head/Np sẽ/R được/V tạo/V ra/V ,/CH và/Cc hàm/Np walk_down/Np sẽ/R thay_đổi/V bản/Nc copy/Np này/P ./CH\nBản_gốc/N vẫn/R không/R thay_đổi/V ./CH\nNếu/C bạn/N thay_đổi/V con_trỏ/Np head/Np trong/E hàm/Np main/Np (hàm/Np mà/C bạn/N tạo/V ra/V con_trỏ/Np này)/Np hoặc/Cc con_trỏ/Np head/Np là/V một/M biến/V toàn_cục/Np ,/CH thì/C con_trỏ/Np head/Np sẽ/R bị/V thay_đổi/V ,/CH hay/Cc bị/V mất/V ./CH\nĐiều/N gì/P sẽ/R xảy_ra/Np nếu_như/C ta/P \"làm/Np mất\"/Np con_trỏ/Np head/Np ?/CH\nBạn/N sẽ/R mất/V dấu/N của/E danh_sách/N và/Cc do_đó/C ,/CH sẽ/R không_thể/R thao_tác/V được/V với/E danh_sách/N nữa/R ./CH\nPhần/N bộ_nhớ/Np của/E danh_sách/N lúc_này/Np sẽ/R vẫn/R bị/V chiếm/V bởi/E danh_sách/N ,/CH do_đó/C ,/CH tạo/V ra/V rác/N (garbage)/Np trong/E hệ_thống/N ./CH\nPhần/N rác/N này/P tồn_tại/V cho_đến/E khi/N chương_trình/N kết_thúc/V ./CH\nBài_học/N rút/V ra/V :/CH khi_nào/Np bạn/N không/R còn/R cần/V danh_sách/N nữa/R thì/C sử_dụng/V hàm/Np free/Np để/E giải_phóng/V bộ_nhớ/Np ,/CH đừng/R bao_giờ/P để_mất/Np dấu/N con_trỏ/Np head/Np vì/E nó/P sẽ/R tạo/V ra/V rác/N ./CH\nKhi/N thêm/V phần_tử/N mới/R vào/E danh_sách/N ,/CH nếu/C bài_toán/N không/R có/V yêu_cầu/V gì/P đặc_biệt/A ,/CH thì/C bạn/N nên/C của/E danh_sách/N ./CH\nNếu/C bạn/N thêm/V vào/E đuôi/N của/E danh_sách/N (theo/Np tư_duy/N thông/V thường)/Np ,/CH thì/C ngoài/E phải/V trả/V thêm/V bộ_nhớ/Np để/E lưu_trữ/Np con_trỏ/Np đuôi/N của/E danh_sách/N (nếu/Np không_lưu/Np con_trỏ/Np này/P thì/C sẽ/R phải/V duyệt/V rất/R tốn/V thời/N gian)/Np ,/CH bạn/N phải/V xét/V trường_hợp/N khi/N danh_sách/N rỗng/A (con/Np trỏ/Np đuôi/N là/V )/CH ,/CH i/M ./CH e/Ni ,/CH thêm/V if-then/Np trong/E code/Np ./CH\nĐiều/N này/P làm/V code/Np vừa/R chậm/A vừa/R \"tối/Np sủa\"/Np (xem/Np code/Np ví_dụ/C dưới/E đây)/Np ./CH Tóm_lại/Np ,/CH ./CH\nĐoạn/Nc code/Np sau/E minh_họa/V thao_tác/V chèn/V vào/E đầu/N ./CH\nRõ_ràng/A đoạn/Nc code/Np dưới_đây/Np đẹp/A hơn/A rất/R nhiều/A ./CH\nCác/L bước/V chèn/V một/M mắt_xích/Np có_giá/Np trị/V 6/M vào/E đầu/N DSLK/Np trong/E Figure/Np 2/M ./CH Giả_sử/Np bạn/N muốn/V xóa_một/Np mắt_xích/Np có/V trường/N dữ_liệu/N có_giá/Np trị/V ra/V khỏi/V danh_sách/N ,/CH bạn/N có_thể/R làm/V như_sau/Np (xem/Np minh_họa/V trong/E Figure/Np 4)/Np :/CH Các/L bước/V xóa/V mắt_xích/Np có_giá/Np trị/V ra/V khỏi/V danh_sách/N ./CH\nCode/Np :/CH Đoạn/Nc code/Np trên/E chỉ/R minh_họa/V ý_tưởng/N ,/CH và/Cc nó/P là/V đoạn/Nc code/Np có/V bug/Np ,/CH nghĩa_là/V nó/P chỉ/R thành_công/V trong/E một_số/L trường_hợp/N ./CH\nĐiều/N gì/P sẽ/R xảy_ra/Np nếu/C ta/P chạy/V đoạn/Nc code/Np trên/E trong/E trường_hợp/N mắt_xích/Np đầu_tiên/A có_giá/Np trị/V datum/Np ?/CH\nKhi/N đó/P đoạn/Nc code/Np trong_vòng/Np while/Np sẽ/R không/R thực_hiện/V ,/CH và/Cc kết_quả/N là/V prev/Np vẫn/R là/V sau/E vòng_lặp/Np while/Np ./CH\nĐến/E đây/P bạn/N có_thể/R gặp/V lỗi/N Segmentation/Np fault/Np ./CH\nBạn/N có_thể/R sửa_đổi/V code/Np trên/E như_sau/Np :/CH Đoạn/Nc code/Np này/P ok/Np ,/CH có_thể/R không/R có_lỗi/Np ,/CH nhưng/C trông/V không/R được/V \"sạch/Np sẽ\"/Np và/Cc chậm/A vì/E có/V if-then/Np ./CH\nCách/N tốt/A hơn/A ,/CH không/R có/V if-then/Np ,/CH đó/P là/V thao_tác/V trên/E ./CH\nPhương_pháp/N này/P minh_họa/V cách/N sử_dụng/V con_trỏ/Np rất/R thông_minh/A ./CH\nHiểu/V đoạn/Nc code/Np này/P có_thể/R khó/A nhưng/C một_khi/X đã/R hiểu/V thì/C bạn/N sẽ/R thấy/V cái/Nc hay/Cc của/E nó/P ./CH Nhắc_lại/Np ,/CH toán_tử/Np là/V toán_tử/Np lấy/V địa_chỉ/N của/E một/M biến/V ,/CH còn/R toán_tử/Np là/V toán_tử/Np lấy/V giá_trị/N của/E biến/V có/V địa_chỉ/N lưu/V trong/E con_trỏ/Np ./CH\nNhìn/V vào/E đoạn/Nc code/Np trên/E ,/CH sự/N khác_biệt/A so_với/Np đoạn/Nc code/Np good_but_not_clean_remove/Np là/V chúng_ta/P thao_tác/V trên/E của/E con_trỏ/Np ,/CH thay_vì/X thao_tác/V trên/E con_trỏ/Np ./CH\nĐoạn/Nc code/Np trên/E được/V sửa_đổi/V từ/E ./CH Đôi_khi/R trong/E một_số/L trường_hợp/N ,/CH ta/P muốn/V xóa_một/Np nút/N khỏi/V danh_sách/N khi/N mà/C ta/P biết/V trước/E địa_chỉ/N của/E nút/N đó/P ./CH\nCụ_thể/A ,/CH ta/P muốn/V đoạn/Nc code/Np tương_tự/A như_sau/Np :/CH Nếu/C chỉ/R đơn_giản/A gán/V current_node/Np =/CH thì/C đoạn/Nc code/Np trên/E sẽ/R không/R thực_hiện/V đúng/A như/C mong_muốn/V (bạn/Np đọc/V nên/C thử/V và/Cc giải_thích/V tại/E sao)/Np ./CH\nCó/V hai/M cách/N để/E làm/V ./CH\nCách/N làm/V không_mấy/Np sạch_sẽ/A là/V copy/Np dữ_liệu/N từ/E nút/N mắt_xích/Np sau_đó/Np vào/E nút/N hiện_tại/N và/Cc ta/P xóa/V nút/N sau_đó/Np ./CH Tuy_nhiên/C ,/CH cách/N này/P không/R áp_dụng/V được/V nếu/C current_node/Np là/V mắt_xích/Np cuối_cùng/A của/E DSLK/Np (bạn/Np đọc/V có_thể/R thử/V để/E kiểm/V tra)/Np ./CH\nCách/N tốt/A hơn/A ,/CH lấy/V ý_tưởng/N hàm/Np remove/Np ở/E trên/E sử_dụng/V địa_chỉ/N của/E con_trỏ/Np ,/CH ta/P sẽ/R truyên/Np vào/E hàm/Np địa_chỉ/N của/E current_node/Np ./CH\nCách/N này/P áp_dụng/V được/V ngay_cả/Np khi/N current_node/Np là/V mắt_xích/Np cuối_cùng/A của/E DSLK/Np ./CH Biến_thể/N đầu_tiên/A là/V DSLK/Np đôi/M (doubly/Np linked/Np list)/Np ,/CH trong/E đó/P ,/CH mỗi/L mắt_xích/Np có/V 2/M con_trỏ/Np ./CH\nCon_trỏ/Np đầu_tiên/A trỏ/Np vào/E mắt_xích/Np trước/E nó/P trong/E DSLK/Np và/Cc con_trỏ/Np thứ_hai/N trỏ/Np vào/E mắt_xích/Np sau_đó/Np trong/E DSLK/Np ./CH\nMột_DSLK/Np đôi/M với/E 4/M mắt_xích/Np ./CH DSLK/Np đôi/M so_với/Np DSLK_đơn/Np cần/V nhiều/A bộ_nhớ/Np hơn/A để/E lưu_trữ/Np thêm/V một/M con_trỏ/Np ./CH\nCác/L thao_tác/V xóa/V và/Cc thêm/V mới/R cũng/R lâu/A hơn/A vì/E ta/P còn/R phải/V cập_nhật/V cả/P con_trỏ/Np prev/Np mỗi/L khi/N ta/P cần/V xóa/V hoặc/Cc thêm/V vào/E DSLK/Np ./CH\nVề/E điểm/N mạnh/A ,/CH DSLK/Np đôi/M mềm_dẻo/Np hơn/A vì/E từ/E một/M nút/N ,/CH ta/P có_thể/R đi/V đến/E nút/N trước/E nó/P mà/C không_phải/Np duyệt/V từ_đầu/Np DSLK/Np ./CH\nTính/V mềm_dẻo/Np này/P được/V Knuth/Np 2/M khai_thác/V triệt_để/A trong/E thiết_kế/V cấu_trúc/N Dancing_Links/Np ,/CH một/M cấu_trúc/N dữ_liệu/N hỗ_trợ/V các/L thuật_toán/N quay/V lui/V cho/E bài_toán/N liệt_kê/V tổ_hợp/N ./CH\nNgoài_ra/X ,/CH ta/P có_thể/R không/R cần/V con_trỏ/Np head/Np để/E xác_định/V nút/N đầu_tiên/A của/E danh_sách/N như/C DSLK_đơn/Np (tại/Np sao/P ?/CH )/CH ./CH\nNếu/C con_trỏ/Np head/Np bị/V mất/V ,/CH ta/P vẫn/R có_thể/R tìm/V được/V phần_tử/N đầu_tiên/A của/E DSLK/Np nếu/C ta/P được/V phép/N truy_nhập/V đến/E một/M phần_tử/N bất_kì/R của/E DSLK/Np ./CH\nDSLK/Np đôi/M cũng/R chính/T là/V cấu_trúc/N đằng_sau/Np của/E Java/Np ./CH Danh_sách/N liên_kết/V vòng/N (circularly/Np linked/Np list)/Np là/V một/M biến_thể/N khác/A của/E DSLK_đơn/Np ,/CH trong/E đó/P con_trỏ/Np next/Np của/E mắt_xích/Np cuối_cùng/A của/E danh_sách/N trỏ/Np vào/E mắt_xích/Np đầu_tiên/A của/E danh_sách/N để/E tạo_thành/Np một/M vòng_tròn/N (xem/Np Figure/Np 6)/Np ./CH\nVới/E cấu_trúc/N này/P ,/CH khái_niệm/N đầu/N và/Cc cuối/N không/R thực_sự/A có_ý/Np nghĩa/N ./CH\nDo_đó/C ,/CH ta/P thường/R chỉ/R lưu/V một/M con_trỏ/Np đặc_biệt/A để/E trỏ/Np vào/E một/M nút/N nào_đó/P trong/E danh_sách/N ./CH\nMột_DSLK/Np vòng/N với/E 5/M mắt_xích/Np ./CH Danh_sách/N liên_kết/V vòng/N thường/R được/V dùng/V trong/E các/L ứng_dụng/V trong/E đó/P các/L thành_phần/N tham_gia/V được/V thực_thi/V theo/V lượt/N ./CH\nVí_dụ/C trong/E các/L game/N đánh_bài/Np khi/N mỗi/L người/N chơi/V được/V phép/N đi/V một_lượt/Np theo/V vòng/N ./CH\nMột/M bài_tập/Np hay/Cc ứng_dụng/V danh_sách/N liên_kết/V vòng/N là/V ./CH\nPhần/N này/P sẽ/R liên_tục/A được/V cập_nhật/V ./CH\nBạn/N nào/P có_tài/Np liệu/V hay/Cc về/E con_trỏ/Np cũng_như/C quản_lí/V bộ_nhớ/Np thì/C comment/Np xuống/V dưới/E để/E mình/P liên_kết/V tới/E bạn_đọc/N ./CH Tutorial/Np về/E con_trỏ/Np và/Cc ý_nghĩa/N của/E con_trỏ/Np :/CH ./CH\nMalloc/Np làm_việc/V như_thế/X nào/P :/CH Con_trỏ/Np hàm/Np :/CH 1/M T/Nu ./CH H_Cormen/Np ,/CH C/Ni ./CH E/Ni ./CH Leiserson/Np ,/CH R/Np ./CH\nRivest/Np ,/CH C/Ni ./CH\nStein/Np ./CH\n,/CH Chapter/Np 10/M ./CH\nMIT_Press/Np and/Np McGraw-Hill/Np (2001)/Np ./CH\nISBN/Np 0-262-03293-7/Np ./CH\n2/M D/Ny ./CH E/Ni ./CH Knuth/Np ,/CH Donald_E/Np ./CH\narXiv/Np preprint/Np cs/Np (2000)/Np ./CH\n,/CH ,/CH ,/CH ,/CH ,/CH Trackback/Np link/Np :/CH on/Np admin/Np cho/E mình/P hỏi/V nếu/C ta/P Insert/Np ở/E 1/M vị_trí/N bất_kỳ/A nhưng/C không_phải/Np là/V ở/E đầu/N hay/Cc ở/E cuối/N thì/C sao/P ?/CH\nví_dụ/C :/CH thêm/V giá_trị/N 5/M vào/E vị_trí/N 4/M trong/E danh_sách/N kiểu/N con_trỏ/Np L/Ny (/CH hiện_tại/N danh_sách/N L/Ny có/V 9/M phần/N tử)/Np ./CH\non/Np Hi/Np bạn/N ,/CH Ví_dụ/C bạn/N thêm/V vào/E vị_trí/N thứ/N 2/M thì/C bạn/N sẽ/R dùng/V một/M biến/V đếm/V i/M để/E xem/V bạn/N đã/R duyệt/V qua/V bao_nhiêu/P mắt_xích/Np ,/CH rồi/C đến/E khi_nào/Np i/M =/CH 3/M thì/C bạn/N thêm/V vào/E sau/E nút/N hiện_tại/N của/E con_trỏ/Np duyệt/V ./CH\non/Np Link/Np malloc/Np die/Np rồi/C anh/N ơi/I on/Np Ý/N bạn/N là/V link/Np nào/P ?/CH\nMình/P thấy/V các/L link/Np mình/P đưa/V vẫn/R hoạt_động/N mà/C ./CH\non/Np Ý/N em/N là/V link/Np Malloc/Np làm_việc/V như_thế/X nào/P anh/N ạ/I ,/CH hôm_qua/N em/N không/R truy_cập/Np được/V còn/R bây_giờ/P lại/R được/V rồi/C ạPowered/Np by/Np and/Np\n", "title": "Danh sách liên kết đơn và các biến thể -- Singly linked list and its variants\n", "link": "http://www.giaithuatlaptrinh.com/?p=1326\n"}