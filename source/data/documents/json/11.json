{"content": "Bài viết sưu_tầm trên mạng .\n0 .\nKiểu chuỗi của C và hạn_chế Khi mới học C , chắc các bạn đều rất bối_rối khi làm_việc với xâu ký_tự , việc sử_dụng con_trỏ lưu_xâu ký_tự rất phức_tạp , dễ gây lỗi khiến nhiều người cho_rằng nó không_bằng xâu ký_tự trong Pascal .\nCác chương_trình C++ có_thể sử_dụng chuỗi theo cách_thức cũ của Ngôn_ngữ C (trong bài viết này gọi_là C-String) : mảng các ký_tự kết_thúc bởi ký_tự mã ASCII là 0 (ký tự \\0 ) cùng_với các hàm thư_viện khai_báo trong lt;string . hgt; .\nCó nhiều bất_tiện khi dùng theo cách_thức này : Người lập_trình phải chủ_động kiểm_soát bộ_nhớ cấp_phát cho chuỗi ký_tự .\nNói_chung là phải am_hiểu và rất thông_thạo về kỹ_thuật dùng bộ_nhớ và con_trỏ thì chương_trình mới tránh được các lỗi về kỹ thuật; Không_thể gán giá_trị hay sử_dụng phép_toán + (ghép chuỗi) và các phép_toán so_sánh như : gt; (lớn hơn) , lt; (nhỏ hơn) , . . .\nmà phải gọi các hàm thư_viện trong lt;string . hgt; ; Nếu dùng kỹ_thuật cấp_phát_động thì_phải quản_lý việc cấp thêm bộ_nhớ khi chuỗi dãn ra (chẳng hạn do ghép chuỗi) và phải hủy bộ_nhớ (khi không dùng nữa) để tránh việc cạn_kiệt bộ_nhớ của máy_tính trong trường_hợp có nhiều chương_trình hoạt_động đồng_thời .\n1 .\nKiểu chuỗi string trong thư_viện STL của C++ Thư_viện chuẩn STL (Standard Template_Library) cung_cấp kiểu string (xâu ký tự) , giúp các bạn tránh khỏi hoàn_toàn các phiền_phức nêu trên . Các chỉ_thị include cần khai_báo để sử_dụng string : include lt;stringgt; using std : : string ; // using namespace std ; Nếu bạn muốn tận_dụng các hàm của C-String , cần chuyển_đổi giữa 2 kiểu dữ_liệu này : Chuyển từ string sang C-String : string s ; s .\nc_str (); Chuyển từ C-String sang string : char s_old = \"ABC\" ; string s ( s_old ); 2 .\nCác phương_thức , phép_toán tiện_ích của kiểu string Kiểu string của STL hỗ_trợ các nhóm phương_thức và phép_toán tiện_ích sau_đây .\na) Các phép_toán và phương_thức cơ_bản Các toán_tử + , += dùng để ghép hai chuỗi và cũng để ghép một ký_tự vào chuỗi; Các phép so_sánh theo thứ_tự từ_điển : == (bằng nhau) , ! = (khác nhau) , gt; (lớn hơn) , gt;= (lớn hơn hay bằng) , lt; (nhỏ hơn) , lt;= (nhỏ hơn hay bằng); Hàm length() và phép lấy chỉ_số để duyệt từng ký_tự của chuỗi : nếu s là biến kiểu string thì si là ký_tự thứ i của s với 0 \\le i lt; s . length(); Phép gán = dùng để gán biến kiểu string bằng một chuỗi , hoặc bằng string khác , chẳng_hạn : string s=\"ABCDEF\" ; hay s1=s2 ; mà không cần copy xâu .\nNhững constructor thường sử_dụng nhất : string (); string ( const char str ); // char là kiểu dữ_liệu xâu của C string ( const string amp; str ); Có_thể dùng toán_tử lt;lt; với cout để xuất một chuỗi ra màn_hình hoặc dùng toán_tử gt;gt; với cin để nhập một chuỗi ký_tự đến khi gặp một khoảng_trống thì dừng .\nchar st = \"ABCDEF\" ; string s ; s = \"XYZ\" ; cout lt;lt; s lt;lt; endl ; s = st ; cout lt;lt; s .\nlength () lt;lt; \" : \" lt;lt; s lt;lt; endl ; Một vấn_đề thường nảy_sinh trong các ứng_dụng có sử_dụng C-string : một C-String chưa khởi tạo cần được gán NULL .\nTuy_nhiên , rất nhiều hàm thư_viện của C-String sẽ gặp sự_cố trong thời_gian chạy khi gặp đối_tượng C-String là NULL .\nChẳng_hạn , lệnh char x = NULL ; cout lt;lt; strlen ( x ); được một_số trình biên_dịch chấp_nhận , nhưng với nhiều hiện_thực khác của thư_viện C-String , thì gặp lỗi trong thời_gian chạy .\nstring không gặp vấn_đề này , ta hoàn_toàn có_thể cho 1 xâu là rỗng mà không gặp bất_cứ lỗi nào : string s=\"\"; String thực_chất là một vectorlt;chargt; có bổ_sung thêm một_số hàm và thuộc_tính , do_đó , nó có toàn_bộ các tính_chất của 1 vector , như hàm size() , push_back() , toán_tử , . . .\nCác hàm từ vector : v . size() : Số_lượng phần_tử v . empty() : Trả về 1 nếu chuỗi rỗng , 0 nếu ngược_lại .\nv . max_size() : Trả về số_lượng phần_tử tối_đa đã được cấp_phát v1 == v2 : Trả về 1 nếu hai chuỗi giống nhau v1 ! = v2 : Trả về 1 nếu hai chuỗi khác_nhau v . begin() : Trả về iterator đầu_tiên của chuỗi v . end() : Trả về iterator cuối_cùng của chuỗi (trỏ vào sau kí_tự cuối cùng) v . front() : Trả về_phần tử đầu_tiên của chuỗi v . back() : Trả về_phần tử cuối_cùng của chuỗi v1 . swap(v2) : Hoán_đổi 2 chuỗi với_nhau (giống việc hoán_đổi giá_trị của 2 biến) include lt;iostreamgt; include lt;conio . hgt; include lt;stringgt; using namespace std ; int main () string s = \"Hello string\" ; // Khai_báo biến kiểu string cout lt;lt; \"Noi dung string : \" lt;lt; s lt;lt; endl ; // In nôi dung string ra màn_hình cout lt;lt; \"Chieu dai cua string : \" lt;lt; s .\nsize () lt;lt; endl ; // Chiều_dài cout lt;lt; \"Ky tu 0 : \" lt;lt; s 0 lt;lt; endl ; // In ký_tự đầu_tiên của xâu cout lt;lt; \"Ky tu 1 : \" lt;lt; s 1 lt;lt; endl ; // In ký_tự thứ 2 cout lt;lt; \"Ky tu 2 : \" lt;lt; s 2 lt;lt; endl ; // In ký_tự thứ 3 getchar (); return 0 ; Nhập một string trên 1 dòng (chú ý cin sẽ chỉ đọc đến dấu cách hoặc xuống_dòng đầu tiên) : istreamamp; getline ( istreamamp; in , stringamp; str , char delimiter = ‘\\n’); Đọc 1 dòng văn_bản từ istream in (có thể là file hay đối_tượng chuẩn cin) từng ký_tự đến khi ký_tự delimiter được nhập vào (mặc định là \\n ) // getline with strings include lt;iostreamgt; include lt;stringgt; using namespace std ; int main () string str ; short age ; cout lt;lt; \"Please enter full name and age\" lt;lt; endl ; getline ( cin , str ) gt;gt; age ; cout lt;lt; \"Thank you \" lt;lt; str lt;lt; \" ! \\n \" ; return 0 ; b) Các phương_thức chèn , xóa , lấy chuỗi con : Phương_thức substr(int pos , int nchar) trích ra chuỗi con của một chuỗi cho trước , ví_dụ str . substr(2 , 4) trả về chuỗi con gồm 4 ký_tự của chuỗi str kể_từ ký_tự ở vị_trí thứ 2 (ký tự đầu_tiên của chuỗi ở vị_trí 0) .\n//get substring include lt;iostreamgt; include lt;stringgt; include lt;conio . hgt; using namespace std ; int main () string s = \"ConCho chay qua rao\" ; cout lt;lt; s .\nsubstr ( 2 , 4 ) lt;lt; endl ; // cout lt;lt; new string(str . begin()+2 , str . begin()+2+4); getchar (); return 0 ; Phương_thức insert() chèn thêm ký_tự hay chuỗi vào một vị_trí nào_đó của chuỗi str cho trước .\nCó nhiều cách dùng phương_thức này : str . insert(int pos , char s) ; chèn s (mảng ký_tự kết_thúc \\0 ) vào vị_trí pos của str ; str . insert(int pos , string s) ; chèn chuỗi s (kiểu string ) vào vị_trí pos của chuỗi str ; str . insert(int pos , int n , int ch) ; chèn n lần ký_tự ch vào vị_trí pos của chuỗi str ; // inserting into a string include lt;iostreamgt; include lt;stringgt; include lt;conio . hgt; using namespace std ; int main () string str = \"day la . .\nxau thu\" ; string istr = \"them\" ; str .\ninsert ( 8 , istr ); cout lt;lt; str lt;lt; endl ; getchar (); return 0 ; Phương_thức str . erase(int pos , int n) xóa n ký_tự của chuỗi str kể_từ vị_trí pos ; nếu_không quy_định giá_trị_n thì tất_cả các ký_tự của str từ_vị trí pos trở_đi sẽ bị xóa // erase from a string include lt;iostreamgt; include lt;stringgt; include lt;conio . hgt; using namespace std ; int main () string str = \"day cung la xau thu\" ; str .\nerase ( 0 , 3 ); // \" cung la xau thu\" cout lt;lt; str lt;lt; endl ; str .\nerase ( 6 , 2 ); cout lt;lt; str lt;lt; endl ; // \" cung xau thu\" getchar (); return 0 ; c) So_sánh Bạn có_thể đơn_giản là sử_dụng những toán_tử quan_hệ ( == , ! = , lt; , lt;= , gt;= ) được định_nghĩa sẵn .\nTuy_nhiên , nếu muốn so_sánh một phần của một chuỗi thì sẽ cần sử_dụng phương_thức compare() : int compare ( const string amp; str ) const ; int compare ( const char s ) const ; int compare ( size_t pos1 , size_t n1 , const string amp; str ) const ; int compare ( size_t pos1 , size_t n1 , const char s ) const ; int compare ( size_t pos1 , size_t n1 , const string amp; str , size_t pos2 , size_t n2 ) const ; int compare ( size_t pos1 , size_t n1 , const char s , size_t n2 ) const ; Hàm trả về 0 khi hai chuỗi bằng_nhau và lớn hơn hoặc nhỏ hơn 0 cho trường_hợp khác Ví_dụ : // comparing apples with apples include lt;iostreamgt; include lt;stringgt; using namespace std ; int main () string str1 ( \"green apple\" ); string str2 ( \"red apple\" ); if ( str1 .\ncompare ( str2 ) ! = 0 ) cout lt;lt; str1 lt;lt; \" is not \" lt;lt; str2 lt;lt; \" \\n \" ; if ( str1 .\ncompare ( 6 , 5 , \"apple\" ) == 0 ) cout lt;lt; \"still , \" lt;lt; str1 lt;lt; \" is an apple \\n \" ; if ( str2 .\ncompare ( str2 .\nsize () - 5 , 5 , \"apple\" ) == 0 ) cout lt;lt; \"and \" lt;lt; str2 lt;lt; \" is also an apple \\n \" ; if ( str1 .\ncompare ( 6 , 5 , str2 , 4 , 5 ) == 0 ) cout lt;lt; \"therefore , both are apples \\n \" ; return 0 ; d) Các phương_thức tìm_kiếm và thay_thế Phương_thức find() tìm_kiếm xem một ký_tự hay một chuỗi nào_đó có xuất_hiện trong một chuỗi str cho trước hay_không .\nCó nhiều cách dùng phương_thức này : str .\nfind ( int ch , int pos = 0 ); t ì m k ý t ự ch k ể t ừ v ị tr í pos đế n cu ố i chu ỗ i str str .\nfind ( char s , int pos = 0 ); t ì m s ( m ả ng k ý t ự k ế t th ú c ‘\\ 0 ’ ) k ể t ừ v ị tr í pos đế n cu ố i str .\nfind ( string amp; s , int pos = 0 ); t ì m chu ỗ i s k ể t ừ v ị tr í pos đế n cu ố i chu ỗ i .\nNếu_không quy_định giá_trị pos thì hiểu mặc_nhiên là 0; nếu tìm có thì phương_thức trả về vị_trí xuất_hiện đầu_tiên , ngược_lại trả về giá_trị -1 .\n//find substring include lt;iostreamgt; include lt;stringgt; include lt;conio . hgt; using namespace std ; int main () string str = \"ConCho chay qua rao\" ; cout lt;lt; str .\nfind ( \"chay\" ) lt;lt; endl ; // 7 cout lt;lt; ( int ) str .\nfind ( \"Chay\" ) lt;lt; endl ; // -1 getchar (); return 0 ; Hàm tìm_kiếm ngược ( rfind ) //find from back include lt;iostreamgt; include lt;stringgt; include lt;conio . hgt; using namespace std ; int main () string str = \"ConCho chay qua chay qua rao\" ; cout lt;lt; str .\nfind ( \"chay\" ) lt;lt; endl ; // 7 cout lt;lt; ( int ) str .\nrfind ( \"chay\" ) lt;lt; endl ; // 16 getchar (); return 0 ; Phương_thức replace() thay_thế một đoạn con trong chuỗi str cho trước (đoạn con kể_từ một vị_trí pos và đếm tới nchar ký_tự ký_tự về phía cuối chuỗi) bởi một chuỗi s nào_đó , hoặc bởi n ký_tự ch nào_đó .\nCó nhiều cách dùng , thứ_tự tham_số như_sau : str .\nreplace ( int pos , int nchar , char s ); str .\nreplace ( int pos , int nchar , string s ); str .\nreplace ( int pos , int nchar , int n , int ch ); string str = \"con cho la con cho con .\nCon meo ko phai la con cho\" ; str .\nreplace ( 4 , 3 , \"CHO\" ); // \"con CHO la con cho con .\nCon meo ko phai la con cho\"; cout lt;lt; str lt;lt; endl ; getchar (); e) Tách xâu Trong việc xử_lý xâu ký_tự , không_thể thiếu được các thao_tác tách xâu ký_tự thành nhiều xâu ký_tự con thông_qua các ký_tự ngăn_cách .\nCác hàm này có_sẵn trong các ngôn_ngữ khác như Visual_Basic , Java , hay thậm_chí là trong lt;string . hgt; .\nVới_STL , các bạn có_thể dễ_dàng làm điều này với stringstream : string S = \"Xin chao tat ca cac ban\" ; // Khởi tạo giá_trị của xâu stringstream ss ( S ); // Khởi tạo stringstream từ xâu S while ( ss gt;gt; token ) // Đọc lần_lượt các phần của xâu .\nCác phần tách nhau bởi dấu cách hoặc xuống_dòng .\ncout lt;lt; token lt;lt; endl ; Output : Xin chao tat ca cac ban Chú_ý rằng , cách này cũng có_thể dễ áp_dụng nếu bạn muốn chuyển số_thành xâu (hoặc ngược lại) , tách 1 xâu thành nhiều số .\nNếu_không muốn sử_dụng stringstream , các bạn cũng có_thể tự xây_dựng hàm tách xâu như_sau : string S = \"Xin chao tat ca cac ban\" ; // Khởi tạo giá_trị của xâu string : : iterator t , t2 ; // Các biến_lặp vector lt; string gt; split ; // Mảng các xâu (lưu kết_quả tách) for ( t = S .\nbegin (); t lt; S .\nend ();) // Lặp từ_vị trí bắt_đầu t2 = find ( t , S .\nend () , ); // TÌm ký_tự space đầu_tiên // kể_từ vị_trí t if ( t ! = t2 ) split .\npush_back ( string ( t , t2 )); // Lấy xâu ký_tự giữa 2 vị_trí t = t2 + 1 ; // Chuyển sang vị_trí sau for ( int i = 0 ; i lt; split ì size (); i ++ ) cout lt;lt; split i lt;lt; endl ; // In mảng các xâu ký_tự getchar (); Output : Xin chao tat ca cac ban Đoạn chương tr . nh sử_dụng các kỹ_thuật sau Phương_thức find(vị_trí_đầu , vị_trí_cuối , ký_tự_tìm) dùng để tìm vị_trí_đầu tiên của ký_tự_tìm bắt_đầu_từ vị_trí_đầu .\nHàm này trả về vị_trí của ký_tự_tìm được (nếu tìm thấy) hoặc vị_trí_cuối (nếu không tìm thấy) string có_thể khởi tạo từ một đoạn ký_tự con của một xâu ký_tự khác với cú_pháp string(vị_trí_đầu , vị_trí_cuối) Đoạn chương_trình thực_hiện tách các xâu ký_tự kể_cả trong trường_hợp có nhiều ký_tự space nằm liên_tiếp nhau .\nMột_cách đơn_giản hơn_là bạn có_thể gọi hàm strtok() trong string . h để làm_việc này , nhưng không may là hàm này thao_tác trên char chứ không_phải string .\nHàm thành_viên c_str() sẽ giúp bạn chuyển từ string thành dạng const charT c_str () const ; Hàm này cũng tự_động sinh_ra ký_tự null chèn vào cuối xâu .\nTừ prototype ta cũng thấy được hàm trả về một hằng chuỗi , điều này đồng_nghĩa với việc_ta không_thể thay_đổi chuỗi trả về .\nGọi phương_thức c_str(); string s = \"some_string\" ; cout lt;lt; s .\nc_str () lt;lt; endl ; cout lt;lt; strlen ( s .\nc_str ()) lt;lt; endl ; Sau_đây là ví_dụ bên_trên được viết lại dùng hàm thành_viên c_str() và các hàm trong lt;string . hgt; // strings vs c-strings include lt;iostreamgt; include lt;string . hgt; include lt;stringgt; using std : : string ; int main () char cstr ; char p ; string str ( \"Xin chao tat ca cac ban\" ); cstr = new char str .\nsize () + 1 ; strcpy ( cstr , str .\nc_str ()); // cstr là 1 bản_sao c-string của str p = strtok ( cstr , \" \" ); while ( p ! = NULL ) cout lt;lt; p lt;lt; endl ; p = strtok ( NULL , \" \" ); delete cstr ; return 0 ; Output : Xin chao tat ca cac ban f) Chuyển_đổi hàng_loạt với transform OutputIterator transform ( InputIterator first , InputIterator last , OutputIterator result , UnaryOperation unary_op ); include lt;cctypegt; // for toupper include lt;stringgt; include lt;algorithmgt; //for transform using namespace std ; char alphabet ( char c ) static char ch = a ; return ch ++ ; int main () string s ( \"this is a lower case string\" ); transform ( s .\nbegin () , s .\nend () , s .\nbegin () , toupper ); cout lt;lt; s lt;lt; endl ; transform ( s .\nbegin () , s .\nend () , s .\nbegin () , alphabet ); cout lt;lt; s ; return 0 ; g) Một_số phương_thức khác Còn nhiều phương_thức tiện_ích khác như : append() , rfind() , find_first_not_of() , find_last_not_of() , swap() .\nCách dùng các hàm này đều được trình_bày trong hệ_thống hướng_dẫn (help) của các môi_trường có hỗ_trợ STL (trong VC++ là MSDN) .\nNgoài_ra các phương_thức như find_first_of() tương_tự như find() , find_last_of() tương_tự như rfind()\n", "tagged": "Bài/N viết/V sưu_tầm/V trên/E mạng/N ./CH\n0/M ./CH\nKiểu/N chuỗi/N của/E C/Ni và/Cc hạn_chế/V Khi/N mới/R học/V C/Ni ,/CH chắc/V các/L bạn/N đều/R rất/R bối_rối/A khi/N làm_việc/V với/E xâu/Np ký_tự/Np ,/CH việc/N sử_dụng/V con_trỏ/Np lưu_xâu/Np ký_tự/Np rất/R phức_tạp/A ,/CH dễ/A gây/V lỗi/N khiến/V nhiều/A người/N cho_rằng/Np nó/P không_bằng/Np xâu/Np ký_tự/Np trong/E Pascal/Np ./CH\nCác/L chương_trình/N C++/Np có_thể/R sử_dụng/V chuỗi/N theo/V cách_thức/N cũ/A của/E Ngôn_ngữ/N C/Ni (trong/Np bài/N viết/V này/P gọi_là/V C-String)/Np :/CH mảng/N các/L ký_tự/Np kết_thúc/V bởi/E ký_tự/Np mã/N ASCII/Np là/V 0/M (ký/Np tự/P \\0/Np )/CH cùng_với/C các/L hàm/Np thư_viện/N khai_báo/V trong/E lt;string/Np ./CH hgt;/Np ./CH\nCó/V nhiều/A bất_tiện/Np khi/N dùng/V theo/V cách_thức/N này/P :/CH Người/N lập_trình/V phải/V chủ_động/A kiểm_soát/V bộ_nhớ/Np cấp_phát/V cho/E chuỗi/N ký_tự/Np ./CH\nNói_chung/X là/V phải/V am_hiểu/V và/Cc rất/R thông_thạo/Np về/E kỹ_thuật/N dùng/V bộ_nhớ/Np và/Cc con_trỏ/Np thì/C chương_trình/N mới/R tránh/V được/V các/L lỗi/N về/E kỹ/A thuật;/Np Không_thể/R gán/V giá_trị/N hay/Cc sử_dụng/V phép_toán/Np +/CH (ghép/Np chuỗi)/Np và/Cc các/L phép_toán/Np so_sánh/V như/C :/CH gt;/Np (lớn/Np hơn)/Np ,/CH lt;/Np (nhỏ/Np hơn)/Np ,/CH ./CH ./CH ./CH\nmà/C phải/V gọi/V các/L hàm/Np thư_viện/N trong/E lt;string/Np ./CH hgt;/Np ;/CH Nếu/C dùng/V kỹ_thuật/N cấp_phát_động/Np thì_phải/N quản_lý/V việc/N cấp/V thêm/V bộ_nhớ/Np khi/N chuỗi/N dãn/Np ra/V (chẳng/Np hạn/N do/E ghép/V chuỗi)/Np và/Cc phải/V hủy/V bộ_nhớ/Np (khi/Np không/R dùng/V nữa)/Np để/E tránh/V việc/N cạn_kiệt/V bộ_nhớ/Np của/E máy_tính/N trong/E trường_hợp/N có/V nhiều/A chương_trình/N hoạt_động/N đồng_thời/R ./CH\n1/M ./CH\nKiểu/N chuỗi/N string/Np trong/E thư_viện/N STL/Np của/E C++/Np Thư_viện/N chuẩn/N STL/Np (Standard/Np Template_Library)/Np cung_cấp/V kiểu/N string/Np (xâu/Np ký/V tự)/Np ,/CH giúp/V các/L bạn/N tránh/V khỏi/V hoàn_toàn/A các/L phiền_phức/A nêu/V trên/E ./CH Các/L chỉ_thị/N include/Np cần/V khai_báo/V để/E sử_dụng/V string/Np :/CH include/Np lt;stringgt;/Np using/Np std/Np :/CH :/CH string/Np ;/CH //CH using/Np namespace/Np std/Np ;/CH Nếu/C bạn/N muốn/V tận_dụng/V các/L hàm/Np của/E C-String/Np ,/CH cần/V chuyển_đổi/V giữa/N 2/M kiểu/N dữ_liệu/N này/P :/CH Chuyển/V từ/E string/Np sang/V C-String/Np :/CH string/Np s/Y ;/CH s/Y ./CH\nc_str/Np ();/Np Chuyển/V từ/E C-String/Np sang/V string/Np :/CH char/Np s_old/Np =/CH \"ABC\"/Np ;/CH string/Np s/Y (/CH s_old/Np );/CH 2/M ./CH\nCác/L phương_thức/N ,/CH phép_toán/Np tiện_ích/N của/E kiểu/N string/Np Kiểu/N string/Np của/E STL/Np hỗ_trợ/V các/L nhóm/N phương_thức/N và/Cc phép_toán/Np tiện_ích/N sau_đây/Np ./CH\na)/Np Các/L phép_toán/Np và/Cc phương_thức/N cơ_bản/A Các/L toán_tử/Np +/CH ,/CH +=/Np dùng/V để/E ghép/V hai/M chuỗi/N và/Cc cũng/R để/E ghép/V một/M ký_tự/Np vào/E chuỗi;/Np Các/L phép/N so_sánh/V theo/V thứ_tự/N từ_điển/Np :/CH ==/Np (bằng/Np nhau)/Np ,/CH !/CH =/CH (khác/Np nhau)/Np ,/CH gt;/Np (lớn/Np hơn)/Np ,/CH gt;=/Np (lớn/Np hơn/A hay/Cc bằng)/Np ,/CH lt;/Np (nhỏ/Np hơn)/Np ,/CH lt;=/Np (nhỏ/Np hơn/A hay/Cc bằng);/Np Hàm/Np length()/Np và/Cc phép/N lấy/V chỉ_số/N để/E duyệt/V từng/R ký_tự/Np của/E chuỗi/N :/CH nếu/C s/Y là/V biến/V kiểu/N string/Np thì/C si/Ny là/V ký_tự/Np thứ/N i/M của/E s/Y với/E 0/M \\le/Np i/M lt;/Np s/Y ./CH length();/Np Phép/N gán/V =/CH dùng/V để/E gán/V biến/V kiểu/N string/Np bằng/E một/M chuỗi/N ,/CH hoặc/Cc bằng/E string/Np khác/A ,/CH chẳng_hạn/X :/CH string/Np s=\"ABCDEF\"/Np ;/CH hay/Cc s1=s2/Np ;/CH mà/C không/R cần/V copy/Np xâu/Np ./CH\nNhững/L constructor/Np thường/R sử_dụng/V nhất/A :/CH string/Np ();/Np string/Np (/CH const/Np char/Np str/Np );/CH //CH char/Np là/V kiểu/N dữ_liệu/N xâu/Np của/E C/Ni string/Np (/CH const/Np string/Np amp;/Np str/Np );/CH Có_thể/R dùng/V toán_tử/Np lt;lt;/Np với/E cout/Np để/E xuất/V một/M chuỗi/N ra/V màn_hình/N hoặc/Cc dùng/V toán_tử/Np gt;gt;/Np với/E cin/Np để/E nhập/V một/M chuỗi/N ký_tự/Np đến/E khi/N gặp/V một/M khoảng_trống/N thì/C dừng/V ./CH\nchar/Np st/Np =/CH \"ABCDEF\"/Np ;/CH string/Np s/Y ;/CH s/Y =/CH \"XYZ\"/Np ;/CH cout/Np lt;lt;/Np s/Y lt;lt;/Np endl/Np ;/CH s/Y =/CH st/Np ;/CH cout/Np lt;lt;/Np s/Y ./CH\nlength/Np ()/Np lt;lt;/Np \"/CH :/CH \"/CH lt;lt;/Np s/Y lt;lt;/Np endl/Np ;/CH Một/M vấn_đề/N thường/R nảy_sinh/V trong/E các/L ứng_dụng/V có/V sử_dụng/V C-string/Np :/CH một/M C-String/Np chưa/R khởi/V tạo/V cần/V được/V gán/V NULL/Np ./CH\nTuy_nhiên/C ,/CH rất/R nhiều/A hàm/Np thư_viện/N của/E C-String/Np sẽ/R gặp/V sự_cố/N trong/E thời_gian/N chạy/V khi/N gặp/V đối_tượng/N C-String/Np là/V NULL/Np ./CH\nChẳng_hạn/X ,/CH lệnh/N char/Np x/CH =/CH NULL/Np ;/CH cout/Np lt;lt;/Np strlen/Np (/CH x/CH );/CH được/V một_số/L trình/V biên_dịch/Np chấp_nhận/V ,/CH nhưng/C với/E nhiều/A hiện_thực/N khác/A của/E thư_viện/N C-String/Np ,/CH thì/C gặp/V lỗi/N trong/E thời_gian/N chạy/V ./CH\nstring/Np không/R gặp/V vấn_đề/N này/P ,/CH ta/P hoàn_toàn/A có_thể/R cho/E 1/M xâu/Np là/V rỗng/A mà/C không/R gặp/V bất_cứ/R lỗi/N nào/P :/CH string/Np s=\"\";/Np String/Np thực_chất/N là/V một/M vectorlt;chargt;/Np có/V bổ_sung/V thêm/V một_số/L hàm/Np và/Cc thuộc_tính/N ,/CH do_đó/C ,/CH nó/P có/V toàn_bộ/L các/L tính_chất/N của/E 1/M vector/Np ,/CH như/C hàm/Np size()/Np ,/CH push_back()/Np ,/CH toán_tử/Np ,/CH ./CH ./CH ./CH\nCác/L hàm/Np từ/E vector/Np :/CH v/Nu ./CH size()/Np :/CH Số_lượng/N phần_tử/N v/Nu ./CH empty()/Np :/CH Trả/V về/E 1/M nếu/C chuỗi/N rỗng/A ,/CH 0/M nếu/C ngược_lại/X ./CH\nv/Nu ./CH max_size()/Np :/CH Trả/V về/E số_lượng/N phần_tử/N tối_đa/A đã/R được/V cấp_phát/V v1/Np ==/Np v2/Np :/CH Trả/V về/E 1/M nếu/C hai/M chuỗi/N giống/N nhau/N v1/Np !/CH =/CH v2/Np :/CH Trả/V về/E 1/M nếu/C hai/M chuỗi/N khác_nhau/Np v/Nu ./CH begin()/Np :/CH Trả/V về/E iterator/Np đầu_tiên/A của/E chuỗi/N v/Nu ./CH end()/Np :/CH Trả/V về/E iterator/Np cuối_cùng/A của/E chuỗi/N (trỏ/Np vào/E sau/E kí_tự/Np cuối/N cùng)/Np v/Nu ./CH front()/Np :/CH Trả/V về_phần/Np tử/V đầu_tiên/A của/E chuỗi/N v/Nu ./CH back()/Np :/CH Trả/V về_phần/Np tử/V cuối_cùng/A của/E chuỗi/N v1/Np ./CH swap(v2)/Np :/CH Hoán_đổi/Np 2/M chuỗi/N với_nhau/Np (giống/Np việc/N hoán_đổi/Np giá_trị/N của/E 2/M biến)/Np include/Np lt;iostreamgt;/Np include/Np lt;conio/Np ./CH hgt;/Np include/Np lt;stringgt;/Np using/Np namespace/Np std/Np ;/CH int/Np main/Np ()/Np string/Np s/Y =/CH \"Hello/Np string\"/Np ;/CH //CH Khai_báo/V biến/V kiểu/N string/Np cout/Np lt;lt;/Np \"Noi/Np dung/Np string/Np :/CH \"/CH lt;lt;/Np s/Y lt;lt;/Np endl/Np ;/CH //CH In/V nôi/Np dung/Np string/Np ra/V màn_hình/N cout/Np lt;lt;/Np \"Chieu/Np dai/A cua/N string/Np :/CH \"/CH lt;lt;/Np s/Y ./CH\nsize/Nb ()/Np lt;lt;/Np endl/Np ;/CH //CH Chiều_dài/N cout/Np lt;lt;/Np \"Ky/Np tu/V 0/M :/CH \"/CH lt;lt;/Np s/Y 0/M lt;lt;/Np endl/Np ;/CH //CH In/V ký_tự/Np đầu_tiên/A của/E xâu/Np cout/Np lt;lt;/Np \"Ky/Np tu/V 1/M :/CH \"/CH lt;lt;/Np s/Y 1/M lt;lt;/Np endl/Np ;/CH //CH In/V ký_tự/Np thứ/N 2/M cout/Np lt;lt;/Np \"Ky/Np tu/V 2/M :/CH \"/CH lt;lt;/Np s/Y 2/M lt;lt;/Np endl/Np ;/CH //CH In/V ký_tự/Np thứ/N 3/M getchar/Np ();/Np return/Np 0/M ;/CH Nhập/V một/M string/Np trên/E 1/M dòng/N (chú/Np ý/N cin/Np sẽ/R chỉ/R đọc/V đến/E dấu/N cách/N hoặc/Cc xuống_dòng/Np đầu/N tiên)/Np :/CH istreamamp;/Np getline/Np (/CH istreamamp;/Np in/V ,/CH stringamp;/Np str/Np ,/CH char/Np delimiter/Np =/CH ‘\\n’);/Np Đọc/V 1/M dòng/N văn_bản/N từ/E istream/Np in/V (có/Np thể/N là/V file/Np hay/Cc đối_tượng/N chuẩn/N cin)/Np từng/R ký_tự/Np đến/E khi/N ký_tự/Np delimiter/Np được/V nhập/V vào/E (mặc/Np định/V là/V \\n/Np )/CH //CH getline/Np with/Np strings/Np include/Np lt;iostreamgt;/Np include/Np lt;stringgt;/Np using/Np namespace/Np std/Np ;/CH int/Np main/Np ()/Np string/Np str/Np ;/CH short/Np age/Np ;/CH cout/Np lt;lt;/Np \"Please/Np enter/Np full/Np name/Np and/Np age\"/Np lt;lt;/Np endl/Np ;/CH getline/Np (/CH cin/Np ,/CH str/Np )/CH gt;gt;/Np age/Np ;/CH cout/Np lt;lt;/Np \"Thank/Np you/Np \"/CH lt;lt;/Np str/Np lt;lt;/Np \"/CH !/CH \\n/Np \"/CH ;/CH return/Np 0/M ;/CH b)/Np Các/L phương_thức/N chèn/V ,/CH xóa/V ,/CH lấy/V chuỗi/N con/Nc :/CH Phương_thức/N substr(int/Np pos/Np ,/CH int/Np nchar)/Np trích/V ra/V chuỗi/N con/Nc của/E một/M chuỗi/N cho/E trước/E ,/CH ví_dụ/C str/Np ./CH substr(2/Np ,/CH 4)/Np trả/V về/E chuỗi/N con/Nc gồm/V 4/M ký_tự/Np của/E chuỗi/N str/Np kể_từ/Np ký_tự/Np ở/E vị_trí/N thứ/N 2/M (ký/Np tự/P đầu_tiên/A của/E chuỗi/N ở/E vị_trí/N 0)/Np ./CH\n//CH substring/Np include/Np lt;iostreamgt;/Np include/Np lt;stringgt;/Np include/Np lt;conio/Np ./CH hgt;/Np using/Np namespace/Np std/Np ;/CH int/Np main/Np ()/Np string/Np s/Y =/CH \"ConCho/Np chay/A qua/V rao\"/Np ;/CH cout/Np lt;lt;/Np s/Y ./CH\nsubstr/Np (/CH 2/M ,/CH 4/M )/CH lt;lt;/Np endl/Np ;/CH //CH cout/Np lt;lt;/Np new/Np string(str/Np ./CH begin()+2/Np ,/CH str/Np ./CH begin()+2+4);/Np getchar/Np ();/Np return/Np 0/M ;/CH Phương_thức/N insert()/Np chèn/V thêm/V ký_tự/Np hay/Cc chuỗi/N vào/E một/M vị_trí/N nào_đó/P của/E chuỗi/N str/Np cho/E trước/E ./CH\nCó/V nhiều/A cách/N dùng/V phương_thức/N này/P :/CH str/Np ./CH insert(int/Np pos/Np ,/CH char/Np s)/Np ;/CH chèn/V s/Y (mảng/Np ký_tự/Np kết_thúc/V \\0/Np )/CH vào/E vị_trí/N pos/Np của/E str/Np ;/CH str/Np ./CH insert(int/Np pos/Np ,/CH string/Np s)/Np ;/CH chèn/V chuỗi/N s/Y (kiểu/Np string/Np )/CH vào/E vị_trí/N pos/Np của/E chuỗi/N str/Np ;/CH str/Np ./CH insert(int/Np pos/Np ,/CH int/Np n/Ny ,/CH int/Np ch)/Np ;/CH chèn/V n/Ny lần/N ký_tự/Np ch/Np vào/E vị_trí/N pos/Np của/E chuỗi/N str/Np ;/CH //CH inserting/Np into/Np a/Ni string/Np include/Np lt;iostreamgt;/Np include/Np lt;stringgt;/Np include/Np lt;conio/Np ./CH hgt;/Np using/Np namespace/Np std/Np ;/CH int/Np main/Np ()/Np string/Np str/Np =/CH \"day/Np la/V ./CH ./CH\nxau/Np thu\"/Np ;/CH string/Np istr/Np =/CH \"them\"/Np ;/CH str/Np ./CH\ninsert/Np (/CH 8/M ,/CH istr/Np );/CH cout/Np lt;lt;/Np str/Np lt;lt;/Np endl/Np ;/CH getchar/Np ();/Np return/Np 0/M ;/CH Phương_thức/N str/Np ./CH erase(int/Np pos/Np ,/CH int/Np n)/Np xóa/V n/Ny ký_tự/Np của/E chuỗi/N str/Np kể_từ/Np vị_trí/N pos/Np ;/CH nếu_không/Np quy_định/N giá_trị_n/Np thì/C tất_cả/P các/L ký_tự/Np của/E str/Np từ_vị/Np trí/Np pos/Np trở_đi/Np sẽ/R bị/V xóa/V //CH erase/Np from/Np a/Ni string/Np include/Np lt;iostreamgt;/Np include/Np lt;stringgt;/Np include/Np lt;conio/Np ./CH hgt;/Np using/Np namespace/Np std/Np ;/CH int/Np main/Np ()/Np string/Np str/Np =/CH \"day/Np cung/N la/V xau/Np thu\"/Np ;/CH str/Np ./CH\nerase/Np (/CH 0/M ,/CH 3/M );/CH //CH \"/CH cung/N la/V xau/Np thu\"/Np cout/Np lt;lt;/Np str/Np lt;lt;/Np endl/Np ;/CH str/Np ./CH\nerase/Np (/CH 6/M ,/CH 2/M );/CH cout/Np lt;lt;/Np str/Np lt;lt;/Np endl/Np ;/CH //CH \"/CH cung/N xau/Np thu\"/Np getchar/Np ();/Np return/Np 0/M ;/CH c)/Np So_sánh/V Bạn/N có_thể/R đơn_giản/A là/V sử_dụng/V những/L toán_tử/Np quan_hệ/N (/CH ==/Np ,/CH !/CH =/CH ,/CH lt;/Np ,/CH lt;=/Np ,/CH gt;=/Np )/CH được/V định_nghĩa/N sẵn/A ./CH\nTuy_nhiên/C ,/CH nếu/C muốn/V so_sánh/V một/M phần/N của/E một/M chuỗi/N thì/C sẽ/R cần/V sử_dụng/V phương_thức/N compare()/Np :/CH int/Np compare/Np (/CH const/Np string/Np amp;/Np str/Np )/CH const/Np ;/CH int/Np compare/Np (/CH const/Np char/Np s/Y )/CH const/Np ;/CH int/Np compare/Np (/CH size_t/Np pos1/Np ,/CH size_t/Np n1/Np ,/CH const/Np string/Np amp;/Np str/Np )/CH const/Np ;/CH int/Np compare/Np (/CH size_t/Np pos1/Np ,/CH size_t/Np n1/Np ,/CH const/Np char/Np s/Y )/CH const/Np ;/CH int/Np compare/Np (/CH size_t/Np pos1/Np ,/CH size_t/Np n1/Np ,/CH const/Np string/Np amp;/Np str/Np ,/CH size_t/Np pos2/Np ,/CH size_t/Np n2/Np )/CH const/Np ;/CH int/Np compare/Np (/CH size_t/Np pos1/Np ,/CH size_t/Np n1/Np ,/CH const/Np char/Np s/Y ,/CH size_t/Np n2/Np )/CH const/Np ;/CH Hàm/Np trả/V về/E 0/M khi/N hai/M chuỗi/N bằng_nhau/Np và/Cc lớn/A hơn/A hoặc/Cc nhỏ/A hơn/A 0/M cho/E trường_hợp/N khác/A Ví_dụ/C :/CH //CH comparing/Np apples/Np with/Np apples/Np include/Np lt;iostreamgt;/Np include/Np lt;stringgt;/Np using/Np namespace/Np std/Np ;/CH int/Np main/Np ()/Np string/Np str1/Np (/CH \"green/Np apple\"/Np );/CH string/Np str2/Np (/CH \"red/Np apple\"/Np );/CH if/Np (/CH str1/Np ./CH\ncompare/Np (/CH str2/Np )/CH !/CH =/CH 0/M )/CH cout/Np lt;lt;/Np str1/Np lt;lt;/Np \"/CH is/Np not/Np \"/CH lt;lt;/Np str2/Np lt;lt;/Np \"/CH \\n/Np \"/CH ;/CH if/Np (/CH str1/Np ./CH\ncompare/Np (/CH 6/M ,/CH 5/M ,/CH \"apple\"/Np )/CH ==/Np 0/M )/CH cout/Np lt;lt;/Np \"still/Np ,/CH \"/CH lt;lt;/Np str1/Np lt;lt;/Np \"/CH is/Np an/A apple/Np \\n/Np \"/CH ;/CH if/Np (/CH str2/Np ./CH\ncompare/Np (/CH str2/Np ./CH\nsize/Nb ()/Np -/CH 5/M ,/CH 5/M ,/CH \"apple\"/Np )/CH ==/Np 0/M )/CH cout/Np lt;lt;/Np \"and/Np \"/CH lt;lt;/Np str2/Np lt;lt;/Np \"/CH is/Np also/Np an/A apple/Np \\n/Np \"/CH ;/CH if/Np (/CH str1/Np ./CH\ncompare/Np (/CH 6/M ,/CH 5/M ,/CH str2/Np ,/CH 4/M ,/CH 5/M )/CH ==/Np 0/M )/CH cout/Np lt;lt;/Np \"therefore/Np ,/CH both/Np are/Np apples/Np \\n/Np \"/CH ;/CH return/Np 0/M ;/CH d)/Np Các/L phương_thức/N tìm_kiếm/V và/Cc thay_thế/V Phương_thức/N find()/Np tìm_kiếm/V xem/V một/M ký_tự/Np hay/Cc một/M chuỗi/N nào_đó/P có/V xuất_hiện/V trong/E một/M chuỗi/N str/Np cho/E trước/E hay_không/Np ./CH\nCó/V nhiều/A cách/N dùng/V phương_thức/N này/P :/CH str/Np ./CH\nfind/Np (/CH int/Np ch/Np ,/CH int/Np pos/Np =/CH 0/M );/CH t/Nu ì/Np m/Nu k/N ý/N t/Nu ự/Np ch/Np k/N ể/Np t/Nu ừ/I v/Nu ị/Np tr/Np í/Np pos/Np đế/N n/Ny cu/Nc ố/A i/M chu/Np ỗ/Np i/M str/Np str/Np ./CH\nfind/Np (/CH char/Np s/Y ,/CH int/Np pos/Np =/CH 0/M );/CH t/Nu ì/Np m/Nu s/Y (/CH m/Nu ả/Np ng/Np k/N ý/N t/Nu ự/Np k/N ế/A t/Nu th/Np ú/Np c/Ni ‘\\/Np 0/M ’/CH )/CH k/N ể/Np t/Nu ừ/I v/Nu ị/Np tr/Np í/Np pos/Np đế/N n/Ny cu/Nc ố/A i/M str/Np ./CH\nfind/Np (/CH string/Np amp;/Np s/Y ,/CH int/Np pos/Np =/CH 0/M );/CH t/Nu ì/Np m/Nu chu/Np ỗ/Np i/M s/Y k/N ể/Np t/Nu ừ/I v/Nu ị/Np tr/Np í/Np pos/Np đế/N n/Ny cu/Nc ố/A i/M chu/Np ỗ/Np i/M ./CH\nNếu_không/Np quy_định/N giá_trị/N pos/Np thì/C hiểu/V mặc_nhiên/Np là/V 0;/Np nếu/C tìm/V có/V thì/C phương_thức/N trả/V về/E vị_trí/N xuất_hiện/V đầu_tiên/A ,/CH ngược_lại/X trả/V về/E giá_trị/N -1/Np ./CH\n//CH substring/Np include/Np lt;iostreamgt;/Np include/Np lt;stringgt;/Np include/Np lt;conio/Np ./CH hgt;/Np using/Np namespace/Np std/Np ;/CH int/Np main/Np ()/Np string/Np str/Np =/CH \"ConCho/Np chay/A qua/V rao\"/Np ;/CH cout/Np lt;lt;/Np str/Np ./CH\nfind/Np (/CH \"chay\"/Np )/CH lt;lt;/Np endl/Np ;/CH //CH 7/M cout/Np lt;lt;/Np (/CH int/Np )/CH str/Np ./CH\nfind/Np (/CH \"Chay\"/Np )/CH lt;lt;/Np endl/Np ;/CH //CH -1/Np getchar/Np ();/Np return/Np 0/M ;/CH Hàm/Np tìm_kiếm/V ngược/A (/CH rfind/Np )/CH //CH from/Np back/Np include/Np lt;iostreamgt;/Np include/Np lt;stringgt;/Np include/Np lt;conio/Np ./CH hgt;/Np using/Np namespace/Np std/Np ;/CH int/Np main/Np ()/Np string/Np str/Np =/CH \"ConCho/Np chay/A qua/V chay/A qua/V rao\"/Np ;/CH cout/Np lt;lt;/Np str/Np ./CH\nfind/Np (/CH \"chay\"/Np )/CH lt;lt;/Np endl/Np ;/CH //CH 7/M cout/Np lt;lt;/Np (/CH int/Np )/CH str/Np ./CH\nrfind/Np (/CH \"chay\"/Np )/CH lt;lt;/Np endl/Np ;/CH //CH 16/M getchar/Np ();/Np return/Np 0/M ;/CH Phương_thức/N replace()/Np thay_thế/V một/M đoạn/Nc con/Nc trong/E chuỗi/N str/Np cho/E trước/E (đoạn/Np con/Nc kể_từ/Np một/M vị_trí/N pos/Np và/Cc đếm/V tới/E nchar/Np ký_tự/Np ký_tự/Np về/E phía/N cuối/N chuỗi)/Np bởi/E một/M chuỗi/N s/Y nào_đó/P ,/CH hoặc/Cc bởi/E n/Ny ký_tự/Np ch/Np nào_đó/P ./CH\nCó/V nhiều/A cách/N dùng/V ,/CH thứ_tự/N tham_số/Np như_sau/Np :/CH str/Np ./CH\nreplace/Np (/CH int/Np pos/Np ,/CH int/Np nchar/Np ,/CH char/Np s/Y );/CH str/Np ./CH\nreplace/Np (/CH int/Np pos/Np ,/CH int/Np nchar/Np ,/CH string/Np s/Y );/CH str/Np ./CH\nreplace/Np (/CH int/Np pos/Np ,/CH int/Np nchar/Np ,/CH int/Np n/Ny ,/CH int/Np ch/Np );/CH string/Np str/Np =/CH \"con/Np cho/E la/V con/Nc cho/E con/Nc ./CH\nCon/Nc meo/Np ko/Np phai/V la/V con/Nc cho\"/Np ;/CH str/Np ./CH\nreplace/Np (/CH 4/M ,/CH 3/M ,/CH \"CHO\"/Np );/CH //CH \"con/Np CHO/E la/V con/Nc cho/E con/Nc ./CH\nCon/Nc meo/Np ko/Np phai/V la/V con/Nc cho\";/Np cout/Np lt;lt;/Np str/Np lt;lt;/Np endl/Np ;/CH getchar/Np ();/Np e)/Np Tách/V xâu/Np Trong/E việc/N xử_lý/V xâu/Np ký_tự/Np ,/CH không_thể/R thiếu/A được/V các/L thao_tác/V tách/V xâu/Np ký_tự/Np thành/V nhiều/A xâu/Np ký_tự/Np con/Nc thông_qua/V các/L ký_tự/Np ngăn_cách/V ./CH\nCác/L hàm/Np này/P có_sẵn/Np trong/E các/L ngôn_ngữ/N khác/A như/C Visual_Basic/Np ,/CH Java/Np ,/CH hay/Cc thậm_chí/R là/V trong/E lt;string/Np ./CH hgt;/Np ./CH\nVới_STL/Np ,/CH các/L bạn/N có_thể/R dễ_dàng/A làm/V điều/N này/P với/E stringstream/Np :/CH string/Np S/Y =/CH \"Xin/Np chao/V tat/Np ca/N cac/Np ban\"/Np ;/CH //CH Khởi/V tạo/V giá_trị/N của/E xâu/Np stringstream/Np ss/Np (/CH S/Y );/CH //CH Khởi/V tạo/V stringstream/Np từ/E xâu/Np S/Y while/Np (/CH ss/Np gt;gt;/Np token/Np )/CH //CH Đọc/V lần_lượt/R các/L phần/N của/E xâu/Np ./CH\nCác/L phần/N tách/V nhau/N bởi/E dấu/N cách/N hoặc/Cc xuống_dòng/Np ./CH\ncout/Np lt;lt;/Np token/Np lt;lt;/Np endl/Np ;/CH Output/Np :/CH Xin/V chao/V tat/Np ca/N cac/Np ban/N Chú_ý/V rằng/C ,/CH cách/N này/P cũng/R có_thể/R dễ/A áp_dụng/V nếu/C bạn/N muốn/V chuyển/V số_thành/Np xâu/Np (hoặc/Np ngược/A lại)/Np ,/CH tách/V 1/M xâu/Np thành/V nhiều/A số/N ./CH\nNếu_không/Np muốn/V sử_dụng/V stringstream/Np ,/CH các/L bạn/N cũng/R có_thể/R tự/P xây_dựng/V hàm/Np tách/V xâu/Np như_sau/Np :/CH string/Np S/Y =/CH \"Xin/Np chao/V tat/Np ca/N cac/Np ban\"/Np ;/CH //CH Khởi/V tạo/V giá_trị/N của/E xâu/Np string/Np :/CH :/CH iterator/Np t/Nu ,/CH t2/Ny ;/CH //CH Các/L biến_lặp/Np vector/Np lt;/Np string/Np gt;/Np split/Np ;/CH //CH Mảng/N các/L xâu/Np (lưu/Np kết_quả/N tách)/Np for/Np (/CH t/Nu =/CH S/Y ./CH\nbegin/Np ();/Np t/Nu lt;/Np S/Y ./CH\nend/Np ();)/Np //CH Lặp/V từ_vị/Np trí/Np bắt_đầu/V t2/Ny =/CH find/Np (/CH t/Nu ,/CH S/Y ./CH\nend/Np ()/Np ,/CH );/CH //CH TÌm/V ký_tự/Np space/Np đầu_tiên/A //CH kể_từ/Np vị_trí/N t/Nu if/Np (/CH t/Nu !/CH =/CH t2/Ny )/CH split/Np ./CH\npush_back/Np (/CH string/Np (/CH t/Nu ,/CH t2/Ny ));/Np //CH Lấy/V xâu/Np ký_tự/Np giữa/N 2/M vị_trí/N t/Nu =/CH t2/Ny +/CH 1/M ;/CH //CH Chuyển/V sang/V vị_trí/N sau/E for/Np (/CH int/Np i/M =/CH 0/M ;/CH i/M lt;/Np split/Np ì/Np size/Nb ();/Np i/M ++/Np )/CH cout/Np lt;lt;/Np split/Np i/M lt;lt;/Np endl/Np ;/CH //CH In/V mảng/N các/L xâu/Np ký_tự/Np getchar/Np ();/Np Output/Np :/CH Xin/V chao/V tat/Np ca/N cac/Np ban/N Đoạn/Nc chương/N tr/Np ./CH nh/Ny sử_dụng/V các/L kỹ_thuật/N sau/E Phương_thức/N find(vị_trí_đầu/Np ,/CH vị_trí_cuối/Np ,/CH ký_tự_tìm)/Np dùng/V để/E tìm/V vị_trí_đầu/Np tiên/N của/E ký_tự_tìm/Np bắt_đầu_từ/Np vị_trí_đầu/Np ./CH\nHàm/Np này/P trả/V về/E vị_trí/N của/E ký_tự_tìm/Np được/V (nếu/Np tìm/V thấy)/Np hoặc/Cc vị_trí_cuối/Np (nếu/Np không/R tìm/V thấy)/Np string/Np có_thể/R khởi/V tạo/V từ/E một/M đoạn/Nc ký_tự/Np con/Nc của/E một/M xâu/Np ký_tự/Np khác/A với/E cú_pháp/Np string(vị_trí_đầu/Np ,/CH vị_trí_cuối)/Np Đoạn/Nc chương_trình/N thực_hiện/V tách/V các/L xâu/Np ký_tự/Np kể_cả/X trong/E trường_hợp/N có/V nhiều/A ký_tự/Np space/Np nằm/V liên_tiếp/A nhau/N ./CH\nMột_cách/N đơn_giản/A hơn_là/Np bạn/N có_thể/R gọi/V hàm/Np strtok()/Np trong/E string/Np ./CH h/Ny để/E làm_việc/V này/P ,/CH nhưng/C không/R may/A là/V hàm/Np này/P thao_tác/V trên/E char/Np chứ/C không_phải/Np string/Np ./CH\nHàm/Np thành_viên/N c_str()/Np sẽ/R giúp/V bạn/N chuyển/V từ/E string/Np thành/V dạng/N const/Np charT/Np c_str/Np ()/Np const/Np ;/CH Hàm/Np này/P cũng/R tự_động/A sinh_ra/V ký_tự/Np null/Np chèn/V vào/E cuối/N xâu/Np ./CH\nTừ/E prototype/Np ta/P cũng/R thấy/V được/V hàm/Np trả/V về/E một/M hằng/R chuỗi/N ,/CH điều/N này/P đồng_nghĩa/A với/E việc_ta/Np không_thể/R thay_đổi/V chuỗi/N trả/V về/E ./CH\nGọi/V phương_thức/N c_str();/Np string/Np s/Y =/CH \"some_string\"/Np ;/CH cout/Np lt;lt;/Np s/Y ./CH\nc_str/Np ()/Np lt;lt;/Np endl/Np ;/CH cout/Np lt;lt;/Np strlen/Np (/CH s/Y ./CH\nc_str/Np ())/Np lt;lt;/Np endl/Np ;/CH Sau_đây/Np là/V ví_dụ/C bên_trên/Np được/V viết/V lại/R dùng/V hàm/Np thành_viên/N c_str()/Np và/Cc các/L hàm/Np trong/E lt;string/Np ./CH hgt;/Np //CH strings/Np vs/Np c-strings/Np include/Np lt;iostreamgt;/Np include/Np lt;string/Np ./CH hgt;/Np include/Np lt;stringgt;/Np using/Np std/Np :/CH :/CH string/Np ;/CH int/Np main/Np ()/Np char/Np cstr/Np ;/CH char/Np p/Ny ;/CH string/Np str/Np (/CH \"Xin/Np chao/V tat/Np ca/N cac/Np ban\"/Np );/CH cstr/Np =/CH new/Np char/Np str/Np ./CH\nsize/Nb ()/Np +/CH 1/M ;/CH strcpy/Np (/CH cstr/Np ,/CH str/Np ./CH\nc_str/Np ());/Np //CH cstr/Np là/V 1/M bản_sao/N c-string/Np của/E str/Np p/Ny =/CH strtok/Np (/CH cstr/Np ,/CH \"/CH \"/CH );/CH while/Np (/CH p/Ny !/CH =/CH NULL/Np )/CH cout/Np lt;lt;/Np p/Ny lt;lt;/Np endl/Np ;/CH p/Ny =/CH strtok/Np (/CH NULL/Np ,/CH \"/CH \"/CH );/CH delete/Np cstr/Np ;/CH return/Np 0/M ;/CH Output/Np :/CH Xin/V chao/V tat/Np ca/N cac/Np ban/N f)/Np Chuyển_đổi/V hàng_loạt/N với/E transform/Np OutputIterator/Np transform/Np (/CH InputIterator/Np first/Np ,/CH InputIterator/Np last/Np ,/CH OutputIterator/Np result/Np ,/CH UnaryOperation/Np unary_op/Np );/CH include/Np lt;cctypegt;/Np //CH for/Np toupper/Np include/Np lt;stringgt;/Np include/Np lt;algorithmgt;/Np //CH transform/Np using/Np namespace/Np std/Np ;/CH char/Np alphabet/Np (/CH char/Np c/Ni )/CH static/Np char/Np ch/Np =/CH a/Ni ;/CH return/Np ch/Np ++/Np ;/CH int/Np main/Np ()/Np string/Np s/Y (/CH \"this/Np is/Np a/Ni lower/Np case/Np string\"/Np );/CH transform/Np (/CH s/Y ./CH\nbegin/Np ()/Np ,/CH s/Y ./CH\nend/Np ()/Np ,/CH s/Y ./CH\nbegin/Np ()/Np ,/CH toupper/Np );/CH cout/Np lt;lt;/Np s/Y lt;lt;/Np endl/Np ;/CH transform/Np (/CH s/Y ./CH\nbegin/Np ()/Np ,/CH s/Y ./CH\nend/Np ()/Np ,/CH s/Y ./CH\nbegin/Np ()/Np ,/CH alphabet/Np );/CH cout/Np lt;lt;/Np s/Y ;/CH return/Np 0/M ;/CH g)/Np Một_số/L phương_thức/N khác/A Còn/R nhiều/A phương_thức/N tiện_ích/N khác/A như/C :/CH append()/Np ,/CH rfind()/Np ,/CH find_first_not_of()/Np ,/CH find_last_not_of()/Np ,/CH swap()/Np ./CH\nCách/N dùng/V các/L hàm/Np này/P đều/R được/V trình_bày/V trong/E hệ_thống/N hướng_dẫn/V (help)/Np của/E các/L môi_trường/N có/V hỗ_trợ/V STL/Np (trong/Np VC++/Np là/V MSDN)/Np ./CH\nNgoài_ra/X các/L phương_thức/N như/C find_first_of()/Np tương_tự/A như/C find()/Np ,/CH find_last_of()/Np tương_tự/A như/C rfind()/Np\n", "title": "Xâu trong C++\n", "link": "http://vnoi.info/wiki/languages/cpp/string\n"}