{"content": "Tác_giả : Nguyễn_Đình Trí_Cường_Table of_Contents Thuật_toán phân_tách cây Cập_nhật và truy_vấn một đường_đi trên cây Độ phức_tạp Bài_tập áp_dụng Tham_khảo Heavy-light decomposition (HLD) là kĩ_thuật phân_tách một cây thành nhiều chuỗi đỉnh (chain) rời nhau .\nSau_đó , chúng_ta có_thể áp_dụng các cấu_trúc dữ_liệu như Interval_Tree hay Binary-Indexed_Tree lên những chuỗi này để có_thể cập_nhật dữ_liệu hoặc trả_lời các truy_vấn trên một đường_đi giữa 2 đỉnh trong cây .\nThuật_toán phân_tách cây Trước_hết , chúng_ta có các định_nghĩa như_sau : Đỉnh con đặc_biệt ( heavy vertex ) : Trong số những đỉnh con của một đỉnh u không_phải là lá , đỉnh đặc_biệt v là gốc của cây_con có kích_thước lớn nhất .\nCạnh đặc_biệt ( heavy edge ) : Là cạnh nối giữa u và v , với v là đỉnh đặc_biệt và u là cha của v .\nNhững đỉnh con còn_lại của u gọi_là đỉnh thường ( light vertex ) và những cạnh nối giữa u đến các đỉnh đó gọi_là cạnh thường ( light edge ) .\nDễ thấy là với mỗi đỉnh không_phải là lá đều có_thể chọn được đúng một cạnh và một đỉnh con đặc_biệt của nó .\nĐể tạo các chuỗi đỉnh , chúng_ta làm như_sau : bắt_đầu_từ đỉnh gốc , di_chuyển xuống đỉnh con đặc_biệt của nó và tiếp_tục di_chuyển xuống các đỉnh con tiếp_theo đến khi gặp đỉnh lá thì kết_thúc .\nĐường_đi từ đỉnh gốc đến đỉnh lá này tạo_thành một chuỗi đỉnh .\nChúng_ta lại lặp_lại thao_tác này với các đỉnh còn_lại đến khi tất_cả các đỉnh đều thuộc đúng một chuỗi nào_đó .\nĐể_cho dễ_hiểu , chúng_ta có ví_dụ sau : Từ đỉnh 1 di_chuyển xuống đỉnh 2 .\nĐỉnh đặc_biệt của đỉnh 1 là đỉnh 2 vì cây_con có đỉnh 2 làm gốc có kích_thước lớn nhất .\nTừ đỉnh 2 di_chuyển xuống đỉnh 4 vì cây_con có gốc là đỉnh 4 có kích_thước lớn nhất .\nTừ đỉnh 4 di_chuyển xuống đỉnh số 7 .\nTại đây 2 cây_con có gốc là đỉnh 7 và đỉnh 5 đều có kích_thước như_nhau nên ta có_thể chọn bất_kì đỉnh nào .\nTiếp_tục thực_hiện cho_đến khi gặp đỉnh lá .\nNhư_vậy là chúng_ta đã có được một chuỗi đỉnh .\nChúng_ta bắt_đầu chuỗi mới ở một đỉnh gần nhất và lặp_lại quá_trình trên .\nCuối_cùng chúng_ta sẽ có_một tập các chuỗi đỉnh rời nhau .\nNhững cạnh được tô_màu là cạnh đặc_biệt và cạnh không được tô_màu là cạnh thường .\n// nChain chuỗi hiện_tại .\nSau khi kết_thúc việc phân_tách thì đây sẽ là tổng_số chuỗi .\n// chainHeadc đỉnh_đầu của chuỗi c // chainIndu chuỗi mà đỉnh u nằm trong .\nvoid hld ( int u ) // Nếu chuỗi hiện_tại chưa có đỉnh_đầu (đỉnh gần gốc nhất) thì đặt u làm đỉnh_đầu của nó .\nif ( chainHead nChain == 0 ) chainHead nChain = u ; // Gán chuỗi hiện_tại cho u chainInd u = nChain ; // Giải_thích bên_dưới posInBase u = ++ nBase ; // Biến lưu đỉnh con đặc_biệt của u int mxVtx = - 1 ; // Tìm đỉnh con đặc_biệt trong số những đỉnh con của u for ( int i = 0 ; i lt; adj u .\nsize (); i ++ ) int v = adj u i ; if ( v ! = parent u ) if ( mxVtx == - 1 nChild v gt; nChild mxVtx ) mxVtx = v ; // Nếu tìm_ra đỉnh con đặc_biệt (u không_phải là đỉnh lá) thì di_chuyển đến đỉnh đó if ( mxVtx gt; - 1 ) hld ( mxVtx ); // Sau khi đi hết một chuỗi thì tăng nChain lên và bắt_đầu một chuỗi mới for ( int i = 0 ; i lt; adj u .\nsize (); i ++ ) int v = adj u i ; if ( v ! = parent u amp;amp; v ! = mxVtx ) nChain ++ ; hld ( v ); Để có_thể tiếp_tục , chúng_ta cần biết ít_nhất các thông_tin sau : Với một chuỗi , đỉnh_đầu (đỉnh gần đỉnh gốc nhất) của nó là đỉnh nào .\nVới một đỉnh , chuỗi mà nó nằm trong là chuỗi nào .\nNgoài_ra chúng_ta còn có mảng posInBase .\nĐây là mảng lưu lại vị_trí của các đỉnh sau khi chúng_ta \"trải\" các chuỗi trên lên một đường_thẳng .\nĐiều này sẽ giúp cho việc cài_đặt các cấu_trúc dữ_liệu như Interval_Tree hoặc Binary_Indexed_Tree một_cách gọn_gàng hơn .\nGiả_sử với hình trên thì posInBase7 = 4 ; posInBase14 = 8 . . .\nCập_nhật và truy_vấn một đường_đi trên cây Thay_vì cập_nhật hoặc truy_vấn một đường_đi từ đỉnh u đến đỉnh v trên cây , chúng_ta có_thể thực_hiện các thao_tác này trên 2 đường_đi từ u đến lca(u , v) và từ v đến lca(u , v) (lca là hàm tìm cha chung gần nhất của 2 đỉnh) .\nGiả_sử chúng_ta cần cập_nhật đường_đi từ u đến lca(u , v) (gọi tắt là a) .\nNếu a và u không_cùng một chuỗi , chúng_ta thực_hiện thao_tác cập_nhật lên_đường đi từ đỉnh u đến đỉnh_đầu của chuỗi hiện_tại .\nSau_đó cho u nhảy lên đỉnh cha của đỉnh_đầu này rồi lặp_lại thao_tác cập_nhật .\nĐến khi u và a nằm trên cùng một chuỗi , chúng_ta chỉ_cần cập_nhật đoạn từ u đến a và kết_thúc .\nThao_tác truy_vấn được thực_hiện tương_tự .\nVí_dụ : Chúng_ta cần thực_hiện cập_nhật trên đường_đi từ u = 16 đến a = 1 .\nGọi hàm update interval tree cho đoạn từ đỉnh 8 đến đỉnh 16 .\nNhảy lên đỉnh cha của đỉnh_đầu của chuỗi hiện_tại .\nLúc_này u = 11 .\nGọi hàm update interval tree cho đoạn từ đỉnh 11 đến đỉnh 5 .\nNhảy lên đỉnh cha của đỉnh_đầu của chuỗi hiện_tại .\nLúc_này u = 4 .\nGọi hàm update interval tree cho đoạn từ đỉnh 4 đến đỉnh 1 và kết_thúc .\nvoid update ( int u , int a ) // uchain chuỗi hiện_tại của u // achain chuỗi của a int uchain = chainInd u , achain = chainInd a ; while ( 1 ) // Nếu u và a cùng nằm trên một chuỗi thì update đoạn từ u đến a và kết_thúc .\nif ( uchain == achain ) updateIntervalTree ( . . . , posInBase a , posInBase u , . . . ); break ; // Nếu u và a không nằm trên cùng một chuỗi thì update đoạn từ u đến đỉnh_đầu của chuỗi hiện_tại .\nupdateIntervalTree ( . . . , posInBase chainHead uchain , posInBase u , . . . ); // Nhảy lên đỉnh cha của đỉnh_đầu hiện_tại .\nu = parent chainHead uchain ; uchain = chainInd u ; Độ phức_tạp Với một cây có n đỉnh , khi đi từ đỉnh gốc đến một đỉnh lá bằng một đường_đi bất_kì thì số lần chúng_ta phải nhảy chuỗi sẽ không vượt_quá log(n) .\nĐể chứng_minh điều này , chúng_ta có_thể thấy rằng , khi nhảy từ một đỉnh bất_kì đến đỉnh con thường của nó thông_qua cạnh thường thì số_lượng đỉnh con có_thể đi được sẽ giảm đi xuống còn tối_đa một_nửa so_với ban_đầu (nếu số đỉnh con còn_lại nhiều hơn một_nửa số đỉnh ban_đầu thì đỉnh chúng_ta nhảy tới đã_là đỉnh con đặc biệt) .\nVà nếu chúng_ta tiếp_tục nhảy qua nhiều chuỗi mới thì số_lượng đỉnh sẽ giảm theo bội của 2 .\nBên_cạnh đó , chúng_ta sử_dụng cấu_trúc dữ_liệu đặc_biệt cho việc cập_nhật hoặc truy_vấn thông_tin các đỉnh trong cùng một chuỗi nên độ phức_tạp của thao_tác này cũng là O(log(n)) .\nNhư_vậy độ phức_tạp của một thao_tác cập_nhật hoặc truy_vấn một đường_đi trên cây sẽ là O(log(n)) .\nBài_tập áp_dụng HLD có_thể áp_dụng để giải bài_toán LCA_QTREE_QTREE3_QTREEX_EpicTree Tham_khảo wcipeg Blog_Anudeep\n", "tagged": "Tác_giả/N :/CH Nguyễn_Đình/Np Trí_Cường_Table/Np of_Contents/Np Thuật_toán/N phân_tách/Np cây/N Cập_nhật/V và/Cc truy_vấn/Np một/M đường_đi/Np trên/E cây/N Độ/N phức_tạp/A Bài_tập/Np áp_dụng/V Tham_khảo/V Heavy-light/Np decomposition/Np (HLD)/Np là/V kĩ_thuật/N phân_tách/Np một/M cây/N thành/V nhiều/A chuỗi/N đỉnh/N (chain)/Np rời/V nhau/N ./CH\nSau_đó/Np ,/CH chúng_ta/P có_thể/R áp_dụng/V các/L cấu_trúc/N dữ_liệu/N như/C Interval_Tree/Np hay/Cc Binary-Indexed_Tree/Np lên/V những/L chuỗi/N này/P để/E có_thể/R cập_nhật/V dữ_liệu/N hoặc/Cc trả_lời/V các/L truy_vấn/Np trên/E một/M đường_đi/Np giữa/N 2/M đỉnh/N trong/E cây/N ./CH\nThuật_toán/N phân_tách/Np cây/N Trước_hết/N ,/CH chúng_ta/P có/V các/L định_nghĩa/N như_sau/Np :/CH Đỉnh/N con/Nc đặc_biệt/A (/CH heavy/Np vertex/Np )/CH :/CH Trong/E số/N những/L đỉnh/N con/Nc của/E một/M đỉnh/N u/N không_phải/Np là/V lá/N ,/CH đỉnh/N đặc_biệt/A v/Nu là/V gốc/N của/E cây_con/Np có/V kích_thước/N lớn/A nhất/A ./CH\nCạnh/N đặc_biệt/A (/CH heavy/Np edge/Np )/CH :/CH Là/V cạnh/N nối/V giữa/N u/N và/Cc v/Nu ,/CH với/E v/Nu là/V đỉnh/N đặc_biệt/A và/Cc u/N là/V cha/N của/E v/Nu ./CH\nNhững/L đỉnh/N con/Nc còn_lại/Np của/E u/N gọi_là/V đỉnh/N thường/R (/CH light/Np vertex/Np )/CH và/Cc những/L cạnh/N nối/V giữa/N u/N đến/E các/L đỉnh/N đó/P gọi_là/V cạnh/N thường/R (/CH light/Np edge/Np )/CH ./CH\nDễ/A thấy/V là/V với/E mỗi/L đỉnh/N không_phải/Np là/V lá/N đều/R có_thể/R chọn/V được/V đúng/A một/M cạnh/N và/Cc một/M đỉnh/N con/Nc đặc_biệt/A của/E nó/P ./CH\nĐể/E tạo/V các/L chuỗi/N đỉnh/N ,/CH chúng_ta/P làm/V như_sau/Np :/CH bắt_đầu_từ/Np đỉnh/N gốc/N ,/CH di_chuyển/V xuống/V đỉnh/N con/Nc đặc_biệt/A của/E nó/P và/Cc tiếp_tục/V di_chuyển/V xuống/V các/L đỉnh/N con/Nc tiếp_theo/V đến/E khi/N gặp/V đỉnh/N lá/N thì/C kết_thúc/V ./CH\nĐường_đi/Np từ/E đỉnh/N gốc/N đến/E đỉnh/N lá/N này/P tạo_thành/Np một/M chuỗi/N đỉnh/N ./CH\nChúng_ta/P lại/R lặp_lại/Np thao_tác/V này/P với/E các/L đỉnh/N còn_lại/Np đến/E khi/N tất_cả/P các/L đỉnh/N đều/R thuộc/V đúng/A một/M chuỗi/N nào_đó/P ./CH\nĐể_cho/Np dễ_hiểu/Np ,/CH chúng_ta/P có/V ví_dụ/C sau/E :/CH Từ/E đỉnh/N 1/M di_chuyển/V xuống/V đỉnh/N 2/M ./CH\nĐỉnh/N đặc_biệt/A của/E đỉnh/N 1/M là/V đỉnh/N 2/M vì/E cây_con/Np có/V đỉnh/N 2/M làm/V gốc/N có/V kích_thước/N lớn/A nhất/A ./CH\nTừ/E đỉnh/N 2/M di_chuyển/V xuống/V đỉnh/N 4/M vì/E cây_con/Np có/V gốc/N là/V đỉnh/N 4/M có/V kích_thước/N lớn/A nhất/A ./CH\nTừ/E đỉnh/N 4/M di_chuyển/V xuống/V đỉnh/N số/N 7/M ./CH\nTại/E đây/P 2/M cây_con/Np có/V gốc/N là/V đỉnh/N 7/M và/Cc đỉnh/N 5/M đều/R có/V kích_thước/N như_nhau/Np nên/C ta/P có_thể/R chọn/V bất_kì/R đỉnh/N nào/P ./CH\nTiếp_tục/V thực_hiện/V cho_đến/E khi/N gặp/V đỉnh/N lá/N ./CH\nNhư_vậy/X là/V chúng_ta/P đã/R có/V được/V một/M chuỗi/N đỉnh/N ./CH\nChúng_ta/P bắt_đầu/V chuỗi/N mới/R ở/E một/M đỉnh/N gần/A nhất/A và/Cc lặp_lại/Np quá_trình/N trên/E ./CH\nCuối_cùng/A chúng_ta/P sẽ/R có_một/Np tập/V các/L chuỗi/N đỉnh/N rời/V nhau/N ./CH\nNhững/L cạnh/N được/V tô_màu/Np là/V cạnh/N đặc_biệt/A và/Cc cạnh/N không/R được/V tô_màu/Np là/V cạnh/N thường/R ./CH\n//CH nChain/Np chuỗi/N hiện_tại/N ./CH\nSau/E khi/N kết_thúc/V việc/N phân_tách/Np thì/C đây/P sẽ/R là/V tổng_số/N chuỗi/N ./CH\n//CH chainHeadc/Np đỉnh_đầu/Np của/E chuỗi/N c/Ni //CH chainIndu/Np chuỗi/N mà/C đỉnh/N u/N nằm/V trong/E ./CH\nvoid/Np hld/Np (/CH int/Np u/N )/CH //CH Nếu/C chuỗi/N hiện_tại/N chưa/R có/V đỉnh_đầu/Np (đỉnh/Np gần/A gốc/N nhất)/Np thì/C đặt/V u/N làm/V đỉnh_đầu/Np của/E nó/P ./CH\nif/Np (/CH chainHead/Np nChain/Np ==/Np 0/M )/CH chainHead/Np nChain/Np =/CH u/N ;/CH //CH Gán/V chuỗi/N hiện_tại/N cho/E u/N chainInd/Np u/N =/CH nChain/Np ;/CH //CH Giải_thích/V bên_dưới/Np posInBase/Np u/N =/CH ++/Np nBase/Np ;/CH //CH Biến/V lưu/V đỉnh/N con/Nc đặc_biệt/A của/E u/N int/Np mxVtx/Np =/CH -/CH 1/M ;/CH //CH Tìm/V đỉnh/N con/Nc đặc_biệt/A trong/E số/N những/L đỉnh/N con/Nc của/E u/N for/Np (/CH int/Np i/M =/CH 0/M ;/CH i/M lt;/Np adj/Np u/N ./CH\nsize/Nb ();/Np i/M ++/Np )/CH int/Np v/Nu =/CH adj/Np u/N i/M ;/CH if/Np (/CH v/Nu !/CH =/CH parent/Np u/N )/CH if/Np (/CH mxVtx/Np ==/Np -/CH 1/M nChild/Np v/Nu gt;/Np nChild/Np mxVtx/Np )/CH mxVtx/Np =/CH v/Nu ;/CH //CH Nếu/C tìm_ra/Np đỉnh/N con/Nc đặc_biệt/A (u/Np không_phải/Np là/V đỉnh/N lá)/Np thì/C di_chuyển/V đến/E đỉnh/N đó/P if/Np (/CH mxVtx/Np gt;/Np -/CH 1/M )/CH hld/Np (/CH mxVtx/Np );/CH //CH Sau/E khi/N đi/V hết/V một/M chuỗi/N thì/C tăng/V nChain/Np lên/V và/Cc bắt_đầu/V một/M chuỗi/N mới/R for/Np (/CH int/Np i/M =/CH 0/M ;/CH i/M lt;/Np adj/Np u/N ./CH\nsize/Nb ();/Np i/M ++/Np )/CH int/Np v/Nu =/CH adj/Np u/N i/M ;/CH if/Np (/CH v/Nu !/CH =/CH parent/Np u/N amp;amp;/Np v/Nu !/CH =/CH mxVtx/Np )/CH nChain/Np ++/Np ;/CH hld/Np (/CH v/Nu );/CH Để/E có_thể/R tiếp_tục/V ,/CH chúng_ta/P cần/V biết/V ít_nhất/A các/L thông_tin/N sau/E :/CH Với/E một/M chuỗi/N ,/CH đỉnh_đầu/Np (đỉnh/Np gần/A đỉnh/N gốc/N nhất)/Np của/E nó/P là/V đỉnh/N nào/P ./CH\nVới/E một/M đỉnh/N ,/CH chuỗi/N mà/C nó/P nằm/V trong/E là/V chuỗi/N nào/P ./CH\nNgoài_ra/X chúng_ta/P còn/R có/V mảng/N posInBase/Np ./CH\nĐây/P là/V mảng/N lưu/V lại/R vị_trí/N của/E các/L đỉnh/N sau/E khi/N chúng_ta/P \"trải\"/Np các/L chuỗi/N trên/E lên/V một/M đường_thẳng/N ./CH\nĐiều/N này/P sẽ/R giúp/V cho/E việc/N cài_đặt/V các/L cấu_trúc/N dữ_liệu/N như/C Interval_Tree/Np hoặc/Cc Binary_Indexed_Tree/Np một_cách/N gọn_gàng/A hơn/A ./CH\nGiả_sử/Np với/E hình/N trên/E thì/C posInBase7/Np =/CH 4/M ;/CH posInBase14/Np =/CH 8/M ./CH ./CH ./CH\nCập_nhật/V và/Cc truy_vấn/Np một/M đường_đi/Np trên/E cây/N Thay_vì/X cập_nhật/V hoặc/Cc truy_vấn/Np một/M đường_đi/Np từ/E đỉnh/N u/N đến/E đỉnh/N v/Nu trên/E cây/N ,/CH chúng_ta/P có_thể/R thực_hiện/V các/L thao_tác/V này/P trên/E 2/M đường_đi/Np từ/E u/N đến/E lca(u/Np ,/CH v)/Np và/Cc từ/E v/Nu đến/E lca(u/Np ,/CH v)/Np (lca/Np là/V hàm/Np tìm/V cha/N chung/A gần/A nhất/A của/E 2/M đỉnh)/Np ./CH\nGiả_sử/Np chúng_ta/P cần/V cập_nhật/V đường_đi/Np từ/E u/N đến/E lca(u/Np ,/CH v)/Np (gọi/Np tắt/V là/V a)/Np ./CH\nNếu/C a/Ni và/Cc u/N không_cùng/Np một/M chuỗi/N ,/CH chúng_ta/P thực_hiện/V thao_tác/V cập_nhật/V lên_đường/V đi/V từ/E đỉnh/N u/N đến/E đỉnh_đầu/Np của/E chuỗi/N hiện_tại/N ./CH\nSau_đó/Np cho/E u/N nhảy/V lên/V đỉnh/N cha/N của/E đỉnh_đầu/Np này/P rồi/C lặp_lại/Np thao_tác/V cập_nhật/V ./CH\nĐến/E khi/N u/N và/Cc a/Ni nằm/V trên/E cùng/A một/M chuỗi/N ,/CH chúng_ta/P chỉ_cần/Np cập_nhật/V đoạn/Nc từ/E u/N đến/E a/Ni và/Cc kết_thúc/V ./CH\nThao_tác/V truy_vấn/Np được/V thực_hiện/V tương_tự/A ./CH\nVí_dụ/C :/CH Chúng_ta/P cần/V thực_hiện/V cập_nhật/V trên/E đường_đi/Np từ/E u/N =/CH 16/M đến/E a/Ni =/CH 1/M ./CH\nGọi/V hàm/Np update/Np interval/Np tree/Np cho/E đoạn/Nc từ/E đỉnh/N 8/M đến/E đỉnh/N 16/M ./CH\nNhảy/V lên/V đỉnh/N cha/N của/E đỉnh_đầu/Np của/E chuỗi/N hiện_tại/N ./CH\nLúc_này/Np u/N =/CH 11/M ./CH\nGọi/V hàm/Np update/Np interval/Np tree/Np cho/E đoạn/Nc từ/E đỉnh/N 11/M đến/E đỉnh/N 5/M ./CH\nNhảy/V lên/V đỉnh/N cha/N của/E đỉnh_đầu/Np của/E chuỗi/N hiện_tại/N ./CH\nLúc_này/Np u/N =/CH 4/M ./CH\nGọi/V hàm/Np update/Np interval/Np tree/Np cho/E đoạn/Nc từ/E đỉnh/N 4/M đến/E đỉnh/N 1/M và/Cc kết_thúc/V ./CH\nvoid/Np update/Np (/CH int/Np u/N ,/CH int/Np a/Ni )/CH //CH uchain/Np chuỗi/N hiện_tại/N của/E u/N //CH achain/Np chuỗi/N của/E a/Ni int/Np uchain/Np =/CH chainInd/Np u/N ,/CH achain/Np =/CH chainInd/Np a/Ni ;/CH while/Np (/CH 1/M )/CH //CH Nếu/C u/N và/Cc a/Ni cùng/A nằm/V trên/E một/M chuỗi/N thì/C update/Np đoạn/Nc từ/E u/N đến/E a/Ni và/Cc kết_thúc/V ./CH\nif/Np (/CH uchain/Np ==/Np achain/Np )/CH updateIntervalTree/Np (/CH ./CH ./CH ./CH ,/CH posInBase/Np a/Ni ,/CH posInBase/Np u/N ,/CH ./CH ./CH ./CH );/CH break/Np ;/CH //CH Nếu/C u/N và/Cc a/Ni không/R nằm/V trên/E cùng/A một/M chuỗi/N thì/C update/Np đoạn/Nc từ/E u/N đến/E đỉnh_đầu/Np của/E chuỗi/N hiện_tại/N ./CH\nupdateIntervalTree/Np (/CH ./CH ./CH ./CH ,/CH posInBase/Np chainHead/Np uchain/Np ,/CH posInBase/Np u/N ,/CH ./CH ./CH ./CH );/CH //CH Nhảy/V lên/V đỉnh/N cha/N của/E đỉnh_đầu/Np hiện_tại/N ./CH\nu/N =/CH parent/Np chainHead/Np uchain/Np ;/CH uchain/Np =/CH chainInd/Np u/N ;/CH Độ/N phức_tạp/A Với/E một/M cây/N có/V n/Ny đỉnh/N ,/CH khi/N đi/V từ/E đỉnh/N gốc/N đến/E một/M đỉnh/N lá/N bằng/E một/M đường_đi/Np bất_kì/R thì/C số/N lần/N chúng_ta/P phải/V nhảy/V chuỗi/N sẽ/R không/R vượt_quá/Np log(n)/Np ./CH\nĐể/E chứng_minh/V điều/N này/P ,/CH chúng_ta/P có_thể/R thấy/V rằng/C ,/CH khi/N nhảy/V từ/E một/M đỉnh/N bất_kì/R đến/E đỉnh/N con/Nc thường/R của/E nó/P thông_qua/V cạnh/N thường/R thì/C số_lượng/N đỉnh/N con/Nc có_thể/R đi/V được/V sẽ/R giảm/V đi/V xuống/V còn/R tối_đa/A một_nửa/N so_với/Np ban_đầu/N (nếu/Np số/N đỉnh/N con/Nc còn_lại/Np nhiều/A hơn/A một_nửa/N số/N đỉnh/N ban_đầu/N thì/C đỉnh/N chúng_ta/P nhảy/V tới/E đã_là/Np đỉnh/N con/Nc đặc/A biệt)/Np ./CH\nVà/Cc nếu/C chúng_ta/P tiếp_tục/V nhảy/V qua/V nhiều/A chuỗi/N mới/R thì/C số_lượng/N đỉnh/N sẽ/R giảm/V theo/V bội/Np của/E 2/M ./CH\nBên_cạnh/R đó/P ,/CH chúng_ta/P sử_dụng/V cấu_trúc/N dữ_liệu/N đặc_biệt/A cho/E việc/N cập_nhật/V hoặc/Cc truy_vấn/Np thông_tin/N các/L đỉnh/N trong/E cùng/A một/M chuỗi/N nên/C độ/N phức_tạp/A của/E thao_tác/V này/P cũng/R là/V O(log(n))/Np ./CH\nNhư_vậy/X độ/N phức_tạp/A của/E một/M thao_tác/V cập_nhật/V hoặc/Cc truy_vấn/Np một/M đường_đi/Np trên/E cây/N sẽ/R là/V O(log(n))/Np ./CH\nBài_tập/Np áp_dụng/V HLD/Np có_thể/R áp_dụng/V để/E giải/N bài_toán/N LCA_QTREE_QTREE3_QTREEX_EpicTree/Np Tham_khảo/V wcipeg/Np Blog_Anudeep/Np\n", "title": "Heavy-Light Decomposition\n", "link": "http://vnoi.info/wiki/algo/data-structures/heavy-light-decomposition\n"}