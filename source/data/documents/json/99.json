{"content": "Tác_giả : Nguyễn_Tiến Trung_Kiên Đôi lời về tác_giả : Nguyễn_Tiến Trung_Kiên là cựu_học_sinh Chuyên Tổng_Hợp , với 1 HCĐ_IOI năm 2014 và 1 HCB_IOI năm 2015 .\nKiên còn nổi_tiếng với blog chứa code nhiều thuật_toán và series Free contest .\nTable of_Contents Giới_thiệu Bắt_đầu bằng ví_dụ đơn_giản nhất Tổng_quát f(n) = f(n-1) + f(n-2) Giới_thiệu Nhân ma_trận thật_sự hữu_dụng .\nCó nhiều bài_toán khi n nhỏ , ta dùng DP ( Dynamic_Programming - Quy_Hoạch_Động ) để giải .\nNhưng khi n lớn (khoảng 109) , ta phải dùng nhân ma_trận để giảm độ phức_tạp .\nTrong quá_trình code nhân ma_trận , việc sinh_ra ma_trận gốc không_phải lúc nào cũng đơn_giản .\nTôi đã tìm_ra một phương_pháp tốt để giải những bài_toán này mà không cần nhân ma_trận .\nKhi dùng phương_pháp này , ta không cần phải sinh ma_trận gốc và không cần cài phép_toán nhân hai ma_trận A_B và luỹ_thừa ma_trận Ak . Tuy_nhiên , phương_pháp này chỉ dùng được trong các bài_toán đếm , nghĩa_là nó không_thể hoàn_toàn thay_thế nhân ma_trận .\nBắt_đầu bằng ví_dụ đơn_giản nhất Để ví_dụ , tôi sẽ dùng bài_toán sau : Đếm xem có bao_nhiêu dãy ngoặc đúng độ_dài n mà độ sâu không quá L .\n(n \\le 109 , L \\le 10) .\nVí_dụ , khi n = 4 và L = 1 , thì ()() là dãy ngoặc đúng duy_nhất thoả_mãn , còn (()) , ((() , và ))(( thì không thoả_mãn .\nBài_toán này có_thể giải bằng phương_pháp Quy_hoạch_động như_sau : Nhận_xét : Nếu ta đi_qua lần_lượt từng ký_tự của dãy ngoặc và duy_trì một biến sum : Khi gặp ( ta tăng sum lên 1 đơn_vị .\nKhi gặp ) ta giảm sum đi 1 đơn_vị .\n1 dãy ngoặc là dãy ngoặc đúng nếu thỏa_mãn 2 điều_kiện sau : Không có thời_điểm nào sum nhỏ hơn 0 Đến cuối_cùng , sum bằng 0 .\nĐồng_thời , nếu làm như_trên , độ sâu của dãy ngoặc chính là giá_trị tối đã của sum trong quá_trình trên .\nTừ nhận_xét trên , ta tìm_ra công_thức f(n , h) = f(n - 1 , h - 1) + f(n - 1 , h + 1) trong đó f(n , h) là số dãy mà phần còn_lại cần xây_dựng có độ_dài n và tổng hiện_tại (sum) là h .\nMục_tiêu của chúng_ta là tính f(n , 0) .\nTất_nhiên độ phức_tạp của hàm f là quá lớn .\nBây_giờ , gọi f(n , h , h_0) là số dãy độ_dài n bắt_đầu_từ tổng h và kết_thúc tại tổng h_0 .\nXét các trường_hợp : Nếu n = 0 : trả về 1 nếu h=h_0 , trả về 0 nếu ngược_lại .\nNếu n = 2 k : f(2 k , h , h_0) = \\sumf(k , h , i) f(k , i , h_0) với mọi i trong_khoảng 0 , L .\nNếu n = 2 k + 1 : f(2 k+1 , h , h_0) = f(2 k , h-1 , h_0) + f(2 k , h+1 , h_0) .\nNgoài_ra , chú_ý đến trường_hợp sau : nếu hlt;0 hoặc hgt;L thì trả về 0 .\nMục_tiêu của ta là tính f(n , 0 , 0) .\nĐộ phức_tạp của phương_pháp này là \\mathcalO(L3 log n) , nhanh bằng với nhân ma_trận .\nChú_ý rằng ta chỉ_có \\mathcalO(L2 log n) trạng_thái , không_phải là \\mathcalO(L2 n) .\nChẳng_hạn khi n=100 , các giá_trị của n sẽ nằm trong tập sau : 100 , 50 , 25 , 24 , 12 , 6 , 3 , 2 , 1 , 0 .\nThế nên n chỉ nhận khoảng 2log n giá_trị trong tập_hợp đó .\nTa có_thể dùng độ sâu của hàm f để đại_diện cho n .\nfunction f(n , h , h_0 , Depth) : if h lt; 0 or h gt; L : return 0 if n == 0 : return (h==h_0 ?\n1 : 0) if Savedhh_0Depth : return Valuehh_0Depth if n is even : Result = 0 for i in 0 . . L : Result += f(n/2 , h , i , Depth+1) f(n/2 , i , h_0 , Depth+1) else : Result = f(n-1 , h-1 , h_0 , Depth+1) + f(n-1 , h+1 , h_0 , Depth+1) Savedhh_0Depth = true Valuehh_0Depth = Result input n , L output f(n , 0 , 0 , 0) Tổng_quát Với trường_hợp f(n , a , b , c , . . . ) được tính_từ f(n-1 , a , b , c , . . . ) Có t loại hoa (t \\ge 4) .\n4 trong t loại hoa này là g (gerbera) , o (orchid) , a (azalea) và h (hydrangea) .\nTa dùng các loại hoa này để tạo một dãy n chậu_hoa (n \\le 109) .\nCó vài điều_kiện được đặt ra như_sau : Một chậu h phải được đặt giữa một a và một o Giữa hai chậu g bất_kì , phải có ít_nhất p chậu_hoa loại khác (p \\le 20) .\nGiả_sử có 5 loại hoa (t=5) : a , h , o , g , và b (begonias) .\nVới n=6 , có 2906 dãy chậu đúng , 5 trong số đó là aoaaoo , ahohag , gbbbgo , gbbbog , bbbbbb .\nNhững dãy sau_đây không hợp_lệ : ohoaha (đoạn aha không hợp_lệ vì bên_cạnh h phải có_một o và một a ) , gogbao (giữa hai g phải có ít_nhất 3 hoa khác) , ahoaha (chậu h cuối_cùng không kề với một a và một o ) .\nKhông khó lắm để tìm_ra công_thức quy_hoạch_động : f(n , x , Just) trả về số dãy chậu đúng .\nTrạng_thái n , x , Just được mô_tả như_sau : n là độ_dài còn_lại phải xây_dựng của dãy đang xây_dựng .\nx là số chậu_hoa ta vừa đặt mà khác g , nói_cách_khác tất_cả các chậu_hoa trong_khoảng n+1 đến n+x không_phải là g .\nJust đại_diện cho chậu_hoa vừa đặt (tức là chậu n+1) .\nJust=1 nghĩa_là a hoặc o , Just=2 nghĩa_là h , Just=0 nghĩa_là các loại hoa còn_lại (bao gồm g và t-4 loại hoa khác) .\nHàm quy_hoạch_động trên có_thể chạy với n \\le 10 , 000 .\nBây_giờ tôi sẽ nói cách giải đúng .\nGọi f(n , p , Just , p_0 , Just_0) nghĩa_là : ta xuất_phát từ trạng_thái (n , p , Just) , có bao_nhiêu cách đi đến trạng_thái (0 , p_0 , Just_0) .\nlong f ( int n , int x , int Just ) if ( x gt;= p ) x = p ; if ( Just == 2 ) if ( n == 0 ) return 0 ; return f ( n - 1 , x + 1 , 1 ); else if ( n == 0 ) return 1 ; if ( F x Just .\ncount ( n )) return F x Just n ; long Sum = f ( n - 1 , x + 1 , 1 ) 2 ; if ( Just == 1 ) Sum += f ( n - 1 , x + 1 , 2 ); if ( x gt;= p ) Sum += f ( n - 1 , 0 , 0 ); Sum += f ( n - 1 , x + 1 , 0 ) ( t - 4 ); return F x Just n = Sum % M ; cout lt;lt; f ( n , : : p , 0 ) lt;lt; endl ; Ta có các trường_hợp : Nếu n=0 hoặc n=2 k+1 , ta viết như hàm f cũ .\nNếu n \\ne 0 , nó sẽ gọi đến một trạng_thái khác mà lúc_này n chẵn .\nNgược_lại , n=2 k , f(2 k , p , Just , p_0 , Just_0) = \\sumf(k , p , Just , i , j) f(k , i , j , p_0 , Just_0) với tất_cả bộ i , j hợp_lệ (tức là i nằm trong_khoảng 0 , p , j nằm trong_khoảng 0 , 2) .\nChú_ý tại trường_hợp n=0 , việc n=0 không có_nghĩa đó là kết_thúc của một dãy .\nVì ta chia dãy thành các phần nhỏ hơn , n=0 chỉ_có nghĩa_là kết_thúc của một phần nhỏ .\nVì_thế ta sẽ thêm một biến Stop thuộc kiểu boolean .\nKhi_Stop=true , f(n , p , Just , p_0 , Just_0) = f(n , p , Just) , ngược_lại , tức_là Stop=false , f(n , p , Just , p_0 , Just_0 , Stop) = f(n , p , Just , p_0 , Just_0) .\nmap lt; int , int gt; G 21 3 21 3 2 ; define C pJustp0Just0Stop long g ( int n , int p , int Just , int p0 , int Just0 , bool Stop ) if ( p gt;= : : p ) p = : : p ; if ( n % 2 == 1 n == 0 ) if ( Just == 2 ) if ( n == 0 ) return Stop ?\n0 : p == p0 amp;amp; Just == Just0 ; return g ( n - 1 , p + 1 , 1 , p0 , Just0 , Stop ); else if ( n == 0 ) return Stop ?\n1 : p == p0 amp;amp; Just == Just0 ; if ( G_C .\ncount ( n )) return G_C n ; long Sum = g ( n - 1 , p + 1 , 1 , p0 , Just0 , Stop ) 2 ; if ( Just == 1 ) Sum += g ( n - 1 , p + 1 , 2 , p0 , Just0 , Stop ); if ( p gt;= : : p ) Sum += g ( n - 1 , 0 , 0 , p0 , Just0 , Stop ); Sum += g ( n - 1 , p + 1 , 0 , p0 , Just0 , Stop ) ( t - 4 ); return G_C n = Sum % M ; else if ( G_C .\ncount ( n )) return G_C n ; long Sum = 0 ; for ( int i = 0 ; i lt;= : : p ; i ++ ) for ( int k = 0 ; k lt;= 2 ; k ++ ) long G1 = g ( n / 2 , p , Just , i , k , false ); long G2 = g ( n / 2 , i , k , p0 , Just0 , Stop ); Sum += G1_G2 ; return G_C n = Sum % M ; cout lt;lt; g ( n , : : p , 0 , rand () % 21 , rand () % 3 , true ) lt;lt; endl ; Chú_ý ở code trên , : : p và p là khác_nhau .\n: : p là biến p toàn_cục , tức_là p được nhập từ input .\nCòn p là tham_số ở trong hàm g .\nRand()%21 và rand()%3 là hai số mà ta có_thể bỏ_qua giá_trị của chúng (khi nào mà Stop=true thì p0 và Just0 không có_ý nghĩa) .\nĐộ phức_tạp ở code trên là \\mathcalO(p3 log2 n) .\nThực_tế , ta có_thể không dùng map , bằng cách thêm một tham_số là Depth đại_diện cho độ sâu của hàm quy_hoạch_động .\nKhi đó , độ phức_tạp mất đi một thừa_số log n , giảm xuống còn \\mathcalO(p3 log n) .\nCode trên tôi dùng map cho nó dễ_hiểu .\nf(n) = f(n-1) + f(n-2) Bây_giờ , chúng_ta sẽ tính số fibonacci thứ 109 (trong một modulo nào đó) .\nChắc_hẳn là bạn đã biết cách dùng nhân ma_trận , nó khá dễ .\nTuy_nhiên , bây_giờ chúng_ta sẽ thử giải bằng cách không dùng nhân ma_trận .\nXem bài_toán sau : Bạn đang đứng ở điểm n trên trục Ox . Mỗi bước , bạn có_thể di_chuyển sang trái 1 hoặc 2 bước .\nCó bao_nhiêu cách để bạn đi_tới vị_trí 0 ?\nKhông khó để nhận_ra f(n) = f(n-1) + f(n-2) , trong đó f(0)=1 và f(1)=1 .\nThế nên , f(n) là số fibonacci thứ n+1 .\nCó hai trường_hợp : n=2 k , ta có hai lựa_chọn : Lựa_chọn thứ nhất_là nhảy từ 2 k đến k rồi nhảy từ k đến 0 .\nLựa chon thứ_hai là nhảy từ 2 k đến k+1 , sau_đó di_chuyển sang trái 2 bước , tức_là từ k+1 đến k-1 , rồi nhảy từ k-1 đến 0 (chú ý ta không_hề nhảy vào ô thứ k) .\nThế nên , f(2 k) = f(k) f(k) + f(k-1) f(k-1) .\nn=2 k+1 , bây_giờ ta chia dãy thành hai đoạn 0 . . k và k . . n (đoạn thứ nhất độ_dài k+1 , đoạn thứ_hai dài k) , ta lại có hai lựa_chọn : Lựa_chọn thứ nhất_là nhảy từ n đến k rồi nhảy từ k đến 0 .\nLựa_chọn thứ_hai là nhảy từ n đến k+1 , di_chuyển sang trái 2 bước , rồi nhảy từ k-1 đến 0 .\nThế nên f(2 k+1) = f(k) f(k+1) + f(k-1) f(k) .\nLúc_này độ phức_tạp là \\mathcalO(log n) .\nBởi_vì với mỗi độ sâu , chỉ_có tối_đa 4 giá_trị_n .\nmap lt; long , long gt; F ; F 0 = F 1 = 1 ; long f ( long n ) if ( F .\ncount ( n )) return F n ; long k = n / 2 ; if ( n % 2 == 0 ) // n=2k return F n = ( f ( k ) f ( k ) + f ( k - 1 ) f ( k - 1 )) % M ; else // n=2k+1 return F n = ( f ( k ) f ( k + 1 ) + f ( k - 1 ) f ( k )) % M ;\n", "tagged": "Tác_giả/N :/CH Nguyễn_Tiến/Np Trung_Kiên/Np Đôi/M lời/N về/E tác_giả/N :/CH Nguyễn_Tiến/Np Trung_Kiên/Np là/V cựu_học_sinh/Np Chuyên/A Tổng_Hợp/V ,/CH với/E 1/M HCĐ_IOI/Np năm/N 2014/M và/Cc 1/M HCB_IOI/Np năm/N 2015/M ./CH\nKiên/Np còn/R nổi_tiếng/A với/E blog/Np chứa/V code/Np nhiều/A thuật_toán/N và/Cc series/Np Free/Np contest/Np ./CH\nTable/Np of_Contents/Np Giới_thiệu/V Bắt_đầu/V bằng/E ví_dụ/C đơn_giản/A nhất/A Tổng_quát/Np f(n)/Np =/CH f(n-1)/Np +/CH f(n-2)/Np Giới_thiệu/V Nhân/N ma_trận/N thật_sự/A hữu_dụng/Np ./CH\nCó/V nhiều/A bài_toán/N khi/N n/Ny nhỏ/A ,/CH ta/P dùng/V DP/Np (/CH Dynamic_Programming/Np -/CH Quy_Hoạch_Động/Np )/CH để/E giải/N ./CH\nNhưng/C khi/N n/Ny lớn/A (khoảng/Np 109)/Np ,/CH ta/P phải/V dùng/V nhân/N ma_trận/N để/E giảm/V độ/N phức_tạp/A ./CH\nTrong/E quá_trình/N code/Np nhân/N ma_trận/N ,/CH việc/N sinh_ra/V ma_trận/N gốc/N không_phải/Np lúc/N nào/P cũng/R đơn_giản/A ./CH\nTôi/P đã/R tìm_ra/Np một/M phương_pháp/N tốt/A để/E giải/N những/L bài_toán/N này/P mà/C không/R cần/V nhân/N ma_trận/N ./CH\nKhi/N dùng/V phương_pháp/N này/P ,/CH ta/P không/R cần/V phải/V sinh/V ma_trận/N gốc/N và/Cc không/R cần/V cài/V phép_toán/Np nhân/N hai/M ma_trận/N A_B/Np và/Cc luỹ_thừa/Np ma_trận/N Ak/Np ./CH Tuy_nhiên/C ,/CH phương_pháp/N này/P chỉ/R dùng/V được/V trong/E các/L bài_toán/N đếm/V ,/CH nghĩa_là/V nó/P không_thể/R hoàn_toàn/A thay_thế/V nhân/N ma_trận/N ./CH\nBắt_đầu/V bằng/E ví_dụ/C đơn_giản/A nhất/A Để/E ví_dụ/C ,/CH tôi/P sẽ/R dùng/V bài_toán/N sau/E :/CH Đếm/V xem/V có/V bao_nhiêu/P dãy/Nc ngoặc/Np đúng/A độ_dài/Np n/Ny mà/C độ/N sâu/A không/R quá/R L/Ny ./CH\n(n/Np \\le/Np 109/M ,/CH L/Ny \\le/Np 10)/Np ./CH\nVí_dụ/C ,/CH khi/N n/Ny =/CH 4/M và/Cc L/Ny =/CH 1/M ,/CH thì/C ()()/Np là/V dãy/Nc ngoặc/Np đúng/A duy_nhất/A thoả_mãn/V ,/CH còn/R (())/Np ,/CH ((()/Np ,/CH và/Cc ))((/Np thì/C không/R thoả_mãn/V ./CH\nBài_toán/N này/P có_thể/R giải/N bằng/E phương_pháp/N Quy_hoạch_động/Np như_sau/Np :/CH Nhận_xét/N :/CH Nếu/C ta/P đi_qua/Np lần_lượt/R từng/R ký_tự/Np của/E dãy/Nc ngoặc/Np và/Cc duy_trì/V một/M biến/V sum/Np :/CH Khi/N gặp/V (/CH ta/P tăng/V sum/Np lên/V 1/M đơn_vị/N ./CH\nKhi/N gặp/V )/CH ta/P giảm/V sum/Np đi/V 1/M đơn_vị/N ./CH\n1/M dãy/Nc ngoặc/Np là/V dãy/Nc ngoặc/Np đúng/A nếu/C thỏa_mãn/V 2/M điều_kiện/N sau/E :/CH Không/R có/V thời_điểm/N nào/P sum/Np nhỏ/A hơn/A 0/M Đến/E cuối_cùng/A ,/CH sum/Np bằng/E 0/M ./CH\nĐồng_thời/R ,/CH nếu/C làm/V như_trên/Np ,/CH độ/N sâu/A của/E dãy/Nc ngoặc/Np chính/T là/V giá_trị/N tối/N đã/R của/E sum/Np trong/E quá_trình/N trên/E ./CH\nTừ/E nhận_xét/N trên/E ,/CH ta/P tìm_ra/Np công_thức/N f(n/Np ,/CH h)/Np =/CH f(n/Np -/CH 1/M ,/CH h/Ny -/CH 1)/Np +/CH f(n/Np -/CH 1/M ,/CH h/Ny +/CH 1)/Np trong/E đó/P f(n/Np ,/CH h)/Np là/V số/N dãy/Nc mà/C phần/N còn_lại/Np cần/V xây_dựng/V có/V độ_dài/Np n/Ny và/Cc tổng/N hiện_tại/N (sum)/Np là/V h/Ny ./CH\nMục_tiêu/N của/E chúng_ta/P là/V tính/V f(n/Np ,/CH 0)/Np ./CH\nTất_nhiên/A độ/N phức_tạp/A của/E hàm/Np f/Np là/V quá/R lớn/A ./CH\nBây_giờ/P ,/CH gọi/V f(n/Np ,/CH h/Ny ,/CH h_0)/Np là/V số/N dãy/Nc độ_dài/Np n/Ny bắt_đầu_từ/Np tổng/N h/Ny và/Cc kết_thúc/V tại/E tổng/N h_0/Np ./CH\nXét/V các/L trường_hợp/N :/CH Nếu/C n/Ny =/CH 0/M :/CH trả/V về/E 1/M nếu/C h=h_0/Np ,/CH trả/V về/E 0/M nếu/C ngược_lại/X ./CH\nNếu/C n/Ny =/CH 2/M k/N :/CH f(2/Np k/N ,/CH h/Ny ,/CH h_0)/Np =/CH \\sumf(k/Np ,/CH h/Ny ,/CH i)/Np f(k/Np ,/CH i/M ,/CH h_0)/Np với/E mọi/L i/M trong_khoảng/Np 0/M ,/CH L/Ny ./CH\nNếu/C n/Ny =/CH 2/M k/N +/CH 1/M :/CH f(2/Np k+1/Np ,/CH h/Ny ,/CH h_0)/Np =/CH f(2/Np k/N ,/CH h-1/Np ,/CH h_0)/Np +/CH f(2/Np k/N ,/CH h+1/Np ,/CH h_0)/Np ./CH\nNgoài_ra/X ,/CH chú_ý/V đến/E trường_hợp/N sau/E :/CH nếu/C hlt;0/Np hoặc/Cc hgt;L/Np thì/C trả/V về/E 0/M ./CH\nMục_tiêu/N của/E ta/P là/V tính/V f(n/Np ,/CH 0/M ,/CH 0)/Np ./CH\nĐộ/N phức_tạp/A của/E phương_pháp/N này/P là/V \\mathcalO(L3/Np log/Np n)/Np ,/CH nhanh/A bằng/E với/E nhân/N ma_trận/N ./CH\nChú_ý/V rằng/C ta/P chỉ_có/Np \\mathcalO(L2/Np log/Np n)/Np trạng_thái/N ,/CH không_phải/Np là/V \\mathcalO(L2/Np n)/Np ./CH\nChẳng_hạn/X khi/N n=100/Np ,/CH các/L giá_trị/N của/E n/Ny sẽ/R nằm/V trong/E tập/V sau/E :/CH 100/M ,/CH 50/M ,/CH 25/M ,/CH 24/M ,/CH 12/M ,/CH 6/M ,/CH 3/M ,/CH 2/M ,/CH 1/M ,/CH 0/M ./CH\nThế/P nên/C n/Ny chỉ/R nhận/V khoảng/N 2log/Np n/Ny giá_trị/N trong/E tập_hợp/N đó/P ./CH\nTa/P có_thể/R dùng/V độ/N sâu/A của/E hàm/Np f/Np để/E đại_diện/N cho/E n/Ny ./CH\nfunction/Np f(n/Np ,/CH h/Ny ,/CH h_0/Np ,/CH Depth)/Np :/CH if/Np h/Ny lt;/Np 0/M or/Np h/Ny gt;/Np L/Ny :/CH return/Np 0/M if/Np n/Ny ==/Np 0/M :/CH return/Np (h==h_0/Np ?/CH\n1/M :/CH 0)/Np if/Np Savedhh_0Depth/Np :/CH return/Np Valuehh_0Depth/Np if/Np n/Ny is/Np even/Np :/CH Result/Np =/CH 0/M for/Np i/M in/V 0/M ./CH ./CH L/Ny :/CH Result/Np +=/Np f(n/Np ,/CH h/Ny ,/CH i/M ,/CH Depth+1)/Np f(n/Np ,/CH i/M ,/CH h_0/Np ,/CH Depth+1)/Np else/Np :/CH Result/Np =/CH f(n-1/Np ,/CH h-1/Np ,/CH h_0/Np ,/CH Depth+1)/Np +/CH f(n-1/Np ,/CH h+1/Np ,/CH h_0/Np ,/CH Depth+1)/Np Savedhh_0Depth/Np =/CH true/Np Valuehh_0Depth/Np =/CH Result/Np input/Np n/Ny ,/CH L/Ny output/Np f(n/Np ,/CH 0/M ,/CH 0/M ,/CH 0)/Np Tổng_quát/Np Với/E trường_hợp/N f(n/Np ,/CH a/Ni ,/CH b/Ni ,/CH c/Ni ,/CH ./CH ./CH ./CH )/CH được/V tính_từ/Np f(n-1/Np ,/CH a/Ni ,/CH b/Ni ,/CH c/Ni ,/CH ./CH ./CH ./CH )/CH Có/V t/Nu loại/N hoa/N (t/Np \\ge/Np 4)/Np ./CH\n4/M trong/E t/Nu loại/N hoa/N này/P là/V g/Nu (gerbera)/Np ,/CH o/Nc (orchid)/Np ,/CH a/Ni (azalea)/Np và/Cc h/Ny (hydrangea)/Np ./CH\nTa/P dùng/V các/L loại/N hoa/N này/P để/E tạo/V một/M dãy/Nc n/Ny chậu_hoa/Np (n/Np \\le/Np 109)/Np ./CH\nCó/V vài/L điều_kiện/N được/V đặt/V ra/V như_sau/Np :/CH Một/M chậu/Np h/Ny phải/V được/V đặt/V giữa/N một/M a/Ni và/Cc một/M o/Nc Giữa/N hai/M chậu/Np g/Nu bất_kì/R ,/CH phải/V có/V ít_nhất/A p/Ny chậu_hoa/Np loại/N khác/A (p/Np \\le/Np 20)/Np ./CH\nGiả_sử/Np có/V 5/M loại/N hoa/N (t=5)/Np :/CH a/Ni ,/CH h/Ny ,/CH o/Nc ,/CH g/Nu ,/CH và/Cc b/Ni (begonias)/Np ./CH\nVới/E n=6/Np ,/CH có/V 2906/Np dãy/Nc chậu/Np đúng/A ,/CH 5/M trong/E số/N đó/P là/V aoaaoo/Np ,/CH ahohag/Np ,/CH gbbbgo/Np ,/CH gbbbog/Np ,/CH bbbbbb/Np ./CH\nNhững/L dãy/Nc sau_đây/Np không/R hợp_lệ/A :/CH ohoaha/Np (đoạn/Np aha/Np không/R hợp_lệ/A vì/E bên_cạnh/R h/Ny phải/V có_một/Np o/Nc và/Cc một/M a/Ni )/CH ,/CH gogbao/Np (giữa/Np hai/M g/Nu phải/V có/V ít_nhất/A 3/M hoa/N khác)/Np ,/CH ahoaha/Np (chậu/Np h/Ny cuối_cùng/A không/R kề/V với/E một/M a/Ni và/Cc một/M o/Nc )/CH ./CH\nKhông/R khó/A lắm/R để/E tìm_ra/Np công_thức/N quy_hoạch_động/Np :/CH f(n/Np ,/CH x/CH ,/CH Just)/Np trả/V về/E số/N dãy/Nc chậu/Np đúng/A ./CH\nTrạng_thái/N n/Ny ,/CH x/CH ,/CH Just/Np được/V mô_tả/V như_sau/Np :/CH n/Ny là/V độ_dài/Np còn_lại/Np phải/V xây_dựng/V của/E dãy/Nc đang/R xây_dựng/V ./CH\nx/CH là/V số/N chậu_hoa/Np ta/P vừa/R đặt/V mà/C khác/A g/Nu ,/CH nói_cách_khác/Np tất_cả/P các/L chậu_hoa/Np trong_khoảng/Np n+1/Np đến/E n+x/Np không_phải/Np là/V g/Nu ./CH\nJust/Np đại_diện/N cho/E chậu_hoa/Np vừa/R đặt/V (tức/Np là/V chậu/Np n+1)/Np ./CH\nJust=1/Np nghĩa_là/V a/Ni hoặc/Cc o/Nc ,/CH Just=2/Np nghĩa_là/V h/Ny ,/CH Just=0/Np nghĩa_là/V các/L loại/N hoa/N còn_lại/Np (bao/Np gồm/V g/Nu và/Cc t-4/Np loại/N hoa/N khác)/Np ./CH\nHàm/Np quy_hoạch_động/Np trên/E có_thể/R chạy/V với/E n/Ny \\le/Np 10/M ,/CH 000/Np ./CH\nBây_giờ/P tôi/P sẽ/R nói/V cách/N giải/N đúng/A ./CH\nGọi/V f(n/Np ,/CH p/Ny ,/CH Just/Np ,/CH p_0/Np ,/CH Just_0)/Np nghĩa_là/V :/CH ta/P xuất_phát/V từ/E trạng_thái/N (n/Np ,/CH p/Ny ,/CH Just)/Np ,/CH có/V bao_nhiêu/P cách/N đi/V đến/E trạng_thái/N (0/Np ,/CH p_0/Np ,/CH Just_0)/Np ./CH\nlong/Np f/Np (/CH int/Np n/Ny ,/CH int/Np x/CH ,/CH int/Np Just/Np )/CH if/Np (/CH x/CH gt;=/Np p/Ny )/CH x/CH =/CH p/Ny ;/CH if/Np (/CH Just/Np ==/Np 2/M )/CH if/Np (/CH n/Ny ==/Np 0/M )/CH return/Np 0/M ;/CH return/Np f/Np (/CH n/Ny -/CH 1/M ,/CH x/CH +/CH 1/M ,/CH 1/M );/CH else/Np if/Np (/CH n/Ny ==/Np 0/M )/CH return/Np 1/M ;/CH if/Np (/CH F/Np x/CH Just/Np ./CH\ncount/Np (/CH n/Ny ))/Np return/Np F/Np x/CH Just/Np n/Ny ;/CH long/Np Sum/Np =/CH f/Np (/CH n/Ny -/CH 1/M ,/CH x/CH +/CH 1/M ,/CH 1/M )/CH 2/M ;/CH if/Np (/CH Just/Np ==/Np 1/M )/CH Sum/Np +=/Np f/Np (/CH n/Ny -/CH 1/M ,/CH x/CH +/CH 1/M ,/CH 2/M );/CH if/Np (/CH x/CH gt;=/Np p/Ny )/CH Sum/Np +=/Np f/Np (/CH n/Ny -/CH 1/M ,/CH 0/M ,/CH 0/M );/CH Sum/Np +=/Np f/Np (/CH n/Ny -/CH 1/M ,/CH x/CH +/CH 1/M ,/CH 0/M )/CH (/CH t/Nu -/CH 4/M );/CH return/Np F/Np x/CH Just/Np n/Ny =/CH Sum/Np %/CH M/Nu ;/CH cout/Np lt;lt;/Np f/Np (/CH n/Ny ,/CH :/CH :/CH p/Ny ,/CH 0/M )/CH lt;lt;/Np endl/Np ;/CH Ta/P có/V các/L trường_hợp/N :/CH Nếu/C n=0/Np hoặc/Cc n=2/Np k+1/Np ,/CH ta/P viết/V như/C hàm/Np f/Np cũ/A ./CH\nNếu/C n/Ny \\ne/Np 0/M ,/CH nó/P sẽ/R gọi/V đến/E một/M trạng_thái/N khác/A mà/C lúc_này/Np n/Ny chẵn/Np ./CH\nNgược_lại/X ,/CH n=2/Np k/N ,/CH f(2/Np k/N ,/CH p/Ny ,/CH Just/Np ,/CH p_0/Np ,/CH Just_0)/Np =/CH \\sumf(k/Np ,/CH p/Ny ,/CH Just/Np ,/CH i/M ,/CH j)/Np f(k/Np ,/CH i/M ,/CH j/Np ,/CH p_0/Np ,/CH Just_0)/Np với/E tất_cả/P bộ/N i/M ,/CH j/Np hợp_lệ/A (tức/Np là/V i/M nằm/V trong_khoảng/Np 0/M ,/CH p/Ny ,/CH j/Np nằm/V trong_khoảng/Np 0/M ,/CH 2)/Np ./CH\nChú_ý/V tại/E trường_hợp/N n=0/Np ,/CH việc/N n=0/Np không/R có_nghĩa/A đó/P là/V kết_thúc/V của/E một/M dãy/Nc ./CH\nVì/E ta/P chia/V dãy/Nc thành/V các/L phần/N nhỏ/A hơn/A ,/CH n=0/Np chỉ_có/Np nghĩa_là/V kết_thúc/V của/E một/M phần/N nhỏ/A ./CH\nVì_thế/C ta/P sẽ/R thêm/V một/M biến/V Stop/Np thuộc/V kiểu/N boolean/Np ./CH\nKhi_Stop=true/Np ,/CH f(n/Np ,/CH p/Ny ,/CH Just/Np ,/CH p_0/Np ,/CH Just_0)/Np =/CH f(n/Np ,/CH p/Ny ,/CH Just)/Np ,/CH ngược_lại/X ,/CH tức_là/V Stop=false/Np ,/CH f(n/Np ,/CH p/Ny ,/CH Just/Np ,/CH p_0/Np ,/CH Just_0/Np ,/CH Stop)/Np =/CH f(n/Np ,/CH p/Ny ,/CH Just/Np ,/CH p_0/Np ,/CH Just_0)/Np ./CH\nmap/Np lt;/Np int/Np ,/CH int/Np gt;/Np G/Nu 21/M 3/M 21/M 3/M 2/M ;/CH define/Np C/Ni pJustp0Just0Stop/Np long/Np g/Nu (/CH int/Np n/Ny ,/CH int/Np p/Ny ,/CH int/Np Just/Np ,/CH int/Np p0/Np ,/CH int/Np Just0/Np ,/CH bool/Np Stop/Np )/CH if/Np (/CH p/Ny gt;=/Np :/CH :/CH p/Ny )/CH p/Ny =/CH :/CH :/CH p/Ny ;/CH if/Np (/CH n/Ny %/CH 2/M ==/Np 1/M n/Ny ==/Np 0/M )/CH if/Np (/CH Just/Np ==/Np 2/M )/CH if/Np (/CH n/Ny ==/Np 0/M )/CH return/Np Stop/Np ?/CH\n0/M :/CH p/Ny ==/Np p0/Np amp;amp;/Np Just/Np ==/Np Just0/Np ;/CH return/Np g/Nu (/CH n/Ny -/CH 1/M ,/CH p/Ny +/CH 1/M ,/CH 1/M ,/CH p0/Np ,/CH Just0/Np ,/CH Stop/Np );/CH else/Np if/Np (/CH n/Ny ==/Np 0/M )/CH return/Np Stop/Np ?/CH\n1/M :/CH p/Ny ==/Np p0/Np amp;amp;/Np Just/Np ==/Np Just0/Np ;/CH if/Np (/CH G_C/Np ./CH\ncount/Np (/CH n/Ny ))/Np return/Np G_C/Np n/Ny ;/CH long/Np Sum/Np =/CH g/Nu (/CH n/Ny -/CH 1/M ,/CH p/Ny +/CH 1/M ,/CH 1/M ,/CH p0/Np ,/CH Just0/Np ,/CH Stop/Np )/CH 2/M ;/CH if/Np (/CH Just/Np ==/Np 1/M )/CH Sum/Np +=/Np g/Nu (/CH n/Ny -/CH 1/M ,/CH p/Ny +/CH 1/M ,/CH 2/M ,/CH p0/Np ,/CH Just0/Np ,/CH Stop/Np );/CH if/Np (/CH p/Ny gt;=/Np :/CH :/CH p/Ny )/CH Sum/Np +=/Np g/Nu (/CH n/Ny -/CH 1/M ,/CH 0/M ,/CH 0/M ,/CH p0/Np ,/CH Just0/Np ,/CH Stop/Np );/CH Sum/Np +=/Np g/Nu (/CH n/Ny -/CH 1/M ,/CH p/Ny +/CH 1/M ,/CH 0/M ,/CH p0/Np ,/CH Just0/Np ,/CH Stop/Np )/CH (/CH t/Nu -/CH 4/M );/CH return/Np G_C/Np n/Ny =/CH Sum/Np %/CH M/Nu ;/CH else/Np if/Np (/CH G_C/Np ./CH\ncount/Np (/CH n/Ny ))/Np return/Np G_C/Np n/Ny ;/CH long/Np Sum/Np =/CH 0/M ;/CH for/Np (/CH int/Np i/M =/CH 0/M ;/CH i/M lt;=/Np :/CH :/CH p/Ny ;/CH i/M ++/Np )/CH for/Np (/CH int/Np k/N =/CH 0/M ;/CH k/N lt;=/Np 2/M ;/CH k/N ++/Np )/CH long/Np G1/Np =/CH g/Nu (/CH n/Ny //CH 2/M ,/CH p/Ny ,/CH Just/Np ,/CH i/M ,/CH k/N ,/CH false/Np );/CH long/Np G2/Np =/CH g/Nu (/CH n/Ny //CH 2/M ,/CH i/M ,/CH k/N ,/CH p0/Np ,/CH Just0/Np ,/CH Stop/Np );/CH Sum/Np +=/Np G1_G2/Np ;/CH return/Np G_C/Np n/Ny =/CH Sum/Np %/CH M/Nu ;/CH cout/Np lt;lt;/Np g/Nu (/CH n/Ny ,/CH :/CH :/CH p/Ny ,/CH 0/M ,/CH rand/Np ()/Np %/CH 21/M ,/CH rand/Np ()/Np %/CH 3/M ,/CH true/Np )/CH lt;lt;/Np endl/Np ;/CH Chú_ý/V ở/E code/Np trên/E ,/CH :/CH :/CH p/Ny và/Cc p/Ny là/V khác_nhau/Np ./CH\n:/CH :/CH p/Ny là/V biến/V p/Ny toàn_cục/Np ,/CH tức_là/V p/Ny được/V nhập/V từ/E input/Np ./CH\nCòn/R p/Ny là/V tham_số/Np ở/E trong/E hàm/Np g/Nu ./CH\nRand()%21/Np và/Cc rand()%3/Np là/V hai/M số/N mà/C ta/P có_thể/R bỏ_qua/V giá_trị/N của/E chúng/P (khi/Np nào/P mà/C Stop=true/Np thì/C p0/Np và/Cc Just0/Np không/R có_ý/Np nghĩa)/Np ./CH\nĐộ/N phức_tạp/A ở/E code/Np trên/E là/V \\mathcalO(p3/Np log2/Np n)/Np ./CH\nThực_tế/N ,/CH ta/P có_thể/R không/R dùng/V map/Np ,/CH bằng/E cách/N thêm/V một/M tham_số/Np là/V Depth/Np đại_diện/N cho/E độ/N sâu/A của/E hàm/Np quy_hoạch_động/Np ./CH\nKhi/N đó/P ,/CH độ/N phức_tạp/A mất/V đi/V một/M thừa_số/Np log/Np n/Ny ,/CH giảm/V xuống/V còn/R \\mathcalO(p3/Np log/Np n)/Np ./CH\nCode/Np trên/E tôi/P dùng/V map/Np cho/E nó/P dễ_hiểu/Np ./CH\nf(n)/Np =/CH f(n-1)/Np +/CH f(n-2)/Np Bây_giờ/P ,/CH chúng_ta/P sẽ/R tính/V số/N fibonacci/Np thứ/N 109/M (trong/Np một/M modulo/Np nào/P đó)/Np ./CH\nChắc_hẳn/R là/V bạn/N đã/R biết/V cách/N dùng/V nhân/N ma_trận/N ,/CH nó/P khá/R dễ/A ./CH\nTuy_nhiên/C ,/CH bây_giờ/P chúng_ta/P sẽ/R thử/V giải/N bằng/E cách/N không/R dùng/V nhân/N ma_trận/N ./CH\nXem/V bài_toán/N sau/E :/CH Bạn/N đang/R đứng/V ở/E điểm/N n/Ny trên/E trục/N Ox/Np ./CH Mỗi/L bước/V ,/CH bạn/N có_thể/R di_chuyển/V sang/V trái/Nc 1/M hoặc/Cc 2/M bước/V ./CH\nCó/V bao_nhiêu/P cách/N để/E bạn/N đi_tới/Np vị_trí/N 0/M ?/CH\nKhông/R khó/A để/E nhận_ra/Np f(n)/Np =/CH f(n-1)/Np +/CH f(n-2)/Np ,/CH trong/E đó/P f(0)=1/Np và/Cc f(1)=1/Np ./CH\nThế/P nên/C ,/CH f(n)/Np là/V số/N fibonacci/Np thứ/N n+1/Np ./CH\nCó/V hai/M trường_hợp/N :/CH n=2/Np k/N ,/CH ta/P có/V hai/M lựa_chọn/V :/CH Lựa_chọn/V thứ/N nhất_là/X nhảy/V từ/E 2/M k/N đến/E k/N rồi/C nhảy/V từ/E k/N đến/E 0/M ./CH\nLựa/V chon/Np thứ_hai/N là/V nhảy/V từ/E 2/M k/N đến/E k+1/Np ,/CH sau_đó/Np di_chuyển/V sang/V trái/Nc 2/M bước/V ,/CH tức_là/V từ/E k+1/Np đến/E k-1/Np ,/CH rồi/C nhảy/V từ/E k-1/Np đến/E 0/M (chú/Np ý/N ta/P không_hề/Np nhảy/V vào/E ô/N thứ/N k)/Np ./CH\nThế/P nên/C ,/CH f(2/Np k)/Np =/CH f(k)/Np f(k)/Np +/CH f(k-1)/Np f(k-1)/Np ./CH\nn=2/Np k+1/Np ,/CH bây_giờ/P ta/P chia/V dãy/Nc thành/V hai/M đoạn/Nc 0/M ./CH ./CH k/N và/Cc k/N ./CH ./CH n/Ny (đoạn/Np thứ/N nhất/A độ_dài/Np k+1/Np ,/CH đoạn/Nc thứ_hai/N dài/A k)/Np ,/CH ta/P lại/R có/V hai/M lựa_chọn/V :/CH Lựa_chọn/V thứ/N nhất_là/X nhảy/V từ/E n/Ny đến/E k/N rồi/C nhảy/V từ/E k/N đến/E 0/M ./CH\nLựa_chọn/V thứ_hai/N là/V nhảy/V từ/E n/Ny đến/E k+1/Np ,/CH di_chuyển/V sang/V trái/Nc 2/M bước/V ,/CH rồi/C nhảy/V từ/E k-1/Np đến/E 0/M ./CH\nThế/P nên/C f(2/Np k+1)/Np =/CH f(k)/Np f(k+1)/Np +/CH f(k-1)/Np f(k)/Np ./CH\nLúc_này/Np độ/N phức_tạp/A là/V \\mathcalO(log/Np n)/Np ./CH\nBởi_vì/E với/E mỗi/L độ/N sâu/A ,/CH chỉ_có/Np tối_đa/A 4/M giá_trị_n/Np ./CH\nmap/Np lt;/Np long/Np ,/CH long/Np gt;/Np F/Np ;/CH F/Np 0/M =/CH F/Np 1/M =/CH 1/M ;/CH long/Np f/Np (/CH long/Np n/Ny )/CH if/Np (/CH F/Np ./CH\ncount/Np (/CH n/Ny ))/Np return/Np F/Np n/Ny ;/CH long/Np k/N =/CH n/Ny //CH 2/M ;/CH if/Np (/CH n/Ny %/CH 2/M ==/Np 0/M )/CH //CH n=2k/Np return/Np F/Np n/Ny =/CH (/CH f/Np (/CH k/N )/CH f/Np (/CH k/N )/CH +/CH f/Np (/CH k/N -/CH 1/M )/CH f/Np (/CH k/N -/CH 1/M ))/Np %/CH M/Nu ;/CH else/Np //CH n=2k+1/Np return/Np F/Np n/Ny =/CH (/CH f/Np (/CH k/N )/CH f/Np (/CH k/N +/CH 1/M )/CH +/CH f/Np (/CH k/N -/CH 1/M )/CH f/Np (/CH k/N ))/Np %/CH M/Nu ;/CH\n", "title": "Khử nhân ma trận\n", "link": "http://vnoi.info/wiki/algo/trick/counting-without-matrix-multiplication\n"}