{"content": "Bài viết bởi leadhyena_inran .\nNguồn : Topcoder_Table of_Contents Tư_duy theo lối mòn (Pattern Mining and Wrong_Mindset)_Coding_Kata Chiến_thuật định_hướng giải bài (Approach Tactics) Chia_nhỏ vấn_đề Kế_hoạch debug Atomic_Code_Giải bài là một nghệ_thuật , nó có_thể gây khó_khăn cho cả những coder kì_cựu nhất cũng_như những người mới học .\nĐể tìm cách giải phù_hợp , chúng_ta phải_biết kết_hợp nhiều phương_pháp khác_nhau như cảm_nhận bằng trực_giác , sáng_tạo và thậm_chí là may_mắn .\nCảm_giác bất_lực trước những bài khó thường làm chúng_ta nản_chí , và có_thể bỏ_cuộc giữa_chừng .\nTuy_nhiên , không gì là không_thể nếu bạn có đủ quyết_tâm cũng_như kĩ_năng cần_thiết .\nBởi lí_do đó , bài hướng_dẫn này sẽ đưa_ra những kĩ_năng để giúp các bạn chọn những hướng tiếp_cận rõ_ràng cho những bài_toán như_vậy .\nTư_duy theo lối mòn (Pattern Mining and Wrong_Mindset) Chúng_ta rất dễ hướng các suy_nghĩ vào việc tìm giải_thuật dựa trên từng dạng của đề_bài .\nVới những người đã làm khá nhiều bài_tập , họ sẽ nhận_ra được dạng của những bài_toán khác_nhau , và khi đọc thấy một bài_toán nào_đó quen_thuộc , thì suy_nghĩ hiện ra ngay_tức_khắc trong đầu là : “Ồ , đây là dạng bài X , nên sử_dụng thuật_toán này , áp_dụng kĩ_thuật này” .\nCách này khá hữu_ích đối_với những người mới học : nếu chưa thể giải được , thì họ sẽ tập_trung vào luyện_tập với những dạng đề_bài này để khiến nó trở_thành một dạng bài quen_thuộc .\nTuy_nhiên , cách tiếp_cận này cũng có nhược_điểm khá lớn .\nCó những lúc ta tưởng rằng mình đang code đúng_hướng nhờ vào lối tư_duy như_vậy , nhưng khi test thử thì không khớp một ví_dụ nào cả .\nLúc_đó đọc kĩ lại đề_bài mới nhận_ra : mình chưa gặp \"dạng\" này bao_giờ và bế_tắc hoàn_toàn .\nBạn sẽ trải_nghiệm điều này nhiều lần khi giải các bài_toán \"gốc\" và độc_đáo , và kể_cả những coder \"lão làng\" cũng có lúc bị chính kinh_nghiệm của mình đánh_lừa .\nTư_duy lối mòn thường khiến ta ảo_tưởng rằng mọi bài_toán đều đã được \"phân loại\" và ta chỉ_cần áp_dụng \"đúng thuật\" , trong_khi thực_tế điều này bất_khả_thi .\nKhi ta tạm quên hết những lối mòn đó và sử_dụng hết khả_năng suy_nghĩ , phân_tích , trình_độ của ta sẽ được cải_thiện rất nhiều .\nCoding_Kata_Đây là thử_thách đầu_tiên : hãy chọn bất_cứ bài_tập nào trong Practice_Rooms mà bạn chưa làm .\nHốt nó , cho_dù phải mất bao_nhiêu thời_gian , và hoàn_thành nó (có thể sử_dụng editorial nếu quá \"bí\") .\nSau khi làm_xong (accepted) , hãy xem bạn mất bao_nhiêu thời_gian để giải .\nTiếp_theo , xóa hết code và gõ lại lần nữa , check thời_gian sau khi làm_xong .\nTiếp_tục lần thứ 3 như_thế .\nThời_gian hoàn_thành lần đầu_tiên là thời_gian để giải bài_toán khi bạn không có bất_cứ hướng suy_nghĩ hay cách tiếp_cận nào về bài_toán .\nThời_gian hoàn_thành lần thứ 2 là thời_gian lần đầu_tiên trừ đi thời_gian bạn dùng để đọc và hiểu đề (đừng quá ngạc_nhiên với số lỗi bạn lặp_lại ở lần này) .\nCòn thời_gian hoàn_thành lần cuối là thời_gian bạn có_thể giải được trong_lúc thi thật nếu tìm_thấy được cách tiếp_cận đúng ngay sau khi đọc đề_bài .\nViệc giải bài với thời_gian của lần cuối_cùng hoàn_toàn có_thể làm được (thậm chí không cần khả_năng gõ phím nhanh) .\nNhưng điều mà bạn cũng nhận_ra ở lần giải thứ 3 là cảm_giác bạn đã biết trước chiến_thuật , nên code thế_nào , dễ bị bug nhất ở những đoạn nào , . . .\nĐó là cảm_giác để có được một_cách tiếp_cận đúng .\nỞ nhiều môn võ , có_một thuật_ngữ luyện_tập gọi_là kata .\nNgười tập sẽ thi triển những đòn thế được kịch_bản sẵn và cố phòng_thủ trước các đòn tấn_công - cũng đã được kịch_bản .\nThoạt nghe thì phương_pháp này chả có tác_dụng gì vì sẽ chẳng lúc nào đánh_nhau được \"tiện\" như_vậy .\nHơn_nữa có_vẻ như nó khuyến_khích lối tư_duy , luyện_tập theo lối mòn được đề_cập ở trên .\nThế_nhưng kata sẽ cho người tập cảm_giác của việc có_một kế_hoạch rõ_ràng và khuyến_khích ý_chí .\nTin_học cũng_như vậy; chỉ sau khi code 3 lần một dạng bài trong một_thời gian đủ nhiều ta mới nhuần_nhuyễn hết mọi mặt của bài_toán - định_hướng , trình_bày code và debug .\nChiến_thuật định_hướng giải bài (Approach Tactics) Bây_giờ bạn đã biết_việc định_hướng giải bài nó như_thế nào và nó bao_gồm những gì , bạn sẽ nhận_ra rằng trước_đây bạn đã biết khá nhiều cách để tiếp_cận một bài_toán .\nDạng như “Tôi dùng Quy_hoạch_động (dynamic programming) cho bài đó” , “Tôi có_thể dùng tham_lam (greedy) để giải bài này không ? ” , “Đừng nói với tôi rằng duyệt (brute-force) có_thể ăn bài này” .\nThật_ra bạn đang dùng sai những từ_ngữ ở đây , vì bạn không_thể phân_loại mỗi bài_tập chỉ với tham hay duyệt .\nCó rất rất nhiều dạng bài_tập , và cũng rất nhiều cách tiếp_cận , và thậm_chí với mỗi hướng tiếp_cận có_thể tồn_tại rất nhiều cách thể_hiện khác_nhau .\nCách dùng từ như_vậy chỉ tổng_quát được những bước_đi lớn để đến được đáp_án .\nTrong_TopCoder có nhiều bài có lời_giải hoàn_chỉnh và chú_thích cặn_kẽ .\nLần tham_gia contest tiếp_theo , bạn hãy thử tìm một bài viết tốt và nghiên_cứu các bước tiếp_cận cụ_thể của bài_toán mà tác_giả đã chỉ ra .\nBạn sẽ bắt_đầu chú_ý rằng có_một tính_chất nào_đó của bài_toán sẽ gợi ra cho bạn một_cách tiếp_cận , hay những cách biến_đổi , chuyển_hướng , phân_tích , . . .\nlàm_bạn đến gần hơn với đáp_án , hay ít_nhất giúp bạn không nghĩ theo hướng sai .\nKhi tìm một_cách tiếp_cận , hãy thử tất_cả những hướng đi bạn có , như kiểu bạn đã gõ sẵn code hết trong đầu - bạn thuyết_phục bản_thân rằng hướng đi của bạn là đúng .\nNhững coder có kiến_thức toán cơ_bản tốt sẽ có_thể biết được hướng suy_nghĩ này , bởi_vì những hướng tiếp_cận đó rất giống với kĩ_năng chứng_minh toán_học .\nVới những kì_thủ họ sẽ thấy nó giống_như việc nghĩ trước các nước_cờ hay những người thiết_kế ứng_dụng có_thể đã quen với nó trong_khi làm_việc với các design patterns (thuật ngữ trong lập_trình ứng_dụng , chỉ những phương_pháp thiết_kế hiệu_quả đã được nghiên_cứu kĩ) . . .\nĐể luyện_tập cách tư_duy và tìm_ra phương_pháp phù_hợp với mình , ghi_chú lại hướng giải của các bài_toán là rất quan_trọng .\nSau_đó hãy viết một bài phân_tích dựa trên những gì bạn đã làm , càng chi_tiết càng tốt , để những người khác có_thể biết được cách bạn suy_nghĩ như_thế nào .\nViệc viết lại như_thế không chỉ giúp bạn hiểu rõ hơn cách tiếp_cận của mình , mà_còn tìm_ra được những sai_lầm của bản_thân và cải_thiện nó .\nHãy nhớ rằng , rất khó để cải_thiện được những điều mà bạn còn chưa hiểu .\nChia_nhỏ vấn_đề Hãy bàn về một trong những cách tiếp_cận phổ_biến nhất : chia_nhỏ vấn_đề ra , còn được gọi_là tiếp_cận từ trên xuống (top-down programming) .\nÝ_tưởng cơ_bản ở đây là code của bạn phải được thực_hiện theo thứ_tự , nên hãy bắt_đầu bằng việc suy_nghĩ xem phần chương_trình chính sẽ cần những gì trước_khi xây_dựng những hàm con .\nĐiều này cho_phép bạn thấy được tổng_thể chương_trình , cũng_như chia_nhỏ vấn_đề từ những thứ phức_tạp cho_đến đơn_giản .\nMột ví_dụ áp_dụng cách tiếp_cận này .\nRound 2 , MatArith , topcoder Invitational 2002 , bài_toán yêu_cầu bạn phải tính giá_trị biểu_thức có sử_dụng ma_trận .\nĐể có được những con_số chúng_ta phải xử_lý xâu (vì input là string) , tính_toán dựa trên đó , và trả ngược về string .\nNên bạn cần một hàm print để in kết_quả , một hàm parse để xử_lý xâu và một hàm calc để xử_lí toán_học .\nKhông cần suy_nghĩ quá phức_tạp , Nếu chúng_ta có đủ 3 hàm đó thì vấn_đề sẽ được giải_quyết chỉ trong 1 dòng code : public String calculate ( String_A , String_B , String_C , String eval ) return print ( calc ( parse ( A ) , parse ( B ) , parse ( C ) , eval )); Cái hay của các tiếp_cận này là tạo ra một hệ_thống cấp_bậc các hàm , hàm trên sẽ dựa vào kết_quả của hàm dưới để chạy .\nBây_giờ công_việc đã được chia làm 3 phần : tạo hàm parse , hàm print , và hàm calc .\nNếu bạn chia_bài toán thành những bài_toán con đủ nhỏ , bạn sẽ không_phải tốn nhiều thời_gian vào việc suy_nghĩ cho những bước không đơn_giản , bởi_vì nó sẽ trở_nên atomic (sẽ được đề_cập phía dưới) .\nThay vào đó chúng_ta có_thể tập_trung vào hàm_cộng và hàm nhân ma_trận hay hàm đọc dữ_liệu vào sao_cho chính_xác .\nCách tiếp_cận này có_thể ứng_dụng khá hiệu_quả vào những bài_toán đệ_quy .\nToàn_bộ ý_tưởng của đệ_quy đó là chia vấn_đề lớn thành những vấn_đề nhỏ hơn nhưng giống chính_xác với vấn_đề gốc , vậy chúng_ta chỉ_cần giải được một 1 vấn_đề gốc là xong .\nCách tiếp_cận này cũng được sử_dụng rất phổ_biến trong functional programming (một lớp các ngôn_ngữ_lập_trình mà chương_trình được xây_dựng chỉ từ các hàm) .\nCó khá nhiều bài viết đã bàn sâu về vấn_đề này , nhưng ý_tưởng cơ_bản_chính là nếu ta chia_nhỏ bài_toán một_cách đúng_đắn , chương_trình sẽ tự_động gửi tham_số qua mỗi lời gọi hàm , không cần_thiết lưu_trữ dữ_liệu giữa các bước .\nNhưng có_một nhược_điểm là sẽ khó debug hơn .\nKế_hoạch debug Bất_cứ khi_nào có_một cách tiếp_cận , chúng_ta phải luôn có_một kế_hoạch debug cho cách tiếp_cận đó .\nCó rất nhiều khả_năng xảy_ra làm_cho chương_trình chúng_ta chạy sai , bằng cách suy_nghĩ trước các hướng chương_trình sẽ chạy sai , chúng_ta có_thể ngăn_chặn bug trước_khi code .\nHơn_thế_nữa , nếu_không vượt_qua được các test mẫu , chúng_ta sẽ_biết ngay vị_trí thích_hợp để bắt_đầu tìm lỗi .\nCuối_cùng , bằng cách chú_ý đến điểm trọng_yếu nhất , sẽ dễ_dàng hơn để chứng_minh cách tiếp_cận của bạn là đúng .\nVới trường_hợp tiếp_cận top-down , việc chia_nhỏ những phần code thành những hàm con giúp chúng_ta cô_lập những phần code lỗi và chỉ phải sửa_lại code ở một_nơi .\nCũng_như việc test được một tổ_hợp các hàm dễ bị bug nhất .\nCopy và paste nhiều lúc cũng làm_việc sửa_lỗi tốn nhiều công_sức hơn thay_vì viết riêng một hàm con .\nMột kinh_nghiệm nữa cho cách tiếp_cận từ trên xuống là chúng_ta nên tìm bugs bên_trong hàm trước_khi tìm giữa những lời gọi hàm .\nNhững cách này tạo nên một chiến_thuật debug : biết được vị_trí nào cần test trước_tiên , chỗ nào bạn nghĩ là sai và cần kiểm_tra , hay chứng_minh những đoạn code chuẩn và bỏ_qua chúng .\nNếu luyện_tập thường_xuyên , bạn sẽ thấy rằng những kĩ_năng này vô_cùng hữu_ích .\nAtomic_Code_Nếu chúng_ta đi đến một phần code mà chúng_ta không_thể chia_nhỏ được nữa , thì phần đó gọi_là atomic code .\nHi_vọng các bạn đều biết cách code những phần như_vậy , vì đó sẽ là những phần bạn sẽ code thường_xuyên nhất .\nNhưng đừng lo nếu bạn chưa thuần_thục nó , những atomic code khó như_vậy thường làm_cho bài_toán trở_nên thú_vị hơn , và thình_thoảng thấy trước được điều đó sẽ giúp bạn có_một bước_tiến lớn trong việc tìm cách tiếp_cận đúng_đắn , hạn_chế được_việc phung_phí thời_gian cho những cách tiếp_cận sai .\nDạng atomic code bạn viết thường_xuyên nhất đó là dạng tối_giản nhất , nên phần_lớn sẽ có lệnh sẵn trong thư_viện để hỗ_trợ nó .\nViệc sử_dụng thành_thạo thư_viện là một lợi_thế lớn , nó giúp chúng_ta viết được atomic code trong_sáng và rõ_ràng hơn .\nCòn cách nào để tiết_kiệm thời_gian hơn khi bạn biết rằng một phần atomic code khá khó xơi lại là một hàm hay một lớp nào_đó trong thư_viện sẵn_có ?\nMình sẽ gọi dạng atomic code thứ_hai mà bạn sẽ viết là language techniques (một dạng kĩ_năng về ngôn ngữ) .\nĐó là những phần code nhỏ mà bạn thuộc_lòng để giải_quyết một_phép xử_lí nào_đó , như tìm chỉ_số của phần_tử nhỏ nhất đầu_tiên trong mảng , hay tách một xâu ra thành những chuỗi con mà không có khoảng trắng .\nNhững kĩ_thuật trên rất cần_thiết cho việc tìm cách tiếp_cận bài_toán , bởi_vì nếu bạn biết rõ cách hoạt_động của những thao_tác cơ_bản đó , sẽ làm_cho việc quá_trình chia_nhỏ nhanh đến atomic hơn , nó cũng sẽ hạn_chế việc tạo ra bug không đáng có .\nThêm nữa , nếu bạn cần phải cài một hàm hơi tương_tự như một language technique mà bạn đã biết , thì việc đó sẽ trở_nên vô_cùng dễ_dàng dựa trên việc chỉ_cần sửa_đổi nó chút_ít .\nLuyện_tập với những language technique đó nên là việc_làm hàng_ngày , và bất_kì atomic code nào cũng sẽ có_thể bay ra khỏi bàn_tay (và bay vào màn hình) ngay khi bạn vừa nghĩ đến nó .\nVề việc sử_dụng thư_viện cá_nhân , tôi thấy có nhiều người sử_dụng thư_viện bằng cách chèn những đoạn code thường_dùng vào phần đầu của file .\nĐiều này hoàn_toàn hợp_lí và hợp_pháp .\nNhững ưu_điểm của cách làm này là có_thể tạo ra được nhiều phần trước cho những atomic code thường gặp , có nhiều lợi_ích cho việc tiếp_cận top-down , cũng_như bottom-up (sẽ đề_cập sau) .\nTuy_nhiên , theo ý_kiến cá_nhân , nhược_điểm của cách làm này không tương_xứng với hiệu_quả .\nNó có_thể làm chậm code của bạn đi , bởi_vì bạn phải tìm cách làm_cho input của đề_bài khớp với đầu_vào của thư_viện của bạn , hoặc thư_viện của bạn không được định_nghĩa đủ tốt để làm điều đó .\nĐiều hiển_nhiên là những thư_viện bạn tự viết có_thể bị bugged , và việc debug thư_viện của bạn lúc đang thi_đấu sẽ rất nguy_hiểm bởi_vì bạn phải sửa_lại những bài bạn đã submit trước_khi xem thêm bất_kì bài nào khác .\nThêm nữa , thư_viện cá_nhân không được sử_dụng ở các kì_thi onsite , ví_dụ như thi HSG_QG .\nCuối_cùng , việc sử_dụng thư_viện cá_nhân sẽ làm_bạn phải học kỹ_năng sử_dụng nó chứ không_phải kỹ_năng của ngôn_ngữ , khiến việc đọc hiểu được bài_giải của người khác khó hơn .\nNếu sử_dụng đúng_lúc , thì nó sẽ là một vũ_khí hiệu_quả , nhưng nó không_phải là vũ_khí vạn_năng trong mọi trường_hợp .\nCó những lúc bạn sẽ gặp những atomic code mà bạn không_thể chia_nhỏ vấn_đề được nữa .\nĐây là lúc bạn phải bắt_đầu phân_tích cách tiếp_cận hiện_tại của bạn .\nTôi có nên chia_nhỏ vấn_đề theo cách khác không ?\nCó nên lưu_trữ dữ_liệu bằng cấu_trúc khác ?\nĐây có_phải là nhân_tố để làm_cho bài_toán trở_nên khó hơn ?\nBạn phải xét đến những thứ đó trước_khi tìm_ra đáp_án .\nThậm_chí ở thời_điểm bạn nhận_ra bạn không tìm_ra được hướng suy_nghĩ tiếp_theo , thì vẫn luôn có cách để thoát ra khỏi tình_huống đó , mình sẽ giới_thiệu nó ở phần tiếp_theo .\n\n", "tagged": "Bài/N viết/V bởi/E leadhyena_inran/Np ./CH\nNguồn/N :/CH Topcoder_Table/Np of_Contents/Np Tư_duy/N theo/V lối/N mòn/V (Pattern/Np Mining/Np and/Np Wrong_Mindset)_Coding_Kata/Np Chiến_thuật/N định_hướng/V giải/N bài/N (Approach/Np Tactics)/Np Chia_nhỏ/Np vấn_đề/N Kế_hoạch/N debug/Np Atomic_Code_Giải/Np bài/N là/V một/M nghệ_thuật/N ,/CH nó/P có_thể/R gây/V khó_khăn/A cho/E cả/P những/L coder/Np kì_cựu/Np nhất/A cũng_như/C những/L người/N mới/R học/V ./CH\nĐể/E tìm/V cách/N giải/N phù_hợp/V ,/CH chúng_ta/P phải_biết/N kết_hợp/V nhiều/A phương_pháp/N khác_nhau/Np như/C cảm_nhận/V bằng/E trực_giác/Np ,/CH sáng_tạo/V và/Cc thậm_chí/R là/V may_mắn/A ./CH\nCảm_giác/N bất_lực/A trước/E những/L bài/N khó/A thường/R làm/V chúng_ta/P nản_chí/Np ,/CH và/Cc có_thể/R bỏ_cuộc/V giữa_chừng/R ./CH\nTuy_nhiên/C ,/CH không/R gì/P là/V không_thể/R nếu/C bạn/N có/V đủ/A quyết_tâm/V cũng_như/C kĩ_năng/N cần_thiết/A ./CH\nBởi/E lí_do/N đó/P ,/CH bài/N hướng_dẫn/V này/P sẽ/R đưa_ra/Np những/L kĩ_năng/N để/E giúp/V các/L bạn/N chọn/V những/L hướng/N tiếp_cận/V rõ_ràng/A cho/E những/L bài_toán/N như_vậy/X ./CH\nTư_duy/N theo/V lối/N mòn/V (Pattern/Np Mining/Np and/Np Wrong_Mindset)/Np Chúng_ta/P rất/R dễ/A hướng/N các/L suy_nghĩ/V vào/E việc/N tìm/V giải_thuật/Np dựa/V trên/E từng/R dạng/N của/E đề_bài/Np ./CH\nVới/E những/L người/N đã/R làm/V khá/R nhiều/A bài_tập/Np ,/CH họ/P sẽ/R nhận_ra/Np được/V dạng/N của/E những/L bài_toán/N khác_nhau/Np ,/CH và/Cc khi/N đọc/V thấy/V một/M bài_toán/N nào_đó/P quen_thuộc/A ,/CH thì/C suy_nghĩ/V hiện/N ra/V ngay_tức_khắc/Np trong/E đầu/N là/V :/CH “Ồ/Np ,/CH đây/P là/V dạng/N bài/N X/CH ,/CH nên/C sử_dụng/V thuật_toán/N này/P ,/CH áp_dụng/V kĩ_thuật/N này”/Np ./CH\nCách/N này/P khá/R hữu_ích/A đối_với/E những/L người/N mới/R học/V :/CH nếu/C chưa/R thể/N giải/N được/V ,/CH thì/C họ/P sẽ/R tập_trung/V vào/E luyện_tập/V với/E những/L dạng/N đề_bài/Np này/P để/E khiến/V nó/P trở_thành/V một/M dạng/N bài/N quen_thuộc/A ./CH\nTuy_nhiên/C ,/CH cách/N tiếp_cận/V này/P cũng/R có/V nhược_điểm/N khá/R lớn/A ./CH\nCó/V những/L lúc/N ta/P tưởng/V rằng/C mình/P đang/R code/Np đúng_hướng/Np nhờ/V vào/E lối/N tư_duy/N như_vậy/X ,/CH nhưng/C khi/N test/Np thử/V thì/C không/R khớp/N một/M ví_dụ/C nào/P cả/P ./CH\nLúc_đó/Np đọc/V kĩ/A lại/R đề_bài/Np mới/R nhận_ra/Np :/CH mình/P chưa/R gặp/V \"dạng\"/Np này/P bao_giờ/P và/Cc bế_tắc/A hoàn_toàn/A ./CH\nBạn/N sẽ/R trải_nghiệm/V điều/N này/P nhiều/A lần/N khi/N giải/N các/L bài_toán/N \"gốc\"/Np và/Cc độc_đáo/A ,/CH và/Cc kể_cả/X những/L coder/Np \"lão/Np làng\"/Np cũng/R có/V lúc/N bị/V chính/T kinh_nghiệm/N của/E mình/P đánh_lừa/V ./CH\nTư_duy/N lối/N mòn/V thường/R khiến/V ta/P ảo_tưởng/Np rằng/C mọi/L bài_toán/N đều/R đã/R được/V \"phân/Np loại\"/Np và/Cc ta/P chỉ_cần/Np áp_dụng/V \"đúng/Np thuật\"/Np ,/CH trong_khi/Np thực_tế/N điều/N này/P bất_khả_thi/Np ./CH\nKhi/N ta/P tạm/A quên/V hết/V những/L lối/N mòn/V đó/P và/Cc sử_dụng/V hết/V khả_năng/N suy_nghĩ/V ,/CH phân_tích/V ,/CH trình_độ/N của/E ta/P sẽ/R được/V cải_thiện/V rất/R nhiều/A ./CH\nCoding_Kata_Đây/Np là/V thử_thách/V đầu_tiên/A :/CH hãy/R chọn/V bất_cứ/R bài_tập/Np nào/P trong/E Practice_Rooms/Np mà/C bạn/N chưa/R làm/V ./CH\nHốt/V nó/P ,/CH cho_dù/C phải/V mất/V bao_nhiêu/P thời_gian/N ,/CH và/Cc hoàn_thành/V nó/P (có/Np thể/N sử_dụng/V editorial/Np nếu/C quá/R \"bí\")/Np ./CH\nSau/E khi/N làm_xong/Np (accepted)/Np ,/CH hãy/R xem/V bạn/N mất/V bao_nhiêu/P thời_gian/N để/E giải/N ./CH\nTiếp_theo/V ,/CH xóa/V hết/V code/Np và/Cc gõ/V lại/R lần/N nữa/R ,/CH check/Np thời_gian/N sau/E khi/N làm_xong/Np ./CH\nTiếp_tục/V lần/N thứ/N 3/M như_thế/X ./CH\nThời_gian/N hoàn_thành/V lần/N đầu_tiên/A là/V thời_gian/N để/E giải/N bài_toán/N khi/N bạn/N không/R có/V bất_cứ/R hướng/N suy_nghĩ/V hay/Cc cách/N tiếp_cận/V nào/P về/E bài_toán/N ./CH\nThời_gian/N hoàn_thành/V lần/N thứ/N 2/M là/V thời_gian/N lần/N đầu_tiên/A trừ/V đi/V thời_gian/N bạn/N dùng/V để/E đọc/V và/Cc hiểu/V đề/V (đừng/Np quá/R ngạc_nhiên/V với/E số/N lỗi/N bạn/N lặp_lại/Np ở/E lần/N này)/Np ./CH\nCòn/R thời_gian/N hoàn_thành/V lần/N cuối/N là/V thời_gian/N bạn/N có_thể/R giải/N được/V trong_lúc/Np thi/V thật/R nếu/C tìm_thấy/Np được/V cách/N tiếp_cận/V đúng/A ngay/R sau/E khi/N đọc/V đề_bài/Np ./CH\nViệc/N giải/N bài/N với/E thời_gian/N của/E lần/N cuối_cùng/A hoàn_toàn/A có_thể/R làm/V được/V (thậm/Np chí/N không/R cần/V khả_năng/N gõ/V phím/N nhanh)/Np ./CH\nNhưng/C điều/N mà/C bạn/N cũng/R nhận_ra/Np ở/E lần/N giải/N thứ/N 3/M là/V cảm_giác/N bạn/N đã/R biết/V trước/E chiến_thuật/N ,/CH nên/C code/Np thế_nào/P ,/CH dễ/A bị/V bug/Np nhất/A ở/E những/L đoạn/Nc nào/P ,/CH ./CH ./CH ./CH\nĐó/P là/V cảm_giác/N để/E có/V được/V một_cách/N tiếp_cận/V đúng/A ./CH\nỞ/E nhiều/A môn/N võ/N ,/CH có_một/Np thuật_ngữ/N luyện_tập/V gọi_là/V kata/Np ./CH\nNgười/N tập/V sẽ/R thi/V triển/Np những/L đòn/N thế/P được/V kịch_bản/N sẵn/A và/Cc cố/V phòng_thủ/V trước/E các/L đòn/N tấn_công/V -/CH cũng/R đã/R được/V kịch_bản/N ./CH\nThoạt/Np nghe/V thì/C phương_pháp/N này/P chả/R có/V tác_dụng/N gì/P vì/E sẽ/R chẳng/R lúc/N nào/P đánh_nhau/Np được/V \"tiện\"/Np như_vậy/X ./CH\nHơn_nữa/C có_vẻ/X như/C nó/P khuyến_khích/V lối/N tư_duy/N ,/CH luyện_tập/V theo/V lối/N mòn/V được/V đề_cập/V ở/E trên/E ./CH\nThế_nhưng/C kata/Np sẽ/R cho/E người/N tập/V cảm_giác/N của/E việc/N có_một/Np kế_hoạch/N rõ_ràng/A và/Cc khuyến_khích/V ý_chí/N ./CH\nTin_học/N cũng_như/C vậy;/Np chỉ/R sau/E khi/N code/Np 3/M lần/N một/M dạng/N bài/N trong/E một_thời/Np gian/N đủ/A nhiều/A ta/P mới/R nhuần_nhuyễn/Np hết/V mọi/L mặt/N của/E bài_toán/N -/CH định_hướng/V ,/CH trình_bày/V code/Np và/Cc debug/Np ./CH\nChiến_thuật/N định_hướng/V giải/N bài/N (Approach/Np Tactics)/Np Bây_giờ/P bạn/N đã/R biết_việc/Np định_hướng/V giải/N bài/N nó/P như_thế/X nào/P và/Cc nó/P bao_gồm/V những/L gì/P ,/CH bạn/N sẽ/R nhận_ra/Np rằng/C trước_đây/N bạn/N đã/R biết/V khá/R nhiều/A cách/N để/E tiếp_cận/V một/M bài_toán/N ./CH\nDạng/N như/C “Tôi/Np dùng/V Quy_hoạch_động/Np (dynamic/Np programming)/Np cho/E bài/N đó”/Np ,/CH “Tôi/Np có_thể/R dùng/V tham_lam/Np (greedy)/Np để/E giải/N bài/N này/P không/R ?/CH ”/CH ,/CH “Đừng/Np nói/V với/E tôi/P rằng/C duyệt/V (brute-force)/Np có_thể/R ăn/V bài/N này”/Np ./CH\nThật_ra/X bạn/N đang/R dùng/V sai/A những/L từ_ngữ/N ở/E đây/P ,/CH vì/E bạn/N không_thể/R phân_loại/V mỗi/L bài_tập/Np chỉ/R với/E tham/V hay/Cc duyệt/V ./CH\nCó/V rất/R rất/R nhiều/A dạng/N bài_tập/Np ,/CH và/Cc cũng/R rất/R nhiều/A cách/N tiếp_cận/V ,/CH và/Cc thậm_chí/R với/E mỗi/L hướng/N tiếp_cận/V có_thể/R tồn_tại/V rất/R nhiều/A cách/N thể_hiện/V khác_nhau/Np ./CH\nCách/N dùng/V từ/E như_vậy/X chỉ/R tổng_quát/Np được/V những/L bước_đi/N lớn/A để/E đến/E được/V đáp_án/N ./CH\nTrong_TopCoder/Np có/V nhiều/A bài/N có/V lời_giải/Np hoàn_chỉnh/V và/Cc chú_thích/N cặn_kẽ/Np ./CH\nLần/N tham_gia/V contest/Np tiếp_theo/V ,/CH bạn/N hãy/R thử/V tìm/V một/M bài/N viết/V tốt/A và/Cc nghiên_cứu/V các/L bước/V tiếp_cận/V cụ_thể/A của/E bài_toán/N mà/C tác_giả/N đã/R chỉ/R ra/V ./CH\nBạn/N sẽ/R bắt_đầu/V chú_ý/V rằng/C có_một/Np tính_chất/N nào_đó/P của/E bài_toán/N sẽ/R gợi/V ra/V cho/E bạn/N một_cách/N tiếp_cận/V ,/CH hay/Cc những/L cách/N biến_đổi/V ,/CH chuyển_hướng/V ,/CH phân_tích/V ,/CH ./CH ./CH ./CH\nlàm_bạn/Np đến/E gần/A hơn/A với/E đáp_án/N ,/CH hay/Cc ít_nhất/A giúp/V bạn/N không/R nghĩ/V theo/V hướng/N sai/A ./CH\nKhi/N tìm/V một_cách/N tiếp_cận/V ,/CH hãy/R thử/V tất_cả/P những/L hướng/N đi/V bạn/N có/V ,/CH như/C kiểu/N bạn/N đã/R gõ/V sẵn/A code/Np hết/V trong/E đầu/N -/CH bạn/N thuyết_phục/V bản_thân/N rằng/C hướng/N đi/V của/E bạn/N là/V đúng/A ./CH\nNhững/L coder/Np có/V kiến_thức/N toán/N cơ_bản/A tốt/A sẽ/R có_thể/R biết/V được/V hướng/N suy_nghĩ/V này/P ,/CH bởi_vì/E những/L hướng/N tiếp_cận/V đó/P rất/R giống/N với/E kĩ_năng/N chứng_minh/V toán_học/N ./CH\nVới/E những/L kì_thủ/N họ/P sẽ/R thấy/V nó/P giống_như/Np việc/N nghĩ/V trước/E các/L nước_cờ/Np hay/Cc những/L người/N thiết_kế/V ứng_dụng/V có_thể/R đã/R quen/V với/E nó/P trong_khi/Np làm_việc/V với/E các/L design/Nb patterns/Np (thuật/Np ngữ/Np trong/E lập_trình/V ứng_dụng/V ,/CH chỉ/R những/L phương_pháp/N thiết_kế/V hiệu_quả/N đã/R được/V nghiên_cứu/V kĩ)/Np ./CH ./CH ./CH\nĐể/E luyện_tập/V cách/N tư_duy/N và/Cc tìm_ra/Np phương_pháp/N phù_hợp/V với/E mình/P ,/CH ghi_chú/V lại/R hướng/N giải/N của/E các/L bài_toán/N là/V rất/R quan_trọng/A ./CH\nSau_đó/Np hãy/R viết/V một/M bài/N phân_tích/V dựa/V trên/E những/L gì/P bạn/N đã/R làm/V ,/CH càng/R chi_tiết/N càng/R tốt/A ,/CH để/E những/L người/N khác/A có_thể/R biết/V được/V cách/N bạn/N suy_nghĩ/V như_thế/X nào/P ./CH\nViệc/N viết/V lại/R như_thế/X không/R chỉ/R giúp/V bạn/N hiểu/V rõ/A hơn/A cách/N tiếp_cận/V của/E mình/P ,/CH mà_còn/C tìm_ra/Np được/V những/L sai_lầm/N của/E bản_thân/N và/Cc cải_thiện/V nó/P ./CH\nHãy/R nhớ/V rằng/C ,/CH rất/R khó/A để/E cải_thiện/V được/V những/L điều/N mà/C bạn/N còn/R chưa/R hiểu/V ./CH\nChia_nhỏ/Np vấn_đề/N Hãy/R bàn/N về/E một/M trong/E những/L cách/N tiếp_cận/V phổ_biến/V nhất/A :/CH chia_nhỏ/Np vấn_đề/N ra/V ,/CH còn/R được/V gọi_là/V tiếp_cận/V từ/E trên/E xuống/V (top-down/Np programming)/Np ./CH\nÝ_tưởng/N cơ_bản/A ở/E đây/P là/V code/Np của/E bạn/N phải/V được/V thực_hiện/V theo/V thứ_tự/N ,/CH nên/C hãy/R bắt_đầu/V bằng/E việc/N suy_nghĩ/V xem/V phần/N chương_trình/N chính/T sẽ/R cần/V những/L gì/P trước_khi/Np xây_dựng/V những/L hàm/Np con/Nc ./CH\nĐiều/N này/P cho_phép/V bạn/N thấy/V được/V tổng_thể/N chương_trình/N ,/CH cũng_như/C chia_nhỏ/Np vấn_đề/N từ/E những/L thứ/N phức_tạp/A cho_đến/E đơn_giản/A ./CH\nMột/M ví_dụ/C áp_dụng/V cách/N tiếp_cận/V này/P ./CH\nRound/Np 2/M ,/CH MatArith/Np ,/CH topcoder/Np Invitational/Np 2002/M ,/CH bài_toán/N yêu_cầu/V bạn/N phải/V tính/V giá_trị/N biểu_thức/Np có/V sử_dụng/V ma_trận/N ./CH\nĐể/E có/V được/V những/L con_số/N chúng_ta/P phải/V xử_lý/V xâu/Np (vì/Np input/Np là/V string)/Np ,/CH tính_toán/V dựa/V trên/E đó/P ,/CH và/Cc trả/V ngược/A về/E string/Np ./CH\nNên/C bạn/N cần/V một/M hàm/Np print/Np để/E in/V kết_quả/N ,/CH một/M hàm/Np parse/Np để/E xử_lý/V xâu/Np và/Cc một/M hàm/Np calc/Np để/E xử_lí/V toán_học/N ./CH\nKhông/R cần/V suy_nghĩ/V quá/R phức_tạp/A ,/CH Nếu/C chúng_ta/P có/V đủ/A 3/M hàm/Np đó/P thì/C vấn_đề/N sẽ/R được/V giải_quyết/V chỉ/R trong/E 1/M dòng/N code/Np :/CH public/Np String/Np calculate/Np (/CH String_A/Np ,/CH String_B/Np ,/CH String_C/Np ,/CH String/Np eval/Np )/CH return/Np print/Np (/CH calc/Np (/CH parse/Np (/CH A/Ni )/CH ,/CH parse/Np (/CH B/Ni )/CH ,/CH parse/Np (/CH C/Ni )/CH ,/CH eval/Np ));/Np Cái/Nc hay/Cc của/E các/L tiếp_cận/V này/P là/V tạo/V ra/V một/M hệ_thống/N cấp_bậc/Np các/L hàm/Np ,/CH hàm/Np trên/E sẽ/R dựa/V vào/E kết_quả/N của/E hàm/Np dưới/E để/E chạy/V ./CH\nBây_giờ/P công_việc/N đã/R được/V chia/V làm/V 3/M phần/N :/CH tạo/V hàm/Np parse/Np ,/CH hàm/Np print/Np ,/CH và/Cc hàm/Np calc/Np ./CH\nNếu/C bạn/N chia_bài/Np toán/N thành/V những/L bài_toán/N con/Nc đủ/A nhỏ/A ,/CH bạn/N sẽ/R không_phải/Np tốn/V nhiều/A thời_gian/N vào/E việc/N suy_nghĩ/V cho/E những/L bước/V không/R đơn_giản/A ,/CH bởi_vì/E nó/P sẽ/R trở_nên/V atomic/Np (sẽ/Np được/V đề_cập/V phía/N dưới)/Np ./CH\nThay/V vào/E đó/P chúng_ta/P có_thể/R tập_trung/V vào/E hàm_cộng/Np và/Cc hàm/Np nhân/N ma_trận/N hay/Cc hàm/Np đọc/V dữ_liệu/N vào/E sao_cho/Np chính_xác/A ./CH\nCách/N tiếp_cận/V này/P có_thể/R ứng_dụng/V khá/R hiệu_quả/N vào/E những/L bài_toán/N đệ_quy/Np ./CH\nToàn_bộ/L ý_tưởng/N của/E đệ_quy/Np đó/P là/V chia/V vấn_đề/N lớn/A thành/V những/L vấn_đề/N nhỏ/A hơn/A nhưng/C giống/N chính_xác/A với/E vấn_đề/N gốc/N ,/CH vậy/P chúng_ta/P chỉ_cần/Np giải/N được/V một/M 1/M vấn_đề/N gốc/N là/V xong/V ./CH\nCách/N tiếp_cận/V này/P cũng/R được/V sử_dụng/V rất/R phổ_biến/V trong/E functional/Np programming/Np (một/Np lớp/N các/L ngôn_ngữ_lập_trình/Np mà/C chương_trình/N được/V xây_dựng/V chỉ/R từ/E các/L hàm)/Np ./CH\nCó/V khá/R nhiều/A bài/N viết/V đã/R bàn/N sâu/A về/E vấn_đề/N này/P ,/CH nhưng/C ý_tưởng/N cơ_bản_chính/Np là/V nếu/C ta/P chia_nhỏ/Np bài_toán/N một_cách/N đúng_đắn/A ,/CH chương_trình/N sẽ/R tự_động/A gửi/V tham_số/Np qua/V mỗi/L lời/N gọi/V hàm/Np ,/CH không/R cần_thiết/A lưu_trữ/Np dữ_liệu/N giữa/N các/L bước/V ./CH\nNhưng/C có_một/Np nhược_điểm/N là/V sẽ/R khó/A debug/Np hơn/A ./CH\nKế_hoạch/N debug/Np Bất_cứ/R khi_nào/Np có_một/Np cách/N tiếp_cận/V ,/CH chúng_ta/P phải/V luôn/R có_một/Np kế_hoạch/N debug/Np cho/E cách/N tiếp_cận/V đó/P ./CH\nCó/V rất/R nhiều/A khả_năng/N xảy_ra/Np làm_cho/Np chương_trình/N chúng_ta/P chạy/V sai/A ,/CH bằng/E cách/N suy_nghĩ/V trước/E các/L hướng/N chương_trình/N sẽ/R chạy/V sai/A ,/CH chúng_ta/P có_thể/R ngăn_chặn/V bug/Np trước_khi/Np code/Np ./CH\nHơn_thế_nữa/Np ,/CH nếu_không/Np vượt_qua/Np được/V các/L test/Np mẫu/N ,/CH chúng_ta/P sẽ_biết/Np ngay/R vị_trí/N thích_hợp/A để/E bắt_đầu/V tìm/V lỗi/N ./CH\nCuối_cùng/A ,/CH bằng/E cách/N chú_ý/V đến/E điểm/N trọng_yếu/Np nhất/A ,/CH sẽ/R dễ_dàng/A hơn/A để/E chứng_minh/V cách/N tiếp_cận/V của/E bạn/N là/V đúng/A ./CH\nVới/E trường_hợp/N tiếp_cận/V top-down/Np ,/CH việc/N chia_nhỏ/Np những/L phần/N code/Np thành/V những/L hàm/Np con/Nc giúp/V chúng_ta/P cô_lập/V những/L phần/N code/Np lỗi/N và/Cc chỉ/R phải/V sửa_lại/Np code/Np ở/E một_nơi/Np ./CH\nCũng_như/C việc/N test/Np được/V một/M tổ_hợp/N các/L hàm/Np dễ/A bị/V bug/Np nhất/A ./CH\nCopy/Np và/Cc paste/Np nhiều/A lúc/N cũng/R làm_việc/V sửa_lỗi/Np tốn/V nhiều/A công_sức/N hơn/A thay_vì/X viết/V riêng/A một/M hàm/Np con/Nc ./CH\nMột/M kinh_nghiệm/N nữa/R cho/E cách/N tiếp_cận/V từ/E trên/E xuống/V là/V chúng_ta/P nên/C tìm/V bugs/Np bên_trong/Np hàm/Np trước_khi/Np tìm/V giữa/N những/L lời/N gọi/V hàm/Np ./CH\nNhững/L cách/N này/P tạo/V nên/C một/M chiến_thuật/N debug/Np :/CH biết/V được/V vị_trí/N nào/P cần/V test/Np trước_tiên/N ,/CH chỗ/N nào/P bạn/N nghĩ/V là/V sai/A và/Cc cần/V kiểm_tra/V ,/CH hay/Cc chứng_minh/V những/L đoạn/Nc code/Np chuẩn/N và/Cc bỏ_qua/V chúng/P ./CH\nNếu/C luyện_tập/V thường_xuyên/A ,/CH bạn/N sẽ/R thấy/V rằng/C những/L kĩ_năng/N này/P vô_cùng/R hữu_ích/A ./CH\nAtomic_Code_Nếu/Np chúng_ta/P đi/V đến/E một/M phần/N code/Np mà/C chúng_ta/P không_thể/R chia_nhỏ/Np được/V nữa/R ,/CH thì/C phần/N đó/P gọi_là/V atomic/Np code/Np ./CH\nHi_vọng/V các/L bạn/N đều/R biết/V cách/N code/Np những/L phần/N như_vậy/X ,/CH vì/E đó/P sẽ/R là/V những/L phần/N bạn/N sẽ/R code/Np thường_xuyên/A nhất/A ./CH\nNhưng/C đừng/R lo/V nếu/C bạn/N chưa/R thuần_thục/A nó/P ,/CH những/L atomic/Np code/Np khó/A như_vậy/X thường/R làm_cho/Np bài_toán/N trở_nên/V thú_vị/A hơn/A ,/CH và/Cc thình_thoảng/Np thấy/V trước/E được/V điều/N đó/P sẽ/R giúp/V bạn/N có_một/Np bước_tiến/N lớn/A trong/E việc/N tìm/V cách/N tiếp_cận/V đúng_đắn/A ,/CH hạn_chế/V được_việc/Np phung_phí/Np thời_gian/N cho/E những/L cách/N tiếp_cận/V sai/A ./CH\nDạng/N atomic/Np code/Np bạn/N viết/V thường_xuyên/A nhất/A đó/P là/V dạng/N tối_giản/Np nhất/A ,/CH nên/C phần_lớn/N sẽ/R có/V lệnh/N sẵn/A trong/E thư_viện/N để/E hỗ_trợ/V nó/P ./CH\nViệc/N sử_dụng/V thành_thạo/A thư_viện/N là/V một/M lợi_thế/N lớn/A ,/CH nó/P giúp/V chúng_ta/P viết/V được/V atomic/Np code/Np trong_sáng/A và/Cc rõ_ràng/A hơn/A ./CH\nCòn/R cách/N nào/P để/E tiết_kiệm/V thời_gian/N hơn/A khi/N bạn/N biết/V rằng/C một/M phần/N atomic/Np code/Np khá/R khó/A xơi/V lại/R là/V một/M hàm/Np hay/Cc một/M lớp/N nào_đó/P trong/E thư_viện/N sẵn_có/Np ?/CH\nMình/P sẽ/R gọi/V dạng/N atomic/Np code/Np thứ_hai/N mà/C bạn/N sẽ/R viết/V là/V language/Np techniques/Np (một/Np dạng/N kĩ_năng/N về/E ngôn/A ngữ)/Np ./CH\nĐó/P là/V những/L phần/N code/Np nhỏ/A mà/C bạn/N thuộc_lòng/V để/E giải_quyết/V một_phép/Np xử_lí/V nào_đó/P ,/CH như/C tìm/V chỉ_số/N của/E phần_tử/N nhỏ/A nhất/A đầu_tiên/A trong/E mảng/N ,/CH hay/Cc tách/V một/M xâu/Np ra/V thành/V những/L chuỗi/N con/Nc mà/C không/R có/V khoảng/N trắng/A ./CH\nNhững/L kĩ_thuật/N trên/E rất/R cần_thiết/A cho/E việc/N tìm/V cách/N tiếp_cận/V bài_toán/N ,/CH bởi_vì/E nếu/C bạn/N biết/V rõ/A cách/N hoạt_động/N của/E những/L thao_tác/V cơ_bản/A đó/P ,/CH sẽ/R làm_cho/Np việc/N quá_trình/N chia_nhỏ/Np nhanh/A đến/E atomic/Np hơn/A ,/CH nó/P cũng/R sẽ/R hạn_chế/V việc/N tạo/V ra/V bug/Np không/R đáng/V có/V ./CH\nThêm/V nữa/R ,/CH nếu/C bạn/N cần/V phải/V cài/V một/M hàm/Np hơi/R tương_tự/A như/C một/M language/Np technique/Np mà/C bạn/N đã/R biết/V ,/CH thì/C việc/N đó/P sẽ/R trở_nên/V vô_cùng/R dễ_dàng/A dựa/V trên/E việc/N chỉ_cần/Np sửa_đổi/V nó/P chút_ít/N ./CH\nLuyện_tập/V với/E những/L language/Np technique/Np đó/P nên/C là/V việc_làm/N hàng_ngày/Np ,/CH và/Cc bất_kì/R atomic/Np code/Np nào/P cũng/R sẽ/R có_thể/R bay/V ra/V khỏi/V bàn_tay/N (và/Np bay/V vào/E màn/N hình)/Np ngay/R khi/N bạn/N vừa/R nghĩ/V đến/E nó/P ./CH\nVề/E việc/N sử_dụng/V thư_viện/N cá_nhân/N ,/CH tôi/P thấy/V có/V nhiều/A người/N sử_dụng/V thư_viện/N bằng/E cách/N chèn/V những/L đoạn/Nc code/Np thường_dùng/Np vào/E phần/N đầu/N của/E file/Np ./CH\nĐiều/N này/P hoàn_toàn/A hợp_lí/A và/Cc hợp_pháp/A ./CH\nNhững/L ưu_điểm/N của/E cách/N làm/V này/P là/V có_thể/R tạo/V ra/V được/V nhiều/A phần/N trước/E cho/E những/L atomic/Np code/Np thường/R gặp/V ,/CH có/V nhiều/A lợi_ích/N cho/E việc/N tiếp_cận/V top-down/Np ,/CH cũng_như/C bottom-up/Np (sẽ/Np đề_cập/V sau)/Np ./CH\nTuy_nhiên/C ,/CH theo/V ý_kiến/N cá_nhân/N ,/CH nhược_điểm/N của/E cách/N làm/V này/P không/R tương_xứng/Np với/E hiệu_quả/N ./CH\nNó/P có_thể/R làm/V chậm/A code/Np của/E bạn/N đi/V ,/CH bởi_vì/E bạn/N phải/V tìm/V cách/N làm_cho/Np input/Np của/E đề_bài/Np khớp/N với/E đầu_vào/N của/E thư_viện/N của/E bạn/N ,/CH hoặc/Cc thư_viện/N của/E bạn/N không/R được/V định_nghĩa/N đủ/A tốt/A để/E làm/V điều/N đó/P ./CH\nĐiều/N hiển_nhiên/Np là/V những/L thư_viện/N bạn/N tự/P viết/V có_thể/R bị/V bugged/Np ,/CH và/Cc việc/N debug/Np thư_viện/N của/E bạn/N lúc/N đang/R thi_đấu/V sẽ/R rất/R nguy_hiểm/A bởi_vì/E bạn/N phải/V sửa_lại/Np những/L bài/N bạn/N đã/R submit/Np trước_khi/Np xem/V thêm/V bất_kì/R bài/N nào/P khác/A ./CH\nThêm/V nữa/R ,/CH thư_viện/N cá_nhân/N không/R được/V sử_dụng/V ở/E các/L kì_thi/Np onsite/Np ,/CH ví_dụ/C như/C thi/V HSG_QG/Np ./CH\nCuối_cùng/A ,/CH việc/N sử_dụng/V thư_viện/N cá_nhân/N sẽ/R làm_bạn/Np phải/V học/V kỹ_năng/N sử_dụng/V nó/P chứ/C không_phải/Np kỹ_năng/N của/E ngôn_ngữ/N ,/CH khiến/V việc/N đọc/V hiểu/V được/V bài_giải/Np của/E người/N khác/A khó/A hơn/A ./CH\nNếu/C sử_dụng/V đúng_lúc/Np ,/CH thì/C nó/P sẽ/R là/V một/M vũ_khí/N hiệu_quả/N ,/CH nhưng/C nó/P không_phải/Np là/V vũ_khí/N vạn_năng/A trong/E mọi/L trường_hợp/N ./CH\nCó/V những/L lúc/N bạn/N sẽ/R gặp/V những/L atomic/Np code/Np mà/C bạn/N không_thể/R chia_nhỏ/Np vấn_đề/N được/V nữa/R ./CH\nĐây/P là/V lúc/N bạn/N phải/V bắt_đầu/V phân_tích/V cách/N tiếp_cận/V hiện_tại/N của/E bạn/N ./CH\nTôi/P có/V nên/C chia_nhỏ/Np vấn_đề/N theo/V cách/N khác/A không/R ?/CH\nCó/V nên/C lưu_trữ/Np dữ_liệu/N bằng/E cấu_trúc/N khác/A ?/CH\nĐây/P có_phải/Np là/V nhân_tố/N để/E làm_cho/Np bài_toán/N trở_nên/V khó/A hơn/A ?/CH\nBạn/N phải/V xét/V đến/E những/L thứ/N đó/P trước_khi/Np tìm_ra/Np đáp_án/N ./CH\nThậm_chí/R ở/E thời_điểm/N bạn/N nhận_ra/Np bạn/N không/R tìm_ra/Np được/V hướng/N suy_nghĩ/V tiếp_theo/V ,/CH thì/C vẫn/R luôn/R có/V cách/N để/E thoát/V ra/V khỏi/V tình_huống/N đó/P ,/CH mình/P sẽ/R giới_thiệu/V nó/P ở/E phần/N tiếp_theo/V ./CH\n\n", "title": "Những cách tiếp cận bài toán: Phần 1\n", "link": "http://vnoi.info/wiki/translate/topcoder/Planning-an-Approach-to-a-Topcoder-Problem-Part-1\n"}