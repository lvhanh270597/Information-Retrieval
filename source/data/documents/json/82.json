{"content": "Biến , con_trỏ Cấu_trúc dữ_liệu đơn_giản nhất chính là các biến (variable) .\nChúng nắm_giữ duy_nhất một giá_trị , hơn_nữa , phạm_vi sử_dụng có giới_hạn .\nKhi nhiều giá_trị cần lưu_trữ , mảng (arrays) được sử_dụng .\nMột khái_niệm hơi khó hơn mặc_dù không kém phần căn_bản là con_trỏ (pointer) .\nCon_trỏ thay_vì giữ một giá_trị , nó lại giữ một địa_chỉ vùng nhớ : Trong hình trên : var là một biến thông_thường , có địa_chỉ 1001 và giá_trị 50 ptr là một biến kiểu con_trỏ , có địa_chỉ 2047 và giá_trị 1001 .\nGiá_trị của ptr là địa_chỉ của biến var .\nMảng (Arrays) Mảng là một cấu_trúc dữ_liệu cực_kỳ đơn_giản và có_thể xem như một danh_sách với chiều_dài cố_định .\nMảng là một cấu_trúc dữ_liệu “đẹp” bởi tính đơn_giản của nó .\nMảng đặc_biệt thích_hợp cho các tình_huống mà ta biết trước được số_lượng phần_tử hoặc có_thể xác_định được khi chạy chương_trình .\nGiả_sử bạn cần một đoạn mã để tính giá_trị trung_bình của một_vài con_số .\nMảng là sự lựa_chọn tuyệt_vời để giữ các giá_trị bởi yêu_cầu bài_toán không đòi_hỏi một thứ_tự lưu_trữ cụ_thể và các phép_tính toán cũng không đòi_hỏi gì khác ngoài việc duyệt qua toàn_bộ các phần_tử .\nMột trong những sức_mạnh khác của mảng chính là ta có_thể truy_cập các phần_tử của mảng một_cách ngẫu_nhiên bằng chỉ_số .\nVí_dụ như , bạn có_một danh_sách gồm tên của các học_sinh trong lớp_học .\nMỗi học_sinh đánh_số từ 1 đến n .\nKhi đó để đọc hoặc lưu tên học_sinh thứ i bạn chỉ_cần gọi tới studentNamei .\nDo các phần_tử của mảng ở vị_trí liên_tiếp nhau trong bộ_nhớ máy_tính , nên thao_tác này chỉ mất độ phức_tạp \\mathcalO(1) .\nTuy_nhiên cũng vì lý_do này , nên việc tăng kích_thước mảng hay thêm / xóa 1 phần_tử vào vị_trí bất_kỳ của mảng có độ phức_tạp \\mathcalO(N) .\nMảng có_số lượng phần_tử cố_định , mỗi phần_tử giữ của mảng một thông_tin và ở một vị_trí không_đổi đã được định_nghĩa trước đó .\nTổng_kết Bộ_nhớ cố_định , cần biết trước_số phần_tử Truy_cập một vị_trí bất_kỳ : \\mathcalO(1) .\nThêm / xóa_một phần_tử : \\mathcalO(N) .\nMở_rộng Trong_C++_STL , có CTDL vector , được gọi_là mảng động .\nCTDL này cho_phép thực_hiện các thao_tác : Truy_cập một vị_trí bất_kỳ : \\mathcalO(1) .\nThêm / Xóa 1 phần_tử vào cuối mảng : độ phức_tạp trung_bình : \\mathcalO(1) .\nThêm / xóa_một phần_tử bất_kỳ : \\mathcalO(N) .\nĐể làm được điều này , vector sử_dụng kĩ_thuật \"nhân đôi mảng\" : Mảng của ta sẽ có_thể cấp_phát bộ_nhớ tối_đa là 2 lần chiều_dài thật (số phần tử) của mảng .\nNếu mảng vẫn chưa đầy (bộ nhớ cấp_phát lớn hơn chiều_dài thật của mảng) , ta chỉ_cần đơn_giản là thêm phần_tử mới vào cuối mảng .\nNếu mảng đầy , ta làm như_sau : Cấp_phát bộ_nhớ mới bằng 2 lần chiều_dài mảng Copy mảng cũ qua bộ_nhớ mới cấp_phát .\nNhư_vậy ta có mảng mới với dữ_liệu giống với mảng cũ , và còn dư ra chỗ_trống ở cuối mảng mới .\nThêm phần_tử mới vào cuối mảng mới .\nNếu ta thêm N phần_tử vào cuối mảng , thì độ phức_tạp là : \\mathcalO(1 + 2 + 4 + 8 + 16 + . . . ) cho các thao_tác cấp_phát bộ_nhớ \\mathcalO(1) cho việc ghi phần_tử mới vào phần bộ_nhớ trống .\nDo_đó độ phức_tạp tổng không quá \\mathcalO(N) , và độ phức_tạp trung_bình của 1 thao_tác là \\mathcalO(1) .\nDanh_sách liên_kết (Linked Lists) Danh_sách liên_kết là một cấu_trúc dữ_liệu có_thể giữ một_số lượng phần_tử tùy_ý và dễ_dàng thay_đổi kích_thước , cũng_như dễ_dàng bỏ_đi các phần_tử bên_trong nó .\nDanh_sách liên_kết , hiểu theo cách đơn_giản nhất_là một con_trỏ trỏ tới một nút dữ_liệu .\nMỗi nút dữ_liệu bao_gồm dữ_liệu cần chứa và một con_trỏ trỏ tới nút tiếp_theo .\nTại điểm cuối_cùng , con_trỏ trỏ tới giá_trị NULL .\nVới thiết_kế như ban_đầu , một danh_sách liên_kết thích_hợp để lưu_trữ dữ_liệu khi chưa biết trước được số_lượng các phần_tử hoặc các phần_tử thường_xuyên thay_đổi .\nTuy_vậy , chúng_ta không_thể truy_cập một_cách ngẫu_nhiên các phần_tử của danh_sách liên_kết .\nĐể tìm_kiếm một giá_trị , ta phải bắt_đầu tại phần_tử đầu_tiên và duyệt tuần_tự qua các phần_tử cho tới khi bắt_gặp được_giá trị mà mình cần tìm_kiếm .\nĐể chèn một nút vào danh_sách liên_kết , bạn cũng phải thực_hiện tương_tự .\nĐộ phức_tạp của cả 2 thao_tác này là \\mathcalO(N) .\nTuy_nhiên , nếu ta biết được con_trỏ trỏ đến phần_tử cần xóa , thì độ phức_tạp chỉ là \\mathcalO(1) .\nDễ_dàng nhận_thấy , thao_tác tìm_kiếm và chèn trong danh_sách liên_kết không thật_sự hiệu_quả .\nSau_đây là cài_đặt kiểu dữ_liệu danh_sách liên_kết thông_thường : struct ListNode int data ; // dữ_liệu được lưu ở nút của linked list ListNode nextNode ; // con_trỏ trỏ tới phần_tử tiếp_theo của linked list .\n; ListNode firstNode ; Bạn có_thể chèn một nút mới vào bằng cách chèn chúng vào đầu danh_sách .\nThao_tác này có độ phức_tạp là \\mathcalO(1) .\nListNode newNode = new_ListNode (); newNode -gt; nextNode = firstNode ; firstNode = newNode ; Duyệt qua toàn_bộ danh_sách liên_kết rất đơn_giản như_sau : ListNode curNode = firstNode ; while ( curNode ! = NULL ) cout lt;lt; curNode -gt; data lt;lt; endl ; curNode = curNode -gt; nextNode ; Ngoài_ra , ta cũng có_thể lưu thêm con_trỏ trỏ vào phần_tử cuối của danh_sách .\nKhi đó độ phức_tạp để thêm 1 phần_tử vào cuối danh_sách là \\mathcalO(1) .\nTổng_kết Thêm / xóa 1 phần_tử mới vào đầu / cuối : \\mathcalO(1) Truy_cập 1 phần_tử ở vị_trí bất_kỳ : \\mathcalO(N) .\nTài_liệu tham_khảo Topcoder_Wikipedia\n", "tagged": "Biến/V ,/CH con_trỏ/Np Cấu_trúc/N dữ_liệu/N đơn_giản/A nhất/A chính/T là/V các/L biến/V (variable)/Np ./CH\nChúng/P nắm_giữ/Np duy_nhất/A một/M giá_trị/N ,/CH hơn_nữa/C ,/CH phạm_vi/N sử_dụng/V có/V giới_hạn/V ./CH\nKhi/N nhiều/A giá_trị/N cần/V lưu_trữ/Np ,/CH mảng/N (arrays)/Np được/V sử_dụng/V ./CH\nMột/M khái_niệm/N hơi/R khó/A hơn/A mặc_dù/C không/R kém/A phần/N căn_bản/A là/V con_trỏ/Np (pointer)/Np ./CH\nCon_trỏ/Np thay_vì/X giữ/V một/M giá_trị/N ,/CH nó/P lại/R giữ/V một/M địa_chỉ/N vùng/N nhớ/V :/CH Trong/E hình/N trên/E :/CH var/Np là/V một/M biến/V thông_thường/A ,/CH có/V địa_chỉ/N 1001/Np và/Cc giá_trị/N 50/M ptr/Np là/V một/M biến/V kiểu/N con_trỏ/Np ,/CH có/V địa_chỉ/N 2047/Np và/Cc giá_trị/N 1001/Np ./CH\nGiá_trị/N của/E ptr/Np là/V địa_chỉ/N của/E biến/V var/Np ./CH\nMảng/N (Arrays)/Np Mảng/N là/V một/M cấu_trúc/N dữ_liệu/N cực_kỳ/R đơn_giản/A và/Cc có_thể/R xem/V như/C một/M danh_sách/N với/E chiều_dài/N cố_định/A ./CH\nMảng/N là/V một/M cấu_trúc/N dữ_liệu/N “đẹp”/Np bởi/E tính/V đơn_giản/A của/E nó/P ./CH\nMảng/N đặc_biệt/A thích_hợp/A cho/E các/L tình_huống/N mà/C ta/P biết/V trước/E được/V số_lượng/N phần_tử/N hoặc/Cc có_thể/R xác_định/V được/V khi/N chạy/V chương_trình/N ./CH\nGiả_sử/Np bạn/N cần/V một/M đoạn/Nc mã/N để/E tính/V giá_trị/N trung_bình/A của/E một_vài/L con_số/N ./CH\nMảng/N là/V sự/N lựa_chọn/V tuyệt_vời/A để/E giữ/V các/L giá_trị/N bởi/E yêu_cầu/V bài_toán/N không/R đòi_hỏi/V một/M thứ_tự/N lưu_trữ/Np cụ_thể/A và/Cc các/L phép_tính/Np toán/N cũng/R không/R đòi_hỏi/V gì/P khác/A ngoài/E việc/N duyệt/V qua/V toàn_bộ/L các/L phần_tử/N ./CH\nMột/M trong/E những/L sức_mạnh/N khác/A của/E mảng/N chính/T là/V ta/P có_thể/R truy_cập/Np các/L phần_tử/N của/E mảng/N một_cách/N ngẫu_nhiên/A bằng/E chỉ_số/N ./CH\nVí_dụ/C như/C ,/CH bạn/N có_một/Np danh_sách/N gồm/V tên/N của/E các/L học_sinh/N trong/E lớp_học/N ./CH\nMỗi/L học_sinh/N đánh_số/Np từ/E 1/M đến/E n/Ny ./CH\nKhi/N đó/P để/E đọc/V hoặc/Cc lưu/V tên/N học_sinh/N thứ/N i/M bạn/N chỉ_cần/Np gọi/V tới/E studentNamei/Np ./CH\nDo/E các/L phần_tử/N của/E mảng/N ở/E vị_trí/N liên_tiếp/A nhau/N trong/E bộ_nhớ/Np máy_tính/N ,/CH nên/C thao_tác/V này/P chỉ/R mất/V độ/N phức_tạp/A \\mathcalO(1)/Np ./CH\nTuy_nhiên/C cũng/R vì/E lý_do/N này/P ,/CH nên/C việc/N tăng/V kích_thước/N mảng/N hay/Cc thêm/V //CH xóa/V 1/M phần_tử/N vào/E vị_trí/N bất_kỳ/A của/E mảng/N có/V độ/N phức_tạp/A \\mathcalO(N)/Np ./CH\nMảng/N có_số/Np lượng/N phần_tử/N cố_định/A ,/CH mỗi/L phần_tử/N giữ/V của/E mảng/N một/M thông_tin/N và/Cc ở/E một/M vị_trí/N không_đổi/Np đã/R được/V định_nghĩa/N trước/E đó/P ./CH\nTổng_kết/V Bộ_nhớ/Np cố_định/A ,/CH cần/V biết/V trước_số/Np phần_tử/N Truy_cập/Np một/M vị_trí/N bất_kỳ/A :/CH \\mathcalO(1)/Np ./CH\nThêm/V //CH xóa_một/Np phần_tử/N :/CH \\mathcalO(N)/Np ./CH\nMở_rộng/V Trong_C++_STL/Np ,/CH có/V CTDL/Np vector/Np ,/CH được/V gọi_là/V mảng/N động/N ./CH\nCTDL/Np này/P cho_phép/V thực_hiện/V các/L thao_tác/V :/CH Truy_cập/Np một/M vị_trí/N bất_kỳ/A :/CH \\mathcalO(1)/Np ./CH\nThêm/V //CH Xóa/V 1/M phần_tử/N vào/E cuối/N mảng/N :/CH độ/N phức_tạp/A trung_bình/A :/CH \\mathcalO(1)/Np ./CH\nThêm/V //CH xóa_một/Np phần_tử/N bất_kỳ/A :/CH \\mathcalO(N)/Np ./CH\nĐể/E làm/V được/V điều/N này/P ,/CH vector/Np sử_dụng/V kĩ_thuật/N \"nhân/Np đôi/M mảng\"/Np :/CH Mảng/N của/E ta/P sẽ/R có_thể/R cấp_phát/V bộ_nhớ/Np tối_đa/A là/V 2/M lần/N chiều_dài/N thật/R (số/Np phần/N tử)/Np của/E mảng/N ./CH\nNếu/C mảng/N vẫn/R chưa/R đầy/A (bộ/Np nhớ/V cấp_phát/V lớn/A hơn/A chiều_dài/N thật/R của/E mảng)/Np ,/CH ta/P chỉ_cần/Np đơn_giản/A là/V thêm/V phần_tử/N mới/R vào/E cuối/N mảng/N ./CH\nNếu/C mảng/N đầy/A ,/CH ta/P làm/V như_sau/Np :/CH Cấp_phát/V bộ_nhớ/Np mới/R bằng/E 2/M lần/N chiều_dài/N mảng/N Copy/Np mảng/N cũ/A qua/V bộ_nhớ/Np mới/R cấp_phát/V ./CH\nNhư_vậy/X ta/P có/V mảng/N mới/R với/E dữ_liệu/N giống/N với/E mảng/N cũ/A ,/CH và/Cc còn/R dư/A ra/V chỗ_trống/Np ở/E cuối/N mảng/N mới/R ./CH\nThêm/V phần_tử/N mới/R vào/E cuối/N mảng/N mới/R ./CH\nNếu/C ta/P thêm/V N/Ny phần_tử/N vào/E cuối/N mảng/N ,/CH thì/C độ/N phức_tạp/A là/V :/CH \\mathcalO(1/Np +/CH 2/M +/CH 4/M +/CH 8/M +/CH 16/M +/CH ./CH ./CH ./CH )/CH cho/E các/L thao_tác/V cấp_phát/V bộ_nhớ/Np \\mathcalO(1)/Np cho/E việc/N ghi/V phần_tử/N mới/R vào/E phần/N bộ_nhớ/Np trống/A ./CH\nDo_đó/C độ/N phức_tạp/A tổng/N không/R quá/R \\mathcalO(N)/Np ,/CH và/Cc độ/N phức_tạp/A trung_bình/A của/E 1/M thao_tác/V là/V \\mathcalO(1)/Np ./CH\nDanh_sách/N liên_kết/V (Linked/Np Lists)/Np Danh_sách/N liên_kết/V là/V một/M cấu_trúc/N dữ_liệu/N có_thể/R giữ/V một_số/L lượng/N phần_tử/N tùy_ý/V và/Cc dễ_dàng/A thay_đổi/V kích_thước/N ,/CH cũng_như/C dễ_dàng/A bỏ_đi/Np các/L phần_tử/N bên_trong/Np nó/P ./CH\nDanh_sách/N liên_kết/V ,/CH hiểu/V theo/V cách/N đơn_giản/A nhất_là/X một/M con_trỏ/Np trỏ/Np tới/E một/M nút/N dữ_liệu/N ./CH\nMỗi/L nút/N dữ_liệu/N bao_gồm/V dữ_liệu/N cần/V chứa/V và/Cc một/M con_trỏ/Np trỏ/Np tới/E nút/N tiếp_theo/V ./CH\nTại/E điểm/N cuối_cùng/A ,/CH con_trỏ/Np trỏ/Np tới/E giá_trị/N NULL/Np ./CH\nVới/E thiết_kế/V như/C ban_đầu/N ,/CH một/M danh_sách/N liên_kết/V thích_hợp/A để/E lưu_trữ/Np dữ_liệu/N khi/N chưa/R biết/V trước/E được/V số_lượng/N các/L phần_tử/N hoặc/Cc các/L phần_tử/N thường_xuyên/A thay_đổi/V ./CH\nTuy_vậy/C ,/CH chúng_ta/P không_thể/R truy_cập/Np một_cách/N ngẫu_nhiên/A các/L phần_tử/N của/E danh_sách/N liên_kết/V ./CH\nĐể/E tìm_kiếm/V một/M giá_trị/N ,/CH ta/P phải/V bắt_đầu/V tại/E phần_tử/N đầu_tiên/A và/Cc duyệt/V tuần_tự/R qua/V các/L phần_tử/N cho/E tới/E khi/N bắt_gặp/V được_giá/Np trị/V mà/C mình/P cần/V tìm_kiếm/V ./CH\nĐể/E chèn/V một/M nút/N vào/E danh_sách/N liên_kết/V ,/CH bạn/N cũng/R phải/V thực_hiện/V tương_tự/A ./CH\nĐộ/N phức_tạp/A của/E cả/P 2/M thao_tác/V này/P là/V \\mathcalO(N)/Np ./CH\nTuy_nhiên/C ,/CH nếu/C ta/P biết/V được/V con_trỏ/Np trỏ/Np đến/E phần_tử/N cần/V xóa/V ,/CH thì/C độ/N phức_tạp/A chỉ/R là/V \\mathcalO(1)/Np ./CH\nDễ_dàng/A nhận_thấy/Np ,/CH thao_tác/V tìm_kiếm/V và/Cc chèn/V trong/E danh_sách/N liên_kết/V không/R thật_sự/A hiệu_quả/N ./CH\nSau_đây/Np là/V cài_đặt/V kiểu/N dữ_liệu/N danh_sách/N liên_kết/V thông_thường/A :/CH struct/Np ListNode/Np int/Np data/Np ;/CH //CH dữ_liệu/N được/V lưu/V ở/E nút/N của/E linked/Np list/Np ListNode/Np nextNode/Np ;/CH //CH con_trỏ/Np trỏ/Np tới/E phần_tử/N tiếp_theo/V của/E linked/Np list/Np ./CH\n;/CH ListNode/Np firstNode/Np ;/CH Bạn/N có_thể/R chèn/V một/M nút/N mới/R vào/E bằng/E cách/N chèn/V chúng/P vào/E đầu/N danh_sách/N ./CH\nThao_tác/V này/P có/V độ/N phức_tạp/A là/V \\mathcalO(1)/Np ./CH\nListNode/Np newNode/Np =/CH new_ListNode/Np ();/Np newNode/Np -gt;/Np nextNode/Np =/CH firstNode/Np ;/CH firstNode/Np =/CH newNode/Np ;/CH Duyệt/V qua/V toàn_bộ/L danh_sách/N liên_kết/V rất/R đơn_giản/A như_sau/Np :/CH ListNode/Np curNode/Np =/CH firstNode/Np ;/CH while/Np (/CH curNode/Np !/CH =/CH NULL/Np )/CH cout/Np lt;lt;/Np curNode/Np -gt;/Np data/Np lt;lt;/Np endl/Np ;/CH curNode/Np =/CH curNode/Np -gt;/Np nextNode/Np ;/CH Ngoài_ra/X ,/CH ta/P cũng/R có_thể/R lưu/V thêm/V con_trỏ/Np trỏ/Np vào/E phần_tử/N cuối/N của/E danh_sách/N ./CH\nKhi/N đó/P độ/N phức_tạp/A để/E thêm/V 1/M phần_tử/N vào/E cuối/N danh_sách/N là/V \\mathcalO(1)/Np ./CH\nTổng_kết/V Thêm/V //CH xóa/V 1/M phần_tử/N mới/R vào/E đầu/N //CH cuối/N :/CH \\mathcalO(1)/Np Truy_cập/Np 1/M phần_tử/N ở/E vị_trí/N bất_kỳ/A :/CH \\mathcalO(N)/Np ./CH\nTài_liệu/N tham_khảo/V Topcoder_Wikipedia/Np\n", "title": "Mảng và danh sách liên kết\n", "link": "http://vnoi.info/wiki/algo/data-structures/array-vs-linked-lists\n"}