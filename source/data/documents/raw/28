Quy hoạch động trên cây --- Dynamic programming on trees
http://www.giaithuatlaptrinh.com/?p=1968
Nơi tổng hợp và chia sẻ những kiến thức liên quan tới giải thuật nói chung và lý thuyết khoa học máy tính nói riêng.   in  | Nhiều bài toán  trên đồ thị trở nên dễ dàng khi đồ thị đầu vào là một cây, i.e, không có chu trình. Dễ dàng ở đây hiểu là giải được trong thời gian đa thức (thông thường tuyến tính). Công cụ chúng ta thường sử dụng khi giải các bài toán  trên cây là  quy hoạch động. Trong bài này, chúng ta sẽ tìm hiểu thuật toán quy hoạch động giải bài toán  (independent set)trên cây; một bài toán  trên đồ thị.  Ta nhắc lại bài toán tập độc lập.Một tập đỉnh  của đồ thị (đơn, vô hướng)  gọi là một tập độc lập nếu không tồn tại cạnh của đồ thị nối hai đỉnh trong . 
Ví dụ:

 Tập độc lập lớn nhất là tập các đỉnh được tô màu đỏ. Tập này có trọng số 17. Số bên cạnh mỗi đỉnh là trọng số của nó.Ta gọi tập độc lập có tổng trọng số lớn nhất là tập độc lập lớn nhất. Gọi  là số đỉnh của . Ta chỉ định một đỉnh  bất kì nào đó của  làm gốc của cây . Các đỉnh có bậc 1 còn lại ta gọi là đỉnh lá (leaf vertex). Mỗi nút trong  sẽ có một cây con tương ứng, kí hiệu , nhận  làm gốc. Gọi  là bảng quy hoạch động trong đó:Với mỗi nút lá , theo định nghĩa, ta có  và . Ta sẽ cập nhật bảng theo thứ tự từ lá dần lên gốc. Khi cập nhật bảng  tại nút , ta sẽ đảm bảo giá trị của bảng tại các nút con đã được cập nhật trong vòng lặp trước đó. Gọi  là các  nút con của một nút trong . Theo định nghĩa của tập độc lập, nếu  thuộc tập độc lập  thì các nút con của  sẽ không nằm trong . Do đó:   Nếu  không thuộc tập độc lập , thì ta có thể cho hoặc không cho các nút con của  vào tập độc lập, miễn sao tổng trọng số của tập là lớn nhất. Do đó:  Khi ta cập nhật xong  và  của nút gốc , thì trọng số của tập độc lập lớn nhất là:  Tìm tập độc lập ta chỉ cần truy ngược lại bảng. Kĩ thuật này ta đã thảo luận tại . Khi thực thi thuật toán, để đảm bảo các giá trị của nút con đã được cập nhật trước khi ta cập nhật nút cha, ta sẽ duyệt và cập nhật theo thứ tự sau (). Sau khi ta cập nhật xong bảng tại một nút , ta sẽ "gửi" các giá trị đó lên nút cha để cập nhật nút cha theo phương trình  và .   
Ví du:

 Kết quả của bảng quy hoạch động áp dụng cho đồ thị trong Figure 1. Đỉnh màu xanh được lấy làm gốc của cây. Cạnh mỗi đỉnh  là nhãn có dạng  trong đó  và . Thủ tục cập nhật bảng quy hoạch động duyệt qua mỗi đỉnh đúng một lần. Mỗi lần duyệt một đỉnh, ta mất O(1) thao tác để "gửi" giá trị của nút  để cập nhật giá trị của nút cha. Do đó, tổng thời gian của thuật toán là  Ta có thể giải một số bài toán NP-hard trên cây như: phủ đỉnh (vertex cover), đường đi dài nhất (longest path), dominating set, v.v. Tất cả đều có thể giải bằng quy hoạch động. [1] J. Erickson, , UIUC, 2014. , , , , Trackback link: Powered by  and 