Tổng quan về cây khung nhỏ nhất.
http://www.giaithuatlaptrinh.com/?p=1266
Nơi tổng hợp và chia sẻ những kiến thức liên quan tới giải thuật nói chung và lý thuyết khoa học máy tính nói riêng.   in  | Bài này mình đưa ra một cách nhìn tổng quan về bài toán cây khung nhỏ nhất và một số comments của mình trên những tài liệu tham khảo liên quan. Một phần của bài viết này trước đây mình viết trên trang facebook, sau đó được viết lại một cách hình thức hơn trong bài thuật toán Kruskal và bây giờ thì mình viết thành một bài riêng biệt. Trong bài toán cây khung nhỏ nhất, ta chỉ xét đồ thị vô hướng. Do đó, từ giờ trở đi, chúng ta sẽ mặc định đồ thị đầu vào là vô hướng. Một ví dụ đồ thị (hình (1)) với trọng số và một cây khung nhỏ nhất (hình (2)) với trọng số 13.Trong bài  mà mình đã viết trước đây, bạn đọc đã có cơ hội làm quen với   và cũng đã thấy cây khung có liên quan chặt chẽ với matroid này. Cụ thể, cơ sở của Graphic Matroid của một đồ thị chính là cây khung của đồ thị đó. Từ lý thuyết matroid, ta biết bài toán tìm cơ sở của matroid có trọng số lớn nhất (nhỏ nhất) có thể tìm được bằng giải thuật tham lam. Do đó, cũng không có gì lạ nếu ta có thể tìm được cây khung nhỏ nhất sử dụng thuật toán tham lam. Thực tế, thuật toán trong bài lý thuyết matroid có thể được sửa đổi (chi tiết coi như bài tập cho bạn đọc) để thu được thuật toán tìm cây khung nhỏ nhất trong thời gian .Thuật toán Kruskal mà ta sẽ tìm hiểu sau đây chính là thuật toán tham lam trong matroid. Dưới góc độ đồ thị, ta có thể thực thi thuật toán Kruskal trong thời gian . Trước khi đi vào chi tiết tìm hiểu các thuật toán cho bài toán cây khung nhỏ nhất, chúng ta sẽ tìm hiểu một số tính chất của cây khung nhỏ nhất trước.Sau đây là một số tính chất chung của một cây khung (không nhất thiết là nhỏ nhất): Chứng minh các tính chất trên không khó và coi như bài tập cho bạn đọc. Chứng minh tính chất (1) ta có thể dùng quy nạp. Tính chất (2) dựa vào tính chất liên thông của đồ thị và (3) dựa vào tính chất  là một cây. Ví dụ lát cắt tương ứng với  của đồ thị trong hình (a) là các cạnh màu đỏ trong hình (b).
 Một số tính chất sau của cây khung   sẽ rất hữu ích trong thiết kế thuật toán. 
Phương pháp chứng minh các tính chất trên đều giống nhau, sử dụng phương pháp lập luận tráo đổi (exchange argument). Mình sẽ chứng minh tính chất (4) và (5) để minh họa cho lập luận này.  Chứng minh (6) tương tự và coi như bài tập cho bạn đọc.  (4) Giả sử cạnh  lớn hơn (hoàn toàn) các cạnh khác trong cùng một chu trình  và giả sử một cây khung nhỏ nhất  chứa . Xóa  khỏi , ta sẽ thu được hai cây . Do  là một chu trình, tồn tại một cạnh khác , gọi là ,  của  nối  với . Do đó  là một cây khung của  có trọng số nhỏ hơn  (do  < ), trái với giả thiết  là một cây khung nhỏ  nhất.(5) Giả sử cạnh  nhỏ hơn (hoàn toàn) các cạnh khác trong cùng một lát cắt  và giả sử tồn tại một cây khung nhỏ nhất   chứa . Thêm  vào , ta sẽ thu được một chu trình  chứa . Do  là lát cắt,  phải chứa ít nhất một cạnh  khác  của . Do đó,  là một cây khung của  có trọng số nhỏ hơn  (do  < ), trái với giả thiết  là một cây khung nhỏ  nhất.Có rất nhiều thuật toán đã được phát triển cho bài toán cây khung nhỏ nhất. Mình sẽ viết 4 bài về 4 thuật toán khác nhau. Mỗi thuật toán có điểm mạnh và yếu riêng. Phần đọc thêm dưới đây mình sẽ giới thiệu thêm một số thuật toán khác, và liên kết tới nguồn tham khảo để bạn đọc dễ tìm.Như đã nói ở phần matroid, thuật toán Kruskal [1] là một thuật toán tham lam. Thuật toán này khá dễ hiêu vả chứng minh. Thuật toán này tìm cây khung nhỏ nhất dựa trên tính chất chu trình: liên tục thêm cạnh theo thứ tự tăng dần của trọng số vào cây khung nếu cạnh đó không tạo ra chu tình với cây khung hiện tại. Tuy nhiên, để thực hiện hiệu quả với thời gian , ta phải sử dụng đến cấu trúc . Chi tiết xem thêm .Thuật toán Prim [2] tìm cây khung nhỏ nhất dựa trên tính cắt (tính chất 5) của cây khung. Thuật toán duy trì một tập đỉnh  và một cây khung  cho tập đỉnh này. Ban đầu,  chỉ có một đỉnh (bất kì) của đồ thị và  không chứa cạnh nào. Mỗi bước, thuật toán tìm ra đỉnh  không thuộc  sao cho cạnh kề với  là cạnh có trọng số nhỏ nhất trong số các cạnh trong lắt cắt  và thêm  vào . Trong giả mã dưới đây, ta sử dụng  để biểu diễn cả tập  và cây khung của tập  này. Thuật toán  có thể dễ dàng thực thi với thời gian , và nếu kết hợp với , ta có thể giảm xuống . Với những bạn đã quen với  thì có lẽ thực thi thuật toán này sẽ dễ hơn với bạn. Chi tiết xem thêm .Thuật toán Borůvka tìm cây khung nhỏ nhất dựa trên phép co cạnh (edge contraction). Co một cạnh được hiểu là phép gộp hai đỉnh kề với cạnh đó lại với nhau thành một đỉnh mới, và xóa đi các cạnh lặp (loop) và các cạnh song song. Phép co cạnh là một phép rất mạnh và được sử dụng nhiều trong lý thuyết đồ thị. Tuy nhiên, trong máy tính, việc thực thi phép co cạnh lại không hề đơn giản. Đặc biệt của thuật toán này đó là nó có một số tính chất cự kì đẹp. Với đồ thị thưa, , thuật toán này có thời gian tuyến tính. Với đồ thị dày, thuật toán có thời gian . Các thuật toán tốt nhất bây giờ cho bài toán cây khung cũng xuât phát từ sửa đổi thuật toán Boruvka. Chi tiết xem thêm .Thuật toán Karger-Klein-Tarjan (KKT)[5] là thuật toán ngẫu nhiên, có thời gian  , trả lại cây khung nhỏ nhất với xác suất ít nhất  trong đó  là số cạnh của đồ thị (xác suất cao). Thuật toán này là sự kết hợp hoàn hảo giữa phương pháp lấy mẫu và thuật toán Boruvka. Cho đến này thì chưa có thuật toán tất định (deterministic) nào có thời gian tuyến tính. Thuật toán tất định nhanh nhất được phát triển bởi [6] với thời gian  ( là hàm  ngược.). Câu hỏi tồn tại hay không một thuật toán tuyến tính tìm cây khung nhỏ nhất vẫn là một câu hỏi mở cho đến nay. Thuật toán tuyến tính KKT cũng như một lời gợi ý cho chúng ta biết thuật toán như vậy có thể tồn tại. Xem tại  của Jason Eisner, 1997, về bài toán cây khung nhỏ nhất khá đầy đủ. Ngoài bài toán tìm cây khung nhỏ nhất, bạn đọc còn có thể tìm được những bài toán liên quan như kiểm tra xem một cây khung có phải là nhỏ nhất hay không, và phiên bản động (dynamic) của cây khung tại đó. Cách viết rất dễ hiểu. Paper của Karger, Klein và Tarjan [5] viết về thuật toán KKT cũng cực kì dễ đọc, dễ hiểu. Mô tả thuật toán khá ngắn gọn. Chỉ có phân tích là hơi phức tạp hơn một chút. Về lecture note, mình thấy  của Uri Zwick khá dễ hiểu. Phần bài tập của note này có nhiều bài tập hay, trong đó có một số tính chất khá thú vị của thuật toán Borůvka mà mình đã nói ở trên.Về bài toán cây khung nhỏ nhất cho đồ thị có hướng, mình khuyến khích bạn đọc tham khảo  của Uri Zwick.  Nếu bạn nào nghiên cứu sâu về bài toán cây khung, thuật toán Chazelle [6] cũng là bài báo phải đọc. Thuật toán sử dụng cấu trúc dữ liệu Soft Heap, và mô tả của cấu trúc này trong [6] khá phức tạp. Kaplan và Zwick đã đơn giản hóa cấu trúc dữ liệu này khá nhiều, và bạn đọc có thể tìm thấy .Bạn nào biết các paper hoặc bài viết nào hay về cây khung, xin để lại comment bên dưới để mình cập nhật vào bài viết.[1] Kruskal, Joseph B.  Proceedings of the American Mathematical society 7.1 (1956): 48-50.
[2] Prim, Robert Clay.  Bell System Technical Journal 36.6 (1957): 1389-1401.
[3] Borůvka, Otakar (1926). . Elektronický Obzor (in Czech) 15: 153–154.
[4] Nešetřil, Jaroslav, Eva Milková, and Helena Nešetřilová.  Discrete Mathematics 233.1 (2001): 3-36.
[5] Karger, David R.; Klein, Philip N.; Tarjan, Robert E. . Journal of the ACM 42 (2): 321–328, 1995.
[6] Chazelle, Bernard.  Journal of the ACM (JACM) 47.6 (2000): 1028-1047. , , Trackback link: Powered by  and 