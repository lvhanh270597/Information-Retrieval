Quy dẫn và NP-complete -- Reduction and NP-complete
http://www.giaithuatlaptrinh.com/?p=1763
Nơi tổng hợp và chia sẻ những kiến thức liên quan tới giải thuật nói chung và lý thuyết khoa học máy tính nói riêng.   in  | Trong , chúng ta đã tìm hiểu hai lớp bài toán:  và . Nói ngắn gọn,   là lớp bài toán quyết định mà chúng ta có thể giải trong thời gian đa thức còn   là lớp bài toán mà chúng ta có thể kiểm tra lời giải trong thời gian đa thức. Về mặt trực quan, các bài toán dễ giải cũng là các bài toán dễ kiểm tra. Do đó,   . Câu hỏi  vs  "Liệu các bài toán dễ kiểm tra lời giải thì có dễ giải hay không?" vẫn là một câu hỏi mở chưa có lời giải.  Trong bài này, chúng ta sẽ xem một cách tiếp cận đối với câu hỏi  vs  thông qua một lớp các bài toán  trong số các bài toán trong lớp . Những bài toán đó được gọi là bài toán thuộc lớp . Nhưng làm thế nào để biết được bài toán nào là khó nhất trong số vô hạn các bài toán trong ? Cook và Levin độc lập đưa ra câu trả lời cho câu hỏi này, câu trả lời trở thành . Định lý này (cùng một số công trình khác) mang về cho Cook giải Turing. Công cụ sử dụng trong chứng minh của định lý Cook-Levin chính là quy dẫn (reduction). Phần đầu tiên của bài viết ta sẽ nghiên cứu công cụ này.         Trong lớp  có cả những bài toán khó và dễ. Lớp các bài toán khó nhất là lớp  dưới đây. Một input  của một bài toán quyết định A được gọi là một -instance nếu đầu ra tương ứng của input này là . Ngược lại, ta gọi  là một  -instance của bài toán A. Ta sẽ dùng  để kí hiệu chiều dài của input .   Chữ Karp ở trên là tên của nhà khoa học , người đưa ra định nghĩa này.  Quy dẫn có nhiều dạng khác nhau, nhưng ở đây ta chỉ xét quy dẫn Karp (Karp reduction) định nghĩa ở trên. Do đó, ta sẽ nói ngắn gọn là quy dẫn.  
 Ta có nhận xét: nếu  là một đa thức bậc ,  là một đa thức  bậc  thì  là một đa thức bậc . Một cách ngắn gọn, ta có:  Gọi  là một input của bài toán . Gọi  lần lượt là giải thuật quy dẫn từ  sang  và từ  sang . Gọi  là một giải thuật quy dẫn từ  sang , trong đó, với mỗi , ta thu được đầu ra . Theo định ngĩa, thời gian tính toán của thuật toán  là:  Do  là giải thuật có thời gian đa thức, ta có  (một giải thuật đa thức không thể có đầu ra có chiều dài lũy thừa). Theo , ta có   (dpcm). 
 Gọi  là một đầu vào của bài toán . Để xác định xem  có phải là một -instance của  hay không, ta sẽ:Theo , , cả hai bước trên đều có thể thực hiện được trong thời gian đa thức (dpcm).  Quy dẫn cung cấp cho chúng ta một công cụ rất đẹp để định lượng "độ khó" giữa hai bài toán. Nếu , Lemma 1 cho chúng ta biết  bài toán  sẽ dễ hơn bài toán , theo nghĩa, nếu ta giải được  trong thời gian đa thức thì ta cũng giải được  trong thời gian đa thức. Điều ngược lại có thể sẽ không đúng.  Sau đây ta xét ví dụ minh họa quy dẫn giữa hai bài toán  và . 
Ví dụ:

 (a) Một bàn cờ  và một số ô bị xóa (các ô bị tô màu đen) và (b) một cách xếp các quân domino phủ kín bàn cờ.  
Ví dụ:

 Đồ thị hai phía với các đỉnh tô màu xám ở một phía và các đỉnh màu trắng ở phía còn lại. Các cạnh tô đậm màu đỏ là một cặp ghép hoàn hảo. Đồ thị này được xây dựng từ thuật toán quy dẫn trình bày dưới đây áp dụng cho Figure 1(a).Ta có:     
 Từ bàn cờ kích thước , ta tạo ra một đồ thị  trong đó mỗi đỉnh của đồ thị là một ô (chưa bị xóa) của bàn cờ và mỗi cạnh nối hai đỉnh tương ứng với hai ô kề nhau của bàn cờ (hai ô vuông có chung một cạnh). Đồ thị  là đồ thị hai phía vì ta có thể lấy các đỉnh tương ứng với các ô đen của bàn cờ là một phía và các đỉnh tương ứng với các ô trắng là phía còn lại. Ta chỉ cần chứng minh bàn cờ có thể phủ được bằng các quân Domino khi và chỉ khi đồ thị  có cặp ghép hoàn hảo. Thật vậy, nếu bàn cờ có thể phủ kín được bằng cách quân Domino, mỗi quan Domino sẽ tương ứng với một cạnh của cặp ghép. Do đó,  có một cặp ghép hoàn hảo. Ngược lại, với mỗi cạnh của cặp ghép hoàn hảo của , ta đặt một quân Domino phủ hai đỉnh tương ứng của cạnh đó. Do cặp ghép là hoàn hảo, các quân Domino sẽ phủ kín bàn cờ (dpcm).Bài toán tìm cặp ghép hoàn hảo của đồ thị hai phía có thể giải được trong , ta suy ra    . Do đó, theo Lemma 1,   .Ta đã có trong tay công cụ để xác định độ khó giữa các bài toán. Giờ ta có thể định nghĩa một lớp các bài toán "khó", khó hơn tất cả các bài toán trong lớp .   Nếu bài toán  trong định nghĩa trên cũng thuộc lớp , ta nói  thuộc lớp .   =      Nhắc lại: một bài toán quyết định được gọi là thuộc lớp   nếu bài toán đó có một bằng chứng đơn giản dễ kiểm tra. Theo định nghĩa trên,   chỉ là một lớp bài toán con của lớp . Lớp  còn bao gồm những bài toán mà kể cả cho máy tính vô hạn thời gian, nó cũng không giải được. Ngược lại, tất cả các bài toán thuộc lớp  ta đều có thể giải được trong một thời gian hữu hạn; cụ thể là thời gian lũy thừa.Cũng theo định nghĩa trên, một bài toán thuộc   thì cũng thuộc  . Do đó, nó là một bài toán "khó nhất" trong số các bài toán trong lớp . Nếu ta có thể giải được một bài toán nào đó trong lớp   trong thời gian đa thức thì ta có thể giải được tất cả các bài toán trong lớp   trong thời gian đa thức.Lớp bài toán  theo định nghĩa ở trên thực sự là một lớp bài toán thú vị. Tuy nhiên, liệu một bài toán   có tồn tại hay không? Nếu tồn tại thì nó trông như thế nào? Cook và Levin chứng minh rằng không những tồn tại một bài toán   mà còn tồn tại một bài toán  rất "đẹp".   Định nghĩa bài toán , bạn đọc có thể xem . Chứng minh định lý Cook-Levin vượt quá khuôn khổ của bài viết. Bạn đọc có thể xem tại CLRS Chapter 36 [2]. Nếu nghĩ sâu hơn về định lính này, thực sự đây là một kết quả ngạc nhiên. Tất cả các bài toán  đều "dễ" hơn . Bài toán thực sự mà Cook-Levin chứng minh thuộc NP-complete là , một phiên bản dạng mạch điện tử của . Richard Karp chính là người chứng minh  mà ta định nghĩa ở blog này thuộc . Do không muốn đi "đường vòng" qua  nên mình cho  vào định lí Cook-Levin.Sau định lý Cook-Levin, Richard Karp [3] chứng minh 21 bài toán khác cũng thuộc lớp . Một vài trong số đó là các bài toán  mà ta đã định nghĩa ở . Trong post tới đây, ta sẽ chứng minh một số bài toán đó là . Các chứng minh của Karp đều dựa trên bổ đề sau: 
 Gọi  là một bài toán trong . Vì , ta có . Do , theo tính bắc cầu của quy dẫn, ta suy ra . Như vậy, mọi bài toán trong  đều có thể quy về , do đó, . Do , ta suy ra dpcm.Sau đây ta sẽ chứng minh   thuộc  để minh họa ý tưởng. Bài toán  là bài toán  trong đó mỗi mệnh đề chỉ có tối đa 3 literals (xem định nghĩa đầy đủ tại). 
 Theo Lemma 3 và Cook-Levin theorem, ta chỉ cần chứng minh    Gọi  là một input . Ta sẽ tìm cách biến đổi, trong thời gian ,  thành một biểu thức  sao cho    và  thỏa mãn được (satisfiable) khi và chỉ khi  thỏa mãn được. Lấy một mệnh đề  trong  mà mệnh đề này có  biến với . Các biểu thức 3 biến ta chỉ cần giữ nguyên. Không mất tính tổng quát, giả sử . Chú ý, ở đây dấu phủ trên hai biến  và  không đóng vai trò gì đặc biệt. Thêm một biến  (không xuất hiện trong  ) và thay  bằng hai mệnh đề mới:  và gọi  là biểu thức thu được. Ta thấy:Để thu được biểu thức , ta chỉ cần áp dụng phép biến đổi trên nhiều lần đối với mọi mệnh đề có ít nhất 4 biến cho đến khi nào ta thu được biểu thức mà các mệnh đề chỉ có không quá 3 biến. Số lần áp dụng phép biến đổi trên tối đa là , do đó, tổng thời gian của các phép biến đổi là . Theo tính chât 3, biểu thức cuối cùng thỏa mãn được khi và chỉ khi biểu thức ban đầu thỏa mãn được (dpcm).[1] S. A. Cook.  Proceedings of the Third Annual ACM Symposium on Theory of Computing. pp. 151-158. ACM, 1971.
[2] T. H. Cormen, C. E. Leiserson, R. L. Rivest, C. Stein. . Chapter 36. MIT Press and McGraw-Hill. ISBN 0-262-03293-7.  (2001).
[3] R. M. Karp.  Complexity of Computer Computations. Springer US, 1972. 85-103. , , , , , , , , Trackback link: Powered by  and 