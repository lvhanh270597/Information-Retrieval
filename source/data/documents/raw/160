Cây AVL I --  AVL tree I
http://www.giaithuatlaptrinh.com/?p=2054
Nơi tổng hợp và chia sẻ những kiến thức liên quan tới giải thuật nói chung và lý thuyết khoa học máy tính nói riêng.   in  | Xem bài tiếp theo về .Trong , chúng ta đã tìm hiểu sơ bộ về cây nhị phân tìm kiếm, tìm kiếm trên cây và định nghĩa hai loại cây: AVL và cây đỏ đen. Trong bài này ta tìm hiểu cách chèn thêm một khóa vào cây AVL mà vẫn đảm bảo các tính chất của cây AVL sau khi chèn. Bài tiếp theo, chúng ta sẽ tìm hiểu cách xóa một nút khỏi cây AVL.Một số khái niệm như chiều cao  của một nút , bạn đọc xem lại . Mình chỉ nhắc lại tính chất cân bằng của cây AVL ở đây.   
Trong , ta đã chứng minh rằng cây AVL có  nút trong sẽ có chiều cao . Ở đây ta vẫn giữ quy ước các nút lá là .Giả sử khóa ta muốn chèn vào trong cây AVL là một , i.e, không có khóa nào trong cây có cùng giá trị. Điều này có thể được đảm bảo bằng cách kiểm tra xem khóa đã tồn tại trong cây hay chưa trước khi thực hiện chèn. Sau khi chèn một khóa, ta phải đảm bảo hai điều kiện: Để đảm bảo điều kiện (1), ta luôn chèn một khóa mới vào vị trí sao cho nút mới chèn là nút lá của cây. Tạm thời gác lại điều kiện (2), giả mã chèn vào cây như sau: Ví dụ trong Figure 1 dưới đây, ta có một cây AVL với tập khóa  (Figure 1(a)). Ta chèn thêm khóa 15 vào cây trong Figure 1(a), thu được cây trong Figure 1(b). Dễ dàng kiểm tra được cây trong Figure 1(b) vẫn là cây AVL. Ta chèn tiếp khóa 12 vào Figure 1(b), thu được Figure 1(c). Cây trong Figure 1(c) không còn là cây AVL nữa vì hai nút tô màu đỏ trong cây vi phạm điều kiện trong phương trình .

 (a) một cây AVL. Node có kí hiệu  lần lượt tương ứng với trường hợp chiều cao con phải   chiều cao con trái, chiều cao con phải   chiều cao con trái 1 đơn vị và chiều cao con phải   chiều cao con trái 1 đơn vị. (b) cây thu được sau khi chèn khóa 15. Chú ý sự thay đổi của 3 kí hiệu . (c) cây thu được sau khi chèn thêm khóa 12. Hai nút tô màu hồng và có dấu  là nút bị mất cân bằng, chiều cao con phải lớn hơn chiều cao con trái 2 đơn vị tại các nút này.  Phép chèn như trên đảm bảo điều kiện (1) nhưng sau khi chèn, cây mới có thể vi phạm điều kiện cân bằng . Ví dụ trong Figure 1(c), sau khi chèn, các nút  đều vi phạm điều kiện cân bằng. Do đó, ta cần một cơ chế để đảm bảo tính cân bằng sau khi chèn. Để hiểu các cơ chế này, trước hết, ta nghiên cứu cấu trúc của các nút bị mất cân bằng. Ta có nhận xét: 
Gọi  là nút mới chèn. Gọi  là nút bị mất cần bằng gần  nhất. Gọi  là chiều cao của nút  trước khi chèn . Không mất tính tổng quát, ta giả sử  được chèn vào  của . Ta có: 
Gọi  là nút con phải của . Theo Observation 2,  . Bổ đề sau cho chúng ta biết cấu trúc của cây tại nút . 
 Giả sử  < . Nếu  được vào cây con phải của  thì nút  sẽ bị mất cân bằng, trái với giả thiết  là nút mất cân bằng gần  nhất. Nếu  được chèn vào cây con trái của  thì chiều cao của  không thay đổi sau khi chèn . Như vậy,  sẽ không bị mất cân bằng. Trái với giả thiết  bị mất cân bằng.Trường hợp  <  chứng minh tương tự.Ta xét hai trường hợp.Xem minh họa trong Figure 3(a). Trường hợp này ta thực hiện   (left rotation) tại : ta gán con trái của  làm con phải của  và gán  làm con trái của  và cho nút cha của  trỏ vào . Xem minh họa trong Figure 3(b).

 (a) nút  bị mất cân bằng (lệch về bên phải) sau khi chèn  vào cây con phải của . (b) phép quay trái tại  để thự hiện cân bằng. Chú ý chiều cao của  và sự thay đổi các kí hiệu  sau khi quay. Ta có:Giả mã: 
Code C:Gọi  là nút con trái của . Lập luận tương tự như Lemma 1, ta có: 
Xem minh họa Lemma 2 trong Figure 4(a). Như vậy, sau khi chèn , cây con trái hoặc phải của  sẽ có chiều cao , tùy thuộc  bị chèn vào cây con nào. Trong trường hợp này, ta thực hiện phép  (doubly left rotation) tại  như sau: (a) gán con trái của  làm con phải của , (b) gán con phải của  làm con trái của , (c) gán  làm con trái của  và (d) gán  làm con phải của . Xem minh họa trong Figure 4(b).
(a) nút  bị mất cân bằng (lệch về bên phải) sau khi chèn  vào cây con trái của . Trong hình trên, ta giả sử  được chèn vào cây con trái của . Nếu  được chèn vào cây con phải của  thì thao tác quay vẫn không thay đổi. (b) phép quay kép trái tại  để thự hiện cân bằng. Chú ý chiều cao của  và sự thay đổi các kí hiệu  sau khi quay. Giả mã: Thủ tục chèn đầy đủ như sau:     Giả mã của   và   coi như bài tập cho bạn đọc. Code đây đủ thủ tục chèn trong C: Cám ơn bạn Nam Nguyen đã chỉ ra một số lỗi sai rất tinh vi trong phiên bản trước của bài vết.Code đầy đủ: 
[1] G. Adelson-Velsky and E. Landis. . Proceedings of the USSR Academy of Sciences (in Russian). 146: 263–266. English translation by Myron J. Ricci in Soviet Math. Doklady, 3:1259–1263, 1962.
[2] D. Knuth. . Addison-Wesley, 1997.Trackback link: Powered by  and 