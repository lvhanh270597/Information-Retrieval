Lát cắt cực tiểu I: Thuật toán Stoer-Wagner -- MinCut I: Stoer-Wagner Algorithm
http://www.giaithuatlaptrinh.com/?p=1662
Nơi tổng hợp và chia sẻ những kiến thức liên quan tới giải thuật nói chung và lý thuyết khoa học máy tính nói riêng.   in  | Cho đồ thị  , với trọng số  không âm. Gọi  là hai tập đỉnh rời nhau, i.e, . Ta sẽ sử dụng  để kí hiệu tập các cạnh của đồ thị có  đầu mút trong  và đầu mút còn lại trong . Trọng số của tập cạnh , kí hiệu là , được định nghĩa là tổng trọng số của các cạnh trong :  Gọi  là một tập đỉnh con của đồ thị. Một lát cắt tương ứng với  là tập cạnh . Bài toán đặt ra cho chúng ta là thiết kế thuật toán hiệu quả để tìm lát cắt cực tiểu. Bài viết này giới thiệu giải thuật Stoer-Wagner tìm lát cắt cực tiểu trong thời gian . Theo mình, đây là một thuật toán khá đơn giản (chứng minh tính đúng đắn hơi phức tạp) và cần phải được phổ biến rộng rãi hơn nữa. Ta có thể áp dụng bài toán luồng cực đại để tìm lát cắt cực tiểu. Cụ thể, với mỗi cặp , ta sẽ tìm một lát cắt  cực tiểu trong đồ thị  áp dụng luồng cực đại. Thuật toán nhanh nhất tìm  (do đó lắt cắt cực tiểu) là . Bằng cách thử tất cả các cặp  (có  cặp) và lấy min, ta có thể tìm được lắt cắt cực tiểu trong thời gian . Ta có thể giảm thuật toán này xuống còn  bằng cách gộp đỉnh, như thuật toán trình bày dưới đây. Tuy nhiên, độ phức tạp vẫn khá lớn. Ngoài ra thực thi luồng trong thời gian  không hề đơn giản.  Thuật toán Stoer-Wagner về cơ bản có nhiều điểm tương đồng với  tìm cây khung nhỏ nhất. Đặc biệt trong cách thực thi của thuật toán này, ta có thể áp dụng nhiều nhận xét trong các thực thi thuật toán Prim. Do đó, mình khuyến khích (nhưng không bắt buộc) bạn đọc xem lại thuật toán Prim trước khi đọc phần thực thi thuật toán.Gọi  là một cây (không nhất thiết là cây khung) trong đồ thị . Gọi  là một đỉnh  nằm trong . Độ  (stickiness) của  với , kí hiệu là , được định nghĩa là tổng trọng số của các cạnh từ  tới các đỉnh trong :  Thuật toán Stoer-Wagner thực hiện theo từng pha (phase) độc lập với nhau. Mỗi pha thuật toán sẽ tìm một cây khung của đồ thị bằng cách liên tục thêm đỉnh vào cây khung hiện tại (điểm này giống thuật toán Prim). Trong số các đỉnh chưa được thêm vào cây, ta sẽ thêm đỉnh có độ kết dính lớn nhất với cây  hiên tại. Trong giả mã dưới đây, mảng  sẽ là mảng độ kết dính, i.e,  với  là cây khung xây dựng trong bước hiện tại.   Thủ tục  trả lại đỉnh có độ kết dính với  lớn nhất trong số các đỉnh nằm trong  (ta sẽ mô tả thủ tục này kĩ hơn trong phần thực thi thuật toán).  Hai đỉnh  trong giả mã trên là hai đỉnh  được thêm vào cây. Theo định nghĩa  chính là độ kết dính của  với cây  tại bước cuối cùng, do đó:  Như vậy, thủ tục () sẽ trả về tổng trọng số của các cạnh đi ra từ , trong đó  là đỉnh cuối cùng trong một pha của thuật toán. Thủ tục  sẽ gộp hai đỉnh  thành một đỉnh mới. Gọi  là đỉnh mới sau khi gộp. Với mỗi , ta sẽ gán:  Trong phương trình , ta coi  nếu cạnh  không nằm trong . Tương tự như vậy với . Nếu tồn tại cạnh  trong đồ thị, ta sẽ xóa cạnh này sau phép gộp. Ví dụ gộp hai cạnh  được minh họa trong Figure 1.
 Gộp hai đỉnh trong hình (a) thành một đỉnh trong hình (b).Thủ tục () sẽ trả lại  nhỏ nhất trong tất cả các pha của thuật toán. Chú ý, mỗi pha ta sẽ gộp hai đỉnh lại làm một, do đó, tổng số pha tối đa là . Trong các phân tích dưới đây, ta sẽ chứng minh rằng giá trị nhỏ nhất này chính là trọng số của lát cắt nhỏ nhất của . Việc tìm lát cắt không khó, vì ta chỉ cần ghi lại lát cắt tương ứng với giá trị nhỏ nhất đó. Trước khi đi sâu vào chi tiết phân tích thuật toán, ta sẽ thử xem thuật toán thực hiện như thế nào với đồ thị trong ví dụ sau.
 Hình (a) là đồ thị đầu vào. Hình (b,c,d,e,f), mỗi hình tương ứng với một pha. Giá trị trả về của mỗi pha tương ứng là . Do đó, giá trị cực tiểu trong tất cả các pha là , và đây cũng chính là trọng số của lát cắt cực tiểu của đồ thị.Điểm kì diệu của thuật toán Stoer-Wagner chính là mỗi pha của thuật toán sẽ trả lại trọng số của lát cắt cực tiểu giữa  và  ( là hai đỉnh cuối cùng được xét trong mỗi pha). Giả sử Lemma 1 là đúng (ta chứng minh sau), ta có: 
 Gọi  là lát cắt cực tiểu của đồ thị. Ta xét pha hiện tại của thuật toán. Nếu  và  thì theo Lemma 1, pha hiện tại sẽ trả về lát cắt cực tiểu giữa hai đỉnh  và . Do đó, lát cắt đó cũng là lát cắt cực tiểu của đồ thị. Nếu cả hai đỉnh  đều thuộc  (trường hợp cả hai đỉnh thuộc  tương tự), ta có thể gộp hai đỉnh này vào làm một đỉnh  và tìm lát cắt cực tiểu của đồ thị sau khi gộp. Do đó, [giá trị] lát cắt cực tiểu của đồ thị sau khi gộp cũng chính là [giá trị] lát cắt cực tiểu của đồ thị ban đầu. Pha tiếp sau đó của thuật toán Stoer-Wagner đi tìm chính lát cắt này. Do đó, thuật toán Stoer-Wagner trả về [giá trị] của lát cắt cực tiểu của đồ thị. Gọi  là một lát cắt giữa  và . Ta sẽ chứng minh, bằng quy nạp, lát cắt này có trọng số lớn hơn trọng số của lát cắt  (chính là ). Gọi  là thứ tự các đỉnh được thêm vào  trong thủ tục (). Ta có  và .  Gọi . Đỉnh  được gọi là  (critical vertex) nếu  và  không cùng nằm trong . Gọi  và . Gọi  là tập các cạnh của lát cắt , sao cho đầu mút của các cạnh này chỉ nằm trong . Một cách hình thức, ta có:   Ta sẽ chứng minh, với mọi đỉnh tới hạn :  Chú ý  là một đỉnh tới hạn, và . Do đó, . Bất đẳng thức  sẽ tương đương với , đó là dpcm. Trong đoạn dưới đây, ta sẽ tập trung chứng minh  bằng quy nạp.Gọi  là đỉnh tới hạn đầu tiên. Nếu ,  phải là tập rỗng do  là điểm tới hạn đầu tiên. Do đó,  . Tương tự, Nếu ,  và . Như vậy,  chính là các cạnh . Do đó, bất đẳng thức  đúng.Gọi  <  là  hai số trong đó  là hai đỉnh tới hạn liên tiếp nhau, i.e, với mọi  <  <  thì  không phải là đỉnh tới hạn. Ta xét trường hợp  (trường hợp  tương tự và coi như bài tập cho bạn đọc). Trong trường hợp này, .  Do , tất cả các đỉnh  đều thuộc . Do đó, ta suy ra: .   Ta có (xem thêm Figure 3): 
 
 Hình minh họa chứng minh bất đẳng thức .Ta sẽ từng bước kiểm tra . Ba (bất) đẳng thức đầu tiên bạn đọc có thể dễ dàng kiểm tra. Bất đẳng thức thứ tư là do  là đỉnh có độ kết dính lớn nhất tại bước . Bất đẳng thức thứ năm là do quy nạp trên . Chú ý ở đây . Bất đẳng thức thứ 7 cũng dễ dàng kiểm tra. Từ đó ta suy ra dpcm.Phần này có nhiều điểm tương đồng với thuật toán Prim. Mình sẽ ôn lại một chút về thực thi thuật toán Prim tại đây. Ta có hai cách thực thi thuật toán Prim, một cách trong thời gian  và cách khác trong thời gian  sử dụng . Nếu thay Heap nhị phân bằng , ta có giảm thời gian thực thi thuật toán Prim xuống còn . Do đó, mỗi pha của thuật toán Stoer-Wagner, ta có thể thực thi trong thời gian  sử dụng Fibonacci Heap. Do thuật toán Stoer-Wagner thực hiện trong tối đa  pha, ta suy ra: Sau đây, mình sẽ minh họa một cách thực thi với thời gian , mỗi pha thực hiện trong thời gian . Cách thực thi này hoàn toàn khớp với Theorem 2 khi đồ thị đầu vào là một đồ thị dầy, i.e, . Gọi  lần lượt là số đỉnh, cạnh của đồ thị đầu vào. Ta sẽ dùng ma trận kề để biểu diễn đồ thị, kí hiệu là , trong đó Do mỗi pha ta được phép sử dụng thời gian , ta sẽ được phép thực thị thi mỗi vòng lặp  trong thủ tục () với thời gian . Như vậy, ta có thể đơn giản thực thi   bằng cách duyệt qua toàn bộ mảng  và tìm đỉnh  không nằm trong  có giá trị  lớn nhất. Để thực thi thủ tục , ta sẽ gộp  vào . Cụ thể, ta sẽ đánh dấu  là đỉnh đã bị xóa (sử dụng một mảng boolean) và cập nhật lại trọng số của các cạnh kề với :    Code C:Code đầy đủ: .[1] M. Stoer and F. Wagner.  European Symposium on Algorithms. Springer Berlin Heidelberg, 1994.
[2] H. Nagamochi and T. Ibaraki.  SIAM Journal on Discrete Mathematics 5.1 (1992): 54-66. , , , Trackback link: Powered by  and 