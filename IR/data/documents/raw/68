Đường đi ngắn nhất giữa mọi cặp đỉnh trong đồ thị thưa -- Johnson's Algorithm
http://www.giaithuatlaptrinh.com/?p=874
Nơi tổng hợp và chia sẻ những kiến thức liên quan tới giải thuật nói chung và lý thuyết khoa học máy tính nói riêng.   in  | Chúng ta đã tìm hiểu thuật toán Floyd-Warshall tìm đường đi ngắn nhất giữa mọi cặp đỉnh trong thời gian . Thuật toán này áp dụng được cho cả trường hợp đồ thị  và không có chu trình âm. Cho đến nay vẫn chưa có thuật toán nào thực sự nhanh hơn   (xem lại phần Remark cuối cùng của bài ). Với đồ thị , chúng ta cũng đã biết rằng áp dụng thuật toán Dijkstra (với Fibonacci Heap)  lần, ta sẽ thu được thuật toán . Với đồ thị thưa (), thuật toán này rõ ràng nhanh hơn  một cách đáng kể. Ở đây mình nhấn mạnh đồ thị không có trọng số âm thì ta mới áp dụng Dijkstra được. Vấn đề của bài này là đồ thị có trọng số âm: Năm 1977, Johnson [1] đưa ra câu một câu trả lời cho câu hỏi trên:   cũng trong bài báo [1], Johson giới thiệu cấu trúc Heap -phân để thực thi Dijkstra mà ta đã tìm hiểu ở bài .  Ý tưởng của thuật toán Johnson: Thay đổi trọng số của các cung của  để thu được đồ thị  sao cho:  (i) trọng số cung của đồ thị  không âm; do đó ta có thể áp dụng Dijkstra cho  để tìm đường đi ngắn nhất giữa mọi cặp đỉnh trong  và (ii) đường đi ngắn nhất giữa hai đỉnh bất kì của  cũng chính là đường đi ngắn nhất giữa hai đỉnh tương ứng của .Ta gọi thủ tục để thực hiện ý tưởng trên là một phép  (reduction) từ  về . Khái niệm quy dẫn là khái niệm mà ta sẽ rất hay gặp trong lý thuyết độ phức tạp của thuật toán. Chú ý là hai đồ thị  và  có cùng tập đỉnh và tập các cung (trọng số của các cung có thể khác nhau).Để phát biểu thuật toán một cách tỉ mỉ hơn, ta cần thêm một số định nghĩa và khái niệm. Với mỗi đường đi  giữa hai đỉnh bất kì  trong đồ thị, ta định nghĩa  của đường đi (kí hiệu ) bằng trọng số của đường đi đó trong  trừ đi trọng số của cùng đường đi trong . Một cách hình thức:  trong đó kí hiệu  (hoặc ) là trọng số của đường đi  trong  ( hoặc ).Một cách đơn giản nhất để thực hiện (i) đó là cộng trọng số của tất cả các cung của  với cùng một trọng số  đủ lớn để thu được  mọi cung đều không âm. Sau đó từ đường đi ngắn nhất giữa hai đỉnh trên đồ thị , với mỗi cung trên đường đi, ta trừ   đơn vị  trọng số để thu được đường đi ngắn nhất trong . Cách làm trên thoạt đầu nghe có vẻ đúng nhưng thực tế là sai (tại sao?).  Tuy nhiên tư tưởng của nó vẫn được Johnson áp dụng trong thuật toán của mình. Thay vì cộng tất cả các cung với cùng một trọng số, Johnson cộng với mỗi cung  một trọng số phụ thuộc vào chính cung này. Cụ thể, trọng số  sẽ được cộng với một số  sao cho trọng số mới thu được,  thỏa mãn:  Để đảm bảo đường đi ngắn nhất giữa bất kì hai đỉnh  nào trong  cũng là đường đi ngắn nhất giữa  và  trong  và ngược lại, ta phải đảm bảo:  Nếu  và  là hai đường đi giữa  và  thỏa mãn  thì . Như vậy, quan hệ "ngắn hơn" giữa hai đường đi bất kì với cùng điểm đầu điểm cuối phải được bảo toàn khi ta quy dẫn  về . Johnson đảm bảo điều này bằng cách chọn   sao cho mọi đường đi từ  tới  đều có cùng độ lệch.   với mọi  là hai đường đi khác nhau bất kì từ  tới  và  là hàm chỉ phụ thuộc vào . Ta sẽ chứng minh: 
 Giả sử  và  là hai đường đi bất kì giữa  và  thỏa mãn: . Do , ta có: 


  Theo định nghĩa:   và  Từ đó ta suy ra , đó là dpcm.


Bài toán của chúng ta bây giờ là đảm bảo:Độ lệch của một đường đi chỉ phụ thuộc vào điểm đầu và điểm cuối mà không phụ thuộc vào chính đường đi đó.Johson chọn  với  là  (potential) của đỉnh  (ta sẽ mô tả chỉ tiết sau). Ta sẽ chứng minh với cách chọn như vậy, tính bất biến của độ lệch sẽ được thỏa mãn:  trong đó  là hai đỉnh  bất kì thuộc đồ thị.
  Gọi  là một đường đi  từ  tới . Theo định nghĩa ta có: 
 Cũng theo định nghĩa, . Từ đó ta suy ; hay   không phụ thuộc vào đường đi . Đó là dpcm. Ta phải chọn hàm thế năng  sao cho bất đằng thức  thỏa mãn với mọi cung . Do , bất đằng thức  tương đường với:  Bất đẳng thức này gợi lại cho ta bất đẳng thức tam giác: nếu  là khoảng cách ngắn nhất từ  (nào đó) tới  thì ta có:  Do đó, nếu chọn  với mọi  thì bất đằng thức  sẽ thỏa mãn với mọi cung . Vấn đề còn lại là chọn  như thế nào? Ta phải chọn  sao cho đường đi ngắn nhất từ  tới mọi đỉnh khác đều tồn tại, i.e,  với mọi . Johnson làm như sau: Thêm vào  một đỉnh  và với mỗi đỉnh , thêm cung  với trọng số . Phép thêm đỉnh  này sẽ đảm bảo : nếu  không có chu trình âm thì  cũng không có chu trình âm và ngược lại (chứng minh  coi như bài tập cho bạn đọc). 

Sau khi đã thêm , ta sẽ áp dụng  để tìm khoảng đi ngắn nhất  trong thời gian .  Tổng kết lại thảo luận ở trên, thuật toán Johson có 4 bước:Giả mã: Code C: Ta sẽ phân tích từng bước trong mô tả ở trên. Bước (1) mất thời gian . Bước (2) mất thời gian  (xem lại bài Bellman-Ford). Bước (3) mất thời gian . Bước (4) áp dụng  lần Dijkstra cho đồ thị ; bước này, như đã chỉ ra ở trên, mất thời gian . Do đó, tổng thời gian của thuật toán là .Ví dụ:Hình (a) là đồ thị có hướng  mà ta muốn tìm đường đi ngắn nhất. Hình (b) là đồ thị thu được sau khi ta thêm  và các cung (gạch và có màu đó) có hướng từ  tới các đỉnh khác với trọng số 0. Hình (c) là cây đường đi ngắn nhất gốc tại  sau khi áp dụng thuật toán Bellman-Ford. Các số trong ô vuông chính là khoảng cách từ  tới đỉnh tương ứng. Hình (d) là đồ thị  thu được sau khi hiệu chỉnh trọng số của  theo công thức . Code đầy đủ: .[1] Johnson, Donald B.  Journal of the ACM (JACM) 24.1 (1977): 1-13.
[2] Uri Zwick. , Lecture notes for "Analysis of Algorithms", 2009. , , , , , Trackback link: Powered by  and 