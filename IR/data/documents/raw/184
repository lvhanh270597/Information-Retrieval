Cây AVL II --  AVL tree II
http://www.giaithuatlaptrinh.com/?p=2125
Nơi tổng hợp và chia sẻ những kiến thức liên quan tới giải thuật nói chung và lý thuyết khoa học máy tính nói riêng.   in  | Trong bài này chúng ta sẽ tìm hiểu cách thực hiện xóa một nút khỏi cây AVL. Bài này tiếp nối  về phép chèn một nút vào cây AVL; mình khuyến khích bạn đọc xem lại các kí hiệu đã dùng trong bài trước. Ta nhắc lại tính chất sau của cây AVL:   Tạm thời bỏ qua các điều kiện cân bằng của cậy, ta tập trung vào xóa một nút mà đảm bảo cây nhị phân sau khi xóa vẫn là cây nhị phân tìm kiếm. Sau đó ta sẽ tìm hiểu cách cân bằng lại cây. Giả sử nút ta muốn xóa là nút  có con trái hoặc con phải là . Trong trường hợp này, ta chỉ việc thay thế  bởi nút con (duy nhất) khác  của nó và xóa  ra khỏi cây. Không khó để thấy rằng cây thu được vẫn là cây nhị phân tìm kiếm. Tuy nhiên, nếu  có cả hai con đều khác , ta có thể quy về trường hợp một trong hai nút con bằng  như sau. Gọi  là nút có khóa nhỏ nhất trong cây con  của . Ta thay thế  bằng  và sau đó xóa  ra khỏi cây. Ở đây, thay thế có nghĩa là ta gán lại khóa và dữ liệu của nút  bằng khóa và dữ liệu của nút . Theo cách ta chọn , không khó để thấy rằng cây thu được vẫn là cây nhị phân tìm kiếm. Xem minh họa trong Figure 5.
 (a) Xóa nút có khóa 19 (nút màu đỏ) ra khỏi cây AVL. Do 19 có hai nút con đều khác , ta sẽ thay thế nút 20 (nút màu xanh) vào vị trí của nút 19. (b) Cây thu được sau khi xóa 19. Chú ý sự thay đổi của các kí hiệu . Ý nghĩa của các kí hiệu này ta đã giải thích trong . Nút 20 bị mất cân bằng sau khi xóa (lệch trái). Giả mã của thủ tục xóa:  
Trong giả mã trên, ta giả sử luôn tồn tại một nút có khóa  trong cây.Để thực hiện cân bằng sau khi xóa, trước hết chúng ta phải xem xét cấu trúc của cây tại nút bị mất cân bằng. Gọi  là nút gần lá nhất mà tại đó cây AVL bị mất cân bằng. Ta sẽ lặp lại các phân tích như trong  để xác định cấu trúc của cây con có gốc . Mình sẽ không phân tích các cấu trúc một cách tỉ mỉ như bài trước nữa, mà sẽ chỉ ra cụ thể các cấu trúc này. Phần chứng minh (không thay đổi nhiều so với bài trước) coi như bài tập cho bạn đọc. Gọi  là chiều cao của   khi ta xóa một nút ra khỏi cây AVL. Không khó để thấy nút ta xóa khỏi cây cũng là nút con cháu (desancendt) của . Chú ý, nút ta xóa khỏi cây luôn có con phải hoặc con trái là .Không giảm tính tổng quát, ta giả sử cây con trái của  có chiều cao lớn hơn cây con phải của . Ta có: Gọi . Để cây bằng, ta sẽ thực hiện các phép quay phải, trái, kép như ta đã thực hiện trong bài trước. Để biết khi nào thực hiện phép quay nào, ta cần phải phân tích kĩ hơn cấu trúc của cây con gốc tại . Ta xét các trường hợp sau:Xem minh họa trong Figure 6(a). Ta sẽ thực hiện phép  (right rotation) tại . Xem minh họa trong Figure 6(b).
 (a) Trường hợp cây con trái có chiều cao . (b) Cây thu được sau khi thực hiện quay phải tại . Các nút mà ta không đánh dấu bằng các kí hiệu  có tính cân bằng chưa  xác định vì ta chưa biết chiều cao của tất cả các cây con của nó.
Giả mã: 
Code C:Để tìm hiểu tính cân bằng của cây sau khi quay, ta xét hai trường hợp con:
  có chiều cao . Trong trường hợp này, sau khi quay,  có chiều cao  và  có chiều cao . Chiều cao của  bằng chiều cao trước khi thực hiện phép xóa của . Do đó, tính cân bằng của cây AVL đã được phục hồi. Xem minh họa trong Figure 6(b).  có chiều cao . Sau khi quay,  có chiều cao  và do đó,  có chiều cao . Chiều cao của  nhỏ hơn chiều cao trước khi thực hiện phép xóa của  một đơn vị. Do đó, sau khi quay, cây AVL có thể bị mất cân bằng tại nút tổ tiên (ancestor) nào đó của . Để phục hồi lại cân bằng, ta phải đệ quy trên nút tổ tiên của  để thực hiện quay. Trong trường hợp xấu nhất, ta phải thực hiện quay đến  lần.  Xem minh họa trong Figure 6(b).Vì  có chiều cao , con phải của  có chiều cao . Gọi . Ta có . Ta thực hiện phép quay kép phải (doubly right rotation) tại . Xem minh họa trong Figure 7.Giả mã: 
Code C:Sau khi quay, không khó để chứng minh rằng:  Vì sau khi quay chiều cao của  nhỏ hơn chiều cao trước khi thực hiện phép xóa của  một đơn vị, mất cân bằng có thể xảy ra tại nút tổ tiên của . Trong trường hợp này, ta phải thực hiện đệ quy trên các nút tổ tiên của . Trong trường hợp xấu nhất, ta phải quay  lần để khôi phục tính cân bằng của cây.
 (a) Trường hợp cây con trái của  có chiều cao . (b) Cây thu được sau khi ta quay kép phải tại . Chú ý sự thay đổi của các kí hiệu . Cây sau khi quay kép có chiều cao nhỏ hơn cây trước khi quay  đơn vị, do đó, vẫn có khả năng mất cân bằng xảy ra tại nút tổ tiên.Giả mã đầy đủ của thủ tục xóa và cân bằng lại cây AVL: 
Code C:Code đầy đủ: Do mỗi phép quay đơn hoặc kép ta có thể thực hiện được trong thời gian , tổng thời gian để cây bằng lại cây là . Ta có:  Áp dụng phép quay để cân bằng lại cây trong Figure 5(b).
 Sửa đổi lại cây ví dụ trong Figure 5(a) sao cho sau khi quay, cây vẫn bị mất cân bằng.
 Tìm một cấu trúc cây AVL có  nút sao cho khi xóa một nút khỏi cây, ta phải sử dụng  phép quay để khôi phục lại sự cân bằng của cây AVL.[1] R. Sedgewick and K. Wayne. . Addison-Wesley Professional, 2011.
[2] D. Knuth. , Third Edition. Addison-Wesley, 1997. , , Trackback link: Powered by  and 