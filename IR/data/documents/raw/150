Cơ sở toán học của phép băm III: băm địa chỉ mở và băm hoàn hảo-- Mathematical foundation of hashing III
http://www.giaithuatlaptrinh.com/?p=985
Nơi tổng hợp và chia sẻ những kiến thức liên quan tới giải thuật nói chung và lý thuyết khoa học máy tính nói riêng.   in  | Bài này là bài cuối cũng nằm trong chuỗi bài về phép  băm và các phân tích. Trước khi đọc bài này, mình khuyến khích bạn đọc xem lại bài viết trước về , phương pháp địa chỉ mở và băm hoàn hảo.   Gọi  là số phần tử ta muốn lưu trữ trong bảng băm; các phần tử này xuất phát từ một tập gốc . Bảng băm của chúng ta có kích thước . Để băm vào bảng, ta sử dụng một hàm ; hàm băm này được chọn ngẫu nhiên từ một họ hàm băm . Bằng cách chọn ngẫu nhiên như vậy,  thỏa mãn:  Dấu  ở đây có nghĩa là "tỉ lệ với",i.e,  với một hằng số  nào đó. Điểm quan trọng nhất mà bạn đọc cần nhớ ở đây: chúng ta không có bất kì giả sử nào về dữ liệu (i.e chúng ta sẽ không giả sử dữ liệu đầu vào là ngẫu nhiên). Tất cả các phân tích ngẫu nhiên ở đây đến từ việc chọn hàm băm ngẫu nhiên. Do đó, nếu ta có định sẵn một hàm băm thì tất cả các phân tích dưới đây đều vô nghĩa. Trong băm địa chỉ mở, ta giải quyết xung đột bằng cách sử dụng  hàm băm   thỏa mãn: Từ tính chất trên của  hàm băm, ta suy ra , với mỗi  cho trước, đều có thể nhận một trong các giá trị  với xác suất . Hai câu hỏi mà ta quan tâm khi sử dụng băm địa chỉ mở là: Câu hỏi đầu tiên cho chúng ta biết thời gian của phép dò  (unsuccessful search) và câu hỏi thứ hai cho chúng ta biết thời gian của một phép dò  (successful search).Khi ta tìm kiếm một khóa  không nằm trong bảng, ta lần lượt dò các vị trí  cho đến khi: (i) ta gặp một ô trống đầu tiên hoặc (ii) dò đến hết bảng, i.e, dò .Gọi  là biến ngẫu nhiên mà giá trị của biến này là số lần dò thực hiện khi tìm kiếm một khóa  không nằm trong bảng. Ta sẽ tính kì vọng . Ta thấy: bất kể  có phải là ô trống hay không, ta đều phải sử dụng một phép dò. Nếu  trống thì ta dừng lại. Nếu  không trống, ta phải dò tiếp. Xác suất để ô  không trống là .  Khi ta dò tiếp, ta sẽ dò với tập hàm băm . Một điểm chú ý là do tính ngẫu nhiên đồng đều, các ô ta dò tiếp theo sẽ không bao giờ trùng với các ô đã dò trước đó. Do đó, ta có thể coi bước dò tiếp theo như dò bảng băm kích thước , trong bảng sẵn có  ô không trống.  Từ đó ta suy ra công thức đệ quy:   Do  (khi bảng rỗng thì ta luôn kết thúc sau 1 phép dò) với mọi  > , bằng phương pháp quy nạp (coi như bài tập cho bạn đọc), ta có thể chứng minh được (giả sử  > ):     
Trong đó  là hệ số tải. Nếu ta khải triển:    Công thức  có ý nghĩa rất hay: ta luôn phải trả một phép dò đầu tiên; với xác suất , ta phải dò lần thứ ; với xác suất , ta phải dò lần thứ 3, ....Công thức  cho chúng ta biết khi sử dụng băm địa chỉ mở, ta không nên để hệ số tải quá gần , nếu không số phép dò sẽ rất lớn. Trong thực tế, hệ số tải ta nên để ở tầm ; khi đó số phéo dò trung bình là . Khi chèn một khóa vào bảng băm theo phương pháp địa chỉ mở, ta sẽ lần lượt dò bảng cho đến khi tìm được một ô trống và đặt khóa cần chền vào ô trống đó. Ở đây ta dễ dàng nhận thấy sự liên hệ giữa số phép dò cần thiết để chèn một khóa vào bảng và số phép dò tìm kiếm không thành công một khóa. Cụ thể, số phép dò cần để chèn khóa thứ  vào bảng sẽ tương đương với số phép dò trong kiếm không thành công trong trường hợp bảng băm có  phần tử. Đương nhiên, số phép dò để tìm kiếm thành công một khóa bằng số phép dò để chèn khóa đó. Do đó, số phép dò kì vọng cần thiết để tìm kiếm khóa , kí hiệu , là:   Từ đó suy ra, số phép dò cần thiết để tìm kiếm khóa cuối cùng là xấp xỉ thời gian tìm kiếm không thành công và là .Giả sử khả năng tìm kiếm các khóa là như nhau, ta suy ra thời gian tìm kiếm trung bình là: 
 Trong đó  là  thứ . Do , ta suy ra: 
 Các bạn có thể xem đặc tính biến đổi của số phép dò trong phương trình  theo  .Ví dụ nếu ta lấy , từ  ta suy ra số phép dò trong một tìm kiếm thành công, giả sử khả năng tìm kiếm các khóa là như nhau, là khoảng  phép dò. Từ thảo luận ở trên, ta có thể nhận ra một điểm là các khóa càng sớm được băm vào bảng thì có số phép dò tìm kiếm (thành công) càng ít. Do đó, trong thực tế, nếu chúng ta biết thêm thông tin về tần suất tìm kiếm khóa thì chúng ta có thể sắp xếp các khóa theo giảm dần của tần suất và băm theo thứ tự đó vào bảng. Mẹo này sẽ giúp chúng ta giảm được thời gian tìm kiếm (thành công) trung bình.Trong băm hoàn hảo, ta sẽ thực hiện băm hai pha. Sau pha đầu tiên, ta sẽ đếm xem, với mỗi , có bao nhiêu phần tử được băm vào cùng một vị trí . Gọi  là số phần tử được băm vào cùng . Trong pha 2, ta tạo ra một bảng phụ có kích thước  và sử dụng hàm băm khác để băm các phần tử có cùng mã băm  trong pha 1 vào bảng phụ này. Giả sử hệ số tải Tổng kích thước bộ nhớ là:   Ta sẽ tính kì vọng . Trước khi đi sâu vào chi tiết, mình khuyến khích bạn đọc xem lại một số tính chất của biến ngẫu nhiên 0/1 (). Đặc biệt định lý 8 sẽ là định lý mà chúng ta hay sử dụng ở đây.Kí hiệu  là biến ngẫu nhiên 0/1 cho sự kiện , i.e,  nếu sự kiện  xảy ra và  nếu ngược lại. Ví dụ,  là biến ngẫu nhiên 0/1 cho sự kiện . Nếu  thì  và  thì .Do , ta suy ra  và . Do đó, ta có:  và:  Do  là số phần tử được băm vào cùng vị trí , ta suy ra:   Do đó:   Từ dòng thứ 2 xuống dòng thứ 3, ta khai triển bình phương của tổng. Từ dòng thứ 3 xuống dòng thứ 4, ta áp dụng tính tuyến tính của kì vọng. Từ dòng thứ 4 xuống dòng thứ 5, ta áp dụng tính tuyến tính của kì vọng và đổi thứ tự tổng. Từ dòng thứ 5 xuống dòng thứ 6, ta áp dụng tính chất  nếu  là biến ngẫu nhiên 0/1. Từ dòng thứ 6 xuống dòng 7, ta áp dụng  và .[1] Donald E. Knuth.  Addison Wesley Longman Publishing Co., Inc., Redwood City, CA, USA, 1998.
[2] Jeff Erickson.  UIUC, 2013.
[3] Thomas H. Cormen, Clifford Stein, Ronald L. Rivest, and Charles E. Leiserson.  Chapter 12. McGraw-Hill Higher Education, 2001. , , , , , Trackback link: Powered by  and 