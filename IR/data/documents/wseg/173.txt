Nơi tổng_hợp và chia_sẻ những kiến_thức liên_quan tới giải_thuật nói_chung và lý_thuyết khoa_học máy_tính nói_riêng .
in Trong bài này mình sẽ giới_thiệu về cấu_trúc dữ_liệu splay tree (do không tìm được thuật_ngữ Tiếng_Việt nên mình giữ_nguyên thuật_ngữ tiếng anh) .
Splay_Tree được giới_thiệu bởi Sleator và Tarjan vào năm 1985 1 .
Cấu_trúc Splay_Tree thuộc về lớp các cây tìm_kiếm nhị_phân tự cân_bằng (Self-Adjusting Binary_Search_Tree - BST) , có_nghĩa là nó sẽ tự_điều_chỉnh cấu_trúc của nó mỗi khi có_một thao_tác thực hiên trên cây .
So_với cây cân_bằng AVL_Tree và Red_Black_Tree (mình sẽ blog về cây này vào một ngày đẹp_trời nào đó) , Splay_Tree có_một số ưu_điểm sau 2 : Tuy_nhiên , điểm yếu của Splay_Tree là chiều_cao của cây có_thể và một_số thao_tác có_thể rất tốn_kém (nhưng trung_bình sẽ là ) .
Ok , tóm_lại Splay_Tree tốt hơn về một_số mặt .
Bây_giờ chúng_ta sẽ tìm_hiểu cụ_thể hơn .
Cây_Splay Tree là một cây nhị_phân tự cân_bằng .
Các thao_tác cơ_bản bao_gồm : Ngoài 3 thao_tác trên , cây_Splay Tree cung_cấp thêm thao_tác .
Một nút được splay sẽ được đưa lên làm gốc của cây_splay tree thông_qua một loạt các thao_tác quay cây (tree rotations) mô_tả dưới_đây .
Trọng_tâm của bài viết là định_lý sau : Trong giả các giả mã dưới_đây , mình sẽ sử_dụng cấu_trúc dữ_liệu cho mỗi nút của cây .
Cấu_trúc này bao_gồm các trường sau : Biểu_diễn trong C : Có_một phiên_bản thực_thi khác của cây_Splay Tree mà không cần trường parent , do_đó tiết_kiệm được thêm bộ_nhớ và thời_gian (để cập_nhật trường parent sau mỗi thao tác) .
Tất_nhiên là thực_thi cũng sẽ phức_tạp hơn một_chút .
Bạn_đọc tham_khảo cách thực_thi này bằng Java tại 4 . Cũng_như AVL và Red_Black_Tree , cây_Splay Tree cũng sử_dụng các thao_tác quay để làm_cho cây trở_nên cân_bằng .
Hai thao_tác quay cơ_bản là và .
Hai thao_tác này được minh_họa trong hình dưới_đây : Từ cây bên trái , để thu được cây ở hình bên phải , ta thực_hiện .
Tương_tự như_vậy , từ cây bên phải , để thu được cây ở hình bên trái , ta thực_hiện .
Chú_ý cây_con màu đỏ của và của trong hai hình đổi chỗ khi thực_hiện quay .
Gọi_là cha của và là con phải của .
Để quay_phải , ta làm_theo các bước sau : Giả mã quay_phải tại như_sau : Code_C : Quay_trái ta làm tương_tự như quay_phải , cập_nhật các con_trỏ .
Giả mã quay_trái tại như_sau : Code_C : Khi thực_thi bằng code , các bạn chú_ý check null .
Để giả mã sáng_sủa , mình bỏ_qua các bước check null . Ta dễ thấy : Ngoài_ra , khác với AVL_Tree , Splay_Tree còn sử_dụng hai phép : và Phép_Zig-Zag có hai dạng là Zig-Zag trái và Zig-Zag phải .
Hai phép zig-zag trái và phải được minh_họa trong hình dưới_đây : Trong cả hai phép , nút sẽ được đưa lên làm gốc thay cho .
Phép zig-zag trái gồm hai phép : quay_trái tại , sau_đó quay_phải tại .
Phép zig-zag phải gồm hai phép : quay_phải tại , sau_đó quay_trái tại .
Chú_ý sự thay_đổi cha của các cây_con được tô_màu của . Giả mã của phép zig-zag trái tại : Code_C : Giả mã của phép zig-zag phải tại : Code_C : Tương_tự như zig-zag , có hai phép Roller-Coaster là phải và trái , được minh_họa trong hình dưới_đây : Phép roller-coaster phải tại gồm hai phép : quay rollaer-coaster phải tại , sau_đó quay_phải tại .
Phép roller-coaster trái tại gồm hai phép : quay_trái tại , sau_đó quay_trái tại .
Chú_ý sự thay_đổi cha của các cây_con được tô_màu của . Giả mã của phép roller-coaster phải tại : Code_C : Giả mã của phép roller-coaster trái tại : Code_C : Phần tiếp_theo chúng_ta sẽ thực_hiện phép Splay .
Các thao_tác chèn , xóa , tìm_kiếm đều sử_dụng phép Splay như_là một thủ_tục con .
Như đã nói ở trên , phép splay một nút sẽ thực_hiện đưa một nút con lên làm nút gốc của cây_Splay Tree .
Phép_Splay được thực_hiện thông_qua một loạt các phép quay , zig-zag và roller-coaster phụ_thuộc vào cấu_trúc của cây tại nút đó .
Ưu_tiên thực_hiện zig-zag và roller-coaster trước .
Phép quay nếu có thực_hiện thì sẽ chỉ_thực hiện một_lần và là lần cuối khi đưa lên làm gốc .
Ví_dụ ta muốn splay nút của cây trái nhất trong hình sau (hình được lấy từ 3) : Ta có các bước sau : Giả mã của phép Splay như_sau : Code_C : Ta sẽ chứng_minh bổ_đề dưới_đây ở phần phân_tích cuối bài .
Bây_giờ ta có_thể thực_hiện được các thao_tác cơ_bản . Khi thực_thi splay , thông_thường đầu_vào là một khóa và chúng_ta phải tìm nút có khóa đó và splay thành gốc của cây_Splay Tree . Để tìm_kiếm một nút có khóa , ta sẽ tìm_kiếm nút có khóa trong cây như tìm kếm trên Binary_Search_Tree .
Nếu ta tìm_thấy có khóa thì ta sẽ Spaly .
Nếu nút đó không tồn_tại , ta sẽ splay .
Ví_dụ với hình_vẽ ở phần Splay , nếu đầu_vào là khóa có_giá trị thì ta sẽ splay nút vì khi ta tìm_kiếm từ gốc đến_thì ta sẽ thấy khóa sẽ không có ở trông cây và là nút cuối_cùng trên đường_đi tìm_kiếm đó .
Giả mã như_sau ( ở đây là nút gốc của Splay_Tree) : Code_C : Thủ_tục tìm_kiếm khóa và trả_lại nút như mô_tả ở trên .
Chú_ý là khóa của có_thể không_bằng trong trường_hợp không có trong cây_Splay .
Giả mã của thủ_tục này như_sau : Code_C : Do mỗi khi tìm_kiếm một nút , ta splay nút đó lên làm gốc .
Do_đó , các thao_tác tìm_kiếm tiếp_theo đó sẽ ít tốn_kém hơn . Bổ_đề sau là hệ_quả trực_tiếp của Lemma 2 : Để chèn một nút có khóa , trước_hết ta sẽ chèn khóa vào cây như chèn cây nhị_phân và sau_đó splay nút vừa chèn .
Code_C : Bổ_đề sau là hệ_quả trực_tiếp của Lemma 2 : Để xóa_một nút có khóa , ta làm_theo các bước sau : , , , Trackback link : Powered by and
