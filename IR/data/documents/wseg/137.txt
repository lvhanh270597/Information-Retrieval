Nơi tổng_hợp và chia_sẻ những kiến_thức liên_quan tới giải_thuật nói_chung và lý_thuyết khoa_học máy_tính nói_riêng .
in Trong , chúng_ta đã làm_quen với thuật_toán duyệt theo chiều_sâu DFS trên đồ_thị (vô hướng) .
Chúng_ta cũng chưa có dịp để thảo_luận về các ứng_dụng của thuật_toán DFS mặc_dù đây là một thuật_toán có rất nhiều ứng_dụng trong thiết_kế giải_thuật .
Trong phần này chúng_ta sẽ làm_quen với ứng_dụng của DFS trong bài_toán sắp_xếp Topo (Topological Sort) .
.
Để dễ phân biết , ta kí_hiệu đồ_thị có hướng là .
Đồ_thị vô_hướng thu được từ bằng cách bỏ_qua hướng của cạnh ta sẽ kí_hiệu là .
Một_số khái_niệm khác ở chúng_ta sẽ không nhắc_lại ở đây nữa .
Giả mã của thuật_toán DFS cơ_bản thăm đồ_thị như_sau : Gọi_là các đỉnh được thăm ở dòng .
Một đỉnh được gọi_là (reachable from ) nếu tồn_tại một đường_đi có hướng từ tới .
Dễ thấy với mọi , đỉnh nằm trong tầm với một trong các đỉnh của .
Bây_giờ ta muốn xem mỗi đỉnh nằm trong tầm với của đỉnh nào trong .
Một đỉnh có_thể nằm trong tầm với của hai hay nhiều đỉnh khác_nhau trong , nhưng ở đây ta chỉ quan_tâm để đỉnh_đầu tiên trong , i . e , đỉnh có chỉ_số nhỏ nhất , mà nằm trong tầm với của đỉnh đó .
Ngoài_ra , nếu nằm trong tầm với của , ta muốn in ra đường_đi từ đến .
Ta gọi mỗi đỉnh là của . Để thu được thông_tin đó , ta sẽ sửa_đổi DFS một_chút bằng cách thêm một_vài mảng đánh_dấu .
Ta sử_dụng mảng trong đó nếu là nguồn của .
Ban_đầu khởi tạo với mỗi .
Để lưu vết đường_đi từ đến , ta sẽ lưu một mảng trong đó nếu cung nằm trong đường_đi từ tới .
Hay nói_cách_khác , đứng ngay trước trong đường_đi có hướng từ tới .
Ta gọi cung là bởi DFS .
Khi ta đã có mảng thì đường_đi từ tới (viết theo thứ_tự ngược) là : .
Thủ_tục in ra đường_đi từ tới theo thứ_tự ngược (in thứ_tự xuôi coi_như bài_tập cho bạn đọc) : Code_C : Giả mã của DFS sửa_đổi : Code_C : Ví_dụ thực_thi thủ_tục trên trong hình dưới_đây .
Các cung màu đỏ là các cung được thăm bởi DFS .
Nhìn vào hình_vẽ ta thấy các cung này sẽ tạo_thành một rừng (forest) gọi_là (DFS forest) , trong đó gốc của mỗi cây (đỉnh được tô màu) trong rừng là một đỉnh trong .
Ta sẽ chứng_minh điều này một_cách hình_thức hơn trong Lemma 1 . Gọi_là tập các cung được thăm bởi DFS .
Ta có : Ta sẽ chứng_minh mỗi là một cây có hướng gốc tại .
Việc chứng_minh các đỉnh của đều đến được từ coi_như bài_tập cho bạn_đọc .
Từ thủ_tục DFS ở trên , ta có nhận_xét : Mỗi đỉnh , tồn_tại duy_nhất một đỉnh sao_cho . Xét cây vô_hướng tương_ứng , giả_sử có ít_nhất một chu_trình .
Xét một chu_trình (vô hướng) nào_đó của có đỉnh .
Gọi_là một đỉnh của được thăm đầu_tiên bởi DFS .
Gọi_là thứ_tự các đỉnh dọc theo sao_cho kề với .
Do là đỉnh được thăm đầu_tiên , được thăm sau .
Do các cạnh thăm bởi DFS đều có dạng và là duy_nhất , ta suy ra .
Lập_luận tương_tự ta có : Do , ta dễ_dàng suy ra hoặc .
Do và , ta có .
Nhưng điều này trái với giả_thiết là đỉnh được thăm đầu_tiên của .
Do_đó , chu_trình không tồn_tại .
Hay nói_cách_khác , là một cây . Xét các cung được thăm và không được thăm bởi DFS , ta có 4 loại cung sau : Các cung của cây DFS khá là dễ phân bệt và đó chính là cung trong đó là đỉnh được gọi ở dòng (trong giả mã có đoạn mã màu đỏ ở trên) .
Trong điều kiên ở vòng for ở thủ_tục , các cung mà là visitted sẽ có_thể là một trong 3 loại cung : chéo , ngược hoặc xuối .
Do_đó , chỉ với hai nhãn này thì ta chưa phân biết được cung ngược với các cung khác (bài này ta chưa cần phân_biệt cung chéo và cung xuôi) .
Nhắc_lại , cung ngược là cung từ một đỉnh tới một đỉnh tổ_tiên của nó trong cùng một cây của rừng DFS . Để phát_hiện ra cung xuôi_ta phải dùng thêm một nhãn nữa_là nhãn , bên_cạnh hai nhãn là visitted và unvissited .
Ý_nghĩa các nhãn như_sau : Dựa vào định_nghĩa của các nhãn , ta suy ra : khi đang thăm đỉnh (có nhãn visitting) , nếu ta bắt_gặp đỉnh mà : Như_vậy ta "gần như" đã phân_loại được được các cạnh của DFS .
Để phân_biệt cung xuôi và cung chéo , ta cần sửa_đổi DFS hơn_nữa .
Vấn_đề này ta sẽ tìm_hiểu trong bài sau .
Giả mã như_sau : Code_C : Một đồ_thị có hướng được gọi_là (directed acyclic graph -- đồ_thị có hướng và không có chu trình) nếu .
Ở đây ta nhấn_mạnh cụm_từ .
Điều đó có_nghĩa là đồ_thị vô_hướng tương_ứng vẫn có_thể có chu_trình .
Đồ_thị trong ví_dụ ở trên không_phải là DAG do đồ_thị đó có chu_trình .
Đồ_thị trong hình dưới_đây là một DAG .
Ta có bài_toán sau : Gọi_là đồ_thị thu được bằng cách đảo_ngược các cung của .
Ta có nhận_xét sau : Đỉnh của đồ_thị được gọi_là một (source vertex) nếu_như không tồn_tại sao_cho .
Nói_cách_khác , là phát nếu bậc tới (in-degree) của bằng .
Đỉnh của đồ_thị được gọi_là một (sink vertex) nếu_như không tồn_tại sao_cho .
Hay nói_cách_khác , là đỉnh thu nếu bậc lui (out-degree) của bằng .
Ví_dụ trong hình dưới_đây , các đỉnh là các đỉnh phát , các đỉnh là các đỉnh thu .
Ta có bổ_đề sau : Nhận_xét đỉnh phát của chính là đỉnh thu của .
Do_đó , dựa vào Fact 1 , ta chỉ_cần chứng_minh luôn có_một đỉnh phátChọn một đỉnh và đánh_dấu đỉnh .
Gọi_là đỉnh sao_cho .
Nếu_không tồn_tại thì_là đỉnh thu , bổ_đề là đúng .
Nếu tồn_tại , ta tiếp_tục đánh_dấu và lặp_lại quá_trình đánh_dấu như_vậy cho_đến khi ta gặp một đỉnh là đỉnh thu hoặc tồn_tại một đỉnh sao_cho và đã được đánh_dấu .
Trong trường_hợp sau , ta sẽ tìm được một chu_trình có hướng bao_gồm các đỉnh đã đánh_dấu , trái với giả_thiết là DAG . Gọi_là tập các đỉnh nguồn của .
Thêm vào một đỉnh và thêm cung .
Gọi_là đồ_thị thu được .
Dễ thấy : nếu là DAG thì cũng là DAG và ngược_lại .
Ngoài_ra , nếu ta thực_hiện DFS bắt_đầu_từ , ta sẽ chỉ thu được duy_nhất một cây DFS gốc tại (tại sao ? ) .
Ta có bổ_đề sau : Chiều thuận của bổ_đề khá dễ để chứng_minh .
Nếu cây DFS gốc tại có cung là cung ngược , và đều có nhãn unvisiting .
Do_đó là cung ngược , sẽ là tổ tiền_của trong cây DFS .
Hay nói_cách_khác , có_một đường_đi từ đến .
Đường_đi đó kết_hợp với cạnh sẽ tạo_thành một chu_trình có hướng .
Do_đó không_phải là DAG . Ta chứng_minh chiều ngược_lại bằng phản_chứng .
Giả_sử không_phải là DAG , gọi_là một chu_trình có hướng của .
Gọi_là đỉnh_đầu tiên của được thăm bởi DFS và là đỉnh mà .
Đỉnh chỉ được đánh_dấu là visited sau khi tất_cả các đỉnh trong tầm với của (reachable from ) , trong đó có , đã được đánh_dấu là visited .
Do_đó , khi ta thăm , đỉnh_đang được đánh_dấu là visiting .
Như_vậy , là cung ngược , trái với giả_thiết là cây DFS không có cung ngược .
Từ_Lemma 3 , ta có_thể giải Problem 1 bằng cách thay_đổi một_chút thủ_tục như_sau : Code_C : Nếu biểu_diễn đồ_thị bằng danh_sách kề , mỗi đỉnh có hai danh_sách : một danh_sách các đỉnh (gọi là các đỉnh tới) sao_cho và một danh_sách khác lưu các đỉnh (gọi là các đỉnh lui) sao_cho thì việc phát_hiện các đỉnh phát (sink) có_thể được thực_hiện trong thời_gian .
Nếu ta chỉ lưu một danh_sách là các đỉnh tới thì việc phát_hiện nguồn có_thể thực_hiện trong thời_gian bằng cách duyệt qua các cung và đánh_dấu các đỉnh cuối của mỗi cung .
Các đỉnh không bị đánh_dấu chính là các đỉnh nguồn .
Việc thêm đỉnh vào đồ_thị cũng có_thể được thực_hiện trong thời_gian .
Thuật_toán DFS có thời_gian .
Do_đó thời_gian của thuật_toán là .
: Đỉnh thêm vào đồ_thị để việc trình_bày thuật toạn được đơn_giản hơn .
Khi thực_thi thuật_toán , ta không nhất_thiết phải thêm vào đỉnh này .
Ngoài_ra , dựa vào chứng_minh của Lemma 3 , ta có_thể dễ_dàng mở_rộng thuật_toán để in ra một chu_trình có hướng trong trường_hợp không_phải là DAG .
Chi_tiết coi_như bài_tập cho bạn_đọc .
của một đồ_thị có hướng là một_cách sắp_xếp các đỉnh trên một đường_thẳng sao_cho với mỗi cung , đỉnh nằm bên trái đỉnh trên đường_thẳng đó .
Ví_dụ hình (6) dưới_đây là một sắp_xếp topo của đồ_thị trong hình (5) .
Từ định_nghĩa của săp xếp Topo ta có_thể dễ_dàng thấy rằng nếu có_một sắp_xếp Topo thì không_thể có_một chu_trình có hướng .
Hay nói_cách_khác , là một DAG .
Ngược_lại , cho một DAG , luôn tồn_tại một sắp_xếp Topo cho .
Ta sẽ chứng_minh điều này bằng cách thiết_kế một giải_thuật để tìm sắp_xếp Topo đó .
Ta có : Ta có_thể coi sắp_xếp Topo giống_như gán lại chỉ_số trong tập cho mỗi đỉnh sao_cho với mỗi cung , đỉnh được gán chỉ_số nhỏ hơn .
Để biểu_diễn thứ_tự của sắp_xếp Topo , ta sẽ dùng một mảng trong đó nếu thì .
Gọi_là tập các đỉnh nguồn của .
Ta có : Ta có_thể đổi chỗ các đỉnh trong tập trong một sắp_xếp Topo của mà thứ_tự các đỉnh sau khi đổi chỗ vẫn là thứ_tự của một sắp_xếp Topo (khác) của . Dựa vào nhận_xét trên , ta có_thể tìm một sắp_xếp Topo của DAG như_sau : Mỗi lần_ta phát_hiện ra một đỉnh nguồn mới , ta sẽ đưa đỉnh đó vào vị_trí còn trống đầu_tiên của mảng và xóa_đỉnh nguồn đó từ đồ_thị .
Ngoài_ra , ta sẽ dùng một_tập hợp để lưu_trữ các đỉnh nguồn của đồ_thị hiện_tại .
Thuật_toán như_sau : Trong thực_tế cài_đặt , ta sẽ không thực_sự "xóa" đỉnh ra khỏi đồ_thị mà ta chỉ_cần dùng mảng để đánh_dấu là đỉnh đó đã bị "xóa" .
Ta sẽ chứng_minh : Ta sẽ chứng_minh nếu thì sẽ được gán chỉ_số nhỏ hơn .
Giả_sử ngược_lại , tồn_tại cung mà được gán chỉ_số lớn hơn .
Từ_đó suy ra khi ta gán chỉ_số cho , đã được gán chỉ_số rồi , và do_đó , sẽ bị xóa_khỏi đồ_thị .
Do_đó , đã được đưa_vào trong khỏi .
Nhưng điều đó có_nghĩa là khi vào , cung vẫn thuộc , trái với điều_kiện khi ta đưa_vào .
Do_đó , cung như_vậy không tồn_tại .
Hay nói_cách_khác , đầu_ra của thuật_toán là một sắp_xếp Topo .
Ta sẽ dùng danh_sách kề , với mỗi đỉnh , danh_sách kề của chỉ lưu các đỉnh mà .
Hay nói_cách_khác , danh_sách kề của chỉ lưu các out-neighbor của .
Ta sẽ dùng một mảng để đánh_dấu đỉnh nào đã bị "xóa" ra khỏi đồ_thị , i . e nếu bị xóa và nếu ngược_lại .
Thao_tác khó nhất_là kiểm_tra xem sau khi xóa_khỏi đồ_thị , có_trở thành đỉnh nguồn hay_không (dòng if có comment ở giả mã trên) .
Ta có_thể thực_thi bằng cách duyệt qua các hàng_xóm tới (in-neighbors) của và kiểm_tra xem hay_không .
Nếu mọi hàng_xóm tới của đều đã bị xóa , sẽ là đỉnh nguồn và ta đưa_vào .
Tuy_nhiên , để làm như_vậy , ta phải lưu thêm một danh_sách các hàng_xóm tới cho mỗi đỉnh , và nếu_không cẩn_thận , mỗi thao_tác duyệt sẽ mất thời_gian là bậc tới của , do_đó làm_cho tổng thời_gian thành .
Để giải_quyết tình_trạng này , ta sẽ lưu thêm một mảng trong đó nếu bậc tới (in-degree) của là trong đồ_thị hiện_tại (không tính các đỉnh đã "xóa") .
Do_đó , mỗi lần "xóa" ra khỏi đồ_thị , ta chỉ việc cập_nhật lại mảng và đỉnh điều_kiện ở dòng if sẽ trở_thành (xem giả mã dưới đây) .
Do_đó , thao_tác kiểm_tra này mất .
Như_vậy , tổng thời_gian của thuật_toán là .
Giả mã : Code_C : Theo , giải_thuật sắp_xếp Topo mà ta mô_tả ở đây được phát_triển bởi Kahn 1 năm 1966 .
Ngoài_ra còn giải_thuật khác sử_dụng DFS khá giống với thủ_tục .
Giải_thuật này được mô_tả bởi Tarjan 2 vào năm 1974 và được sử_dụng trong textbook CLRS3 .
Code đầy_đủ : , , .
1 Kahn , Arthur_B .
Communications of the ACM 5 . 11 (1962) : 558-562 .
2 Tarjan , Robert_Endre .
Computer_Science_Department , School of Humanities and Sciences , Stanford_University , 1974 .
3 Cormen , Thomas_H . ; Leiserson , Charles_E . ; Rivest , Ronald_L . ; Stein , Clifford (2001) 1990 .
(2nd ed . ) .
Chapter 22 . 5 . MIT_Press and McGraw-Hill .
, , , , Trackback link : Powered by and
