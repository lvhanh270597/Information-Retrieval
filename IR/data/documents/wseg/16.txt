Tác_giả : Nguyễn_RR Thành_Trung_Trie là một cấu_trúc dữ_liệu dùng để quản_lý một_tập hợp các xâu .
Trie cho_phép : Thêm một xâu vào tập_hợp Xóa_một xâu khỏi tập_hợp Kiểm_tra một xâu có tồn_tại trong tập_hợp hay_không .
Cấu_trúc Trie gồm một gốc không chứa thông_tin , trên mỗi cạnh lưu một ký_tự , mỗi nút và đường_đi từ gốc đến nút đó thể_hiện 1 xâu , gồm các ký_tự là các ký_tự thuộc cạnh trên đường_đi đó .
Trong hình_vẽ trên , nút 1 là nút gốc , nút 7 thể_hiện có 1 xâu là ‘bg’ , nút 8 thể_hiện có 1 xâu là ‘db’ , nút 9 thể_hiện có 1 xâu là ‘dc’ , nút 10 thể_hiện có 1 xâu là ‘acd’ , nút 5 thể_hiện là có 1 xâu là ‘ab’ .
Tuy_nhiên , như các bạn có_thể thấy , đối_với một_số nút , chẳng_hạn nút 4 , ta không biết nó là thể_hiện kết_thúc 1 xâu hay chỉ là 1 phần của đường_đi từ nút 1 đến nút 9 .
Vì_vậy , khi cài_đặt , thông_thường , tại nút U ta cần lưu thêm thông_tin nút U có là kết_thúc của 1 xâu hay_không , hoặc nút U là kết_thúc của bao_nhiêu xâu , tuỳ_theo yêu_cầu bài_toán .
Một_số ưu_điểm của trie Cài_đặt đơn_giản , dễ nhớ Tiết_kiệm bộ_nhớ : Khi số_lượng khóa lớn và các khóa có độ_dài nhỏ , thông_thường trie tiết_kiệm bộ_nhớ hơn do các phần đầu giống nhau của các khoá chỉ được lưu 1 lần .
Ưu_điểm này có ứng_dụng rất lớn , chẳng_hạn trong từ_điển .
Thao_tác tìm_kiếm : O(m) với m là độ_dài khóa .
Với_Binary search tree (cân bằng) : là O(logN) .
Khi số_lượng khóa cần tìm lớn và độ_dài mỗi khóa tương_đối nhỏ , logN xấp_xỉ m , và như các bạn đã biết , để cài được Binary search tree cân_bằng không_phải là một việc đơn_giản .
Hơn_nữa , các thao_tác trên trie rất đơn_giản và thường chạy nhanh hơn trên thực_tế .
Dựa vào tính_chất của cây trie , có_thể thực_hiện một_số liên_quan đến thứ_tự từ_điển như sắp_xếp , tìm một khóa có thứ_tự từ_điển nhỏ nhất và lớn hơn một khóa cho trước . . . ; và một_số thao_tác liên_quan đến tiền_tố , hậu_tố .
Cài_đặt //Định nghĩa kiểu trie type trie = node ; node = record count : longint ; //Số lượng xâu kết_thúc tại một nút c : array a . .
z of trie ; //Link đến các nút con của một nút end ; var root : trie ; //Gốc trie //Thêm một nút rỗng vào trie procedure add ( var a : trie ); var c : char ; begin new ( a ); a .
count : = 0 ; for c : = a to z do a .
c c : = nil ; end ; //Thêm xâu s vào trie procedure insert ( s : string ); var i : longint ; begin for i : = 1 to length ( s ) do begin //Duyệt mỗi kí_tự i của s .
Với mỗi kí_tự , ta đi_theo nhánh tương_ứng với ký_tự i , nếu nhánh này chưa có , ta thêm vào cây if p .
c s i = nil then add ( p .
c s i ); p : = p .
c s i ; end ; inc ( p .
count ); end ; //Tìm xem xâu s có trong trie không function find ( s : string ) : boolean ; var i : longint ; p : trie ; begin p : = root ; for i : = 1 to length ( s ) do begin if p .
c s i = nil then exit ( false ); p : = p .
c s i ; end ; exit ( true ); end ; (Có thể cài_đặt thêm thao_tác xóa_một từ khỏi trie , nhưng đối_với các bài_toán thường gặp thì thao_tác này không cần_thiết .
Việc cài_đặt cụ_thể xin nhường_lại cho bạn đọc) Một_vài ứng_dụng trong các bài_toán Sau_đây là một_vài ví_dụ cơ_bản_thể hiện tác_dụng của trie Chuỗi từ Nguồn : Цикл_Интернет-олимпиад для школьников , сезон 2007-2008 Chuỗi từ có độ_dài n là một dãy các từ w_1 , w_2 , . . . , w_n sao_cho với mọi 1 \le i lt; n , từ w_i là tiền_tố của từ w_i+1 .
Từ u có độ_dài k là tiền_tố của từ v có độ_dài l nếu l gt; k và các ký_tự đầu_tiên của v trùng với từ u .
Cho tập_hợp các từ S = s_1 , s_2 , . . . , s_m .
Tìm chuỗi từ dài nhất có_thể xây_dựng được bằng cách dùng các từ trong tập_hợp S (có thể không sử_dụng hết các từ) .
Thuật_toán Một trong những cách giải khá đơn_giản đối_với bài này là sử_dụng trie : Lưu tất_cả các từ lại vào trie .
Đối_với mỗi nút trên cây , ta tính f là độ_dài chuỗi từ dài nhất bắt_đầu ở nút đó .
Cài_đặt một_số phần quan_trọng type trie = node ; node = record f , u : longint ; //Số lượng xâu kết_thúc tại một nút c : array a . .
z of trie ; //Link đến các nút con của một nút end ; . . .
procedure dfs ( a : trie ); var c : char ; begin a .
f : = 0 for c : = a to z do begin dfs ( a .
c c ); a .
f : = max ( a .
f , a .
c c .
f ); end ;; inc ( a .
f , a .
u ); end ; function solve : longint ; begin add ( root ); for i : = 1 to m do insert ( s i ); dfs ( root ); exit ( root .
f ); end ; Tách từ Nguồn : Croatian_OI 2006 Một xâu S độ_dài không quá 300 , 000 cần được tách thành các đoạn con sao_cho mỗi đoạn con thuộc một_tập gồm không quá 400 từ cho trước , mỗi từ có độ_dài không quá 100 , không có 2 từ nào giống nhau .
Viết chương_trình xác_định số cách tách một từ cho trước .
Thuật_toán Quy_hoạch_động .
Đặt fi là số cách tách đoạn từ 1 đến i của S .
Như_vậy , fi = \sumfj với mỗi j thoả_mãn đoạn từ j+1 . . i là một từ thuộc tập từ đã cho .
Ta lần_lượt tính fi với i chạy từ 1 đến n .
Với mỗi i , để kiểm_tra mọi đoạn j . . i có là một từ cho trước không , chú_ý là khi giảm j , các từ này có độ_dài tăng lên , và từ trước là hậu_tố của từ sau , các từ có độ_dài hơn kém nhau một đơn_vị .
Do_đó , trên cây trie , ta có_thể đi từ gốc xuống các nút thể_hiện các xâu này , nếu_không đi được nữa , tức_là không có từ nào thoả_mãn .
Chú_ý là khi thêm các xâu của tập đã cho , ta cần thêm các xâu này theo chiều ngược (hoặc một_cách xử_lý khác là ta tính hàm f từ n đến 1) .
Cài_đặt một_số phần quan_trọng f 0 = 1 ; for i : = 1 to n do begin j : = i ; p : = root ; while ( j gt; 0 ) and ( p .
c s j lt;gt; nil ) do begin p : = p .
c s j ; dec ( j ); if ( x .
c = 1 ) then inc ( f i , f j ); end ; end ; Bài_tập áp_dụng : VOJ - NKSEV_VOJ - SEC_VOJ - CHAIN2_A lot of_games
