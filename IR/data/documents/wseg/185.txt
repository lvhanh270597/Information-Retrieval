Tác_giả : Vũ_chipchip Phúc_Hoàng_Bạn cảm_thấy lo_sợ trong những kì_thi chấm offline ?
Bạn bình_thường làm_bài rất tốt nhưng khi chấm offline lại bị điểm kém vì sai những lỗi vớ_vẩn ?
Bạn code sai một bài rất khó và debug mãi không được vì không có test sai ?
Tất_cả những vấn_đề đó sẽ được giải_quyết đơn_giản với một chương_trình chấm_bài tự_động , giúp bạn tự kiểm_tra bài mình và phát_hiện test sai .
Bài viết này sẽ giới_thiệu với bạn những bước cơ_bản nhất để viết trình chấm - một kĩ_thuật mà bạn nên thành_thạo trước_khi thi HSG Quốc_gia .
Table of_Contents Trình chấm là gì ?
Tại_sao nên viết trình chấm ?
Khi_nào nên viết trình chấm ?
Thành_phần của một bộ trình chấm Lời_giải 1 : Lời_giải 2 : Trình sinh test : Trình so test : Ví_dụ : Bài_VMELLIP Lời_giải 1 : Lời_giải 2 : Trình sinh test + Trình so test : Làm_sao để viết trình chấm một_cách hiệu_quả ?
Template dành cho C++ : Template dành cho Pascal : Template dùng Shell script Luyện_tập viết trình chấm Trình chấm là gì ?
Trình chấm là một bộ chương_trình giúp bạn tự_động sinh_ra các test input ngẫu_nhiên và tự_động chạy hai chương_trình lời_giải khác_nhau với các input đó để so_sánh output .
Về cơ_bản , trình chấm gồm 4 chương_trình là : lời_giải 1 , lời_giải 2 , trình sinh test , và trình so test .
Thường thì lời_giải 1 là cách chuẩn bạn sẽ sử_dụng , còn lời_giải 2 là một_cách có hiệu_quả kém hơn nhưng vẫn chính_xác .
Tại_sao nên viết trình chấm ?
Viết trình chấm là một trong những cách kiểm_tra bài của mình đáng_tin cậy nhất .
Với những kì_thi chấm offline , ví_dụ như VOI , việc sai_sót nhỏ rất khó tránh khỏi khi ta không_thể biết kết_quả trong_khi thi .
Vậy_thì , nếu_như bài của bạn không được chấm với bộ test của ban tổ_chức , bạn hãy tự chấm nó với bộ test ngẫu_nhiên mà mình sinh .
Nếu bài của bạn đúng_với các test ngẫu_nhiên , bạn có_thể tạm yên_tâm là bài sẽ được điểm_cao và không bị những sai_sót "chí mạng" dẫn đến bài bị 0 điểm .
Trình chấm yêu_cầu một trình "chuẩn" và một trình "trâu" , và so_sánh hai chương_trình này với_nhau .
Nếu trình chấm của bạn phát_hiện được một test mà kết_quả hai chương_trình không khớp nhau , trình chuẩn hoặc trình trâu của bạn sẽ sai , và bạn hãy sử_dụng test đó để debug .
Còn nếu tất_cả các test đều đúng , bạn có_thể tạm yên_tâm , vì mặc_dù có_thể cả hai lời_giải cùng sai , nhưng cùng sai giống_hệt nhau thì rất khó .
Đối_với những kì_thi chấm online , hoặc đơn_giản là bạn làm_bài online trên mạng , trình chấm cũng rất hữu_ích trong việc tìm test sai .
Chẳng_hạn khi bạn code một bài cấu_trúc dữ_liệu khó , nộp bài thấy bị 0 điểm , thay_vì việc ngồi debug bằng mắt hãy thử code một bộ trình chấm để giúp tìm test sai .
Với test sai tìm được bạn sẽ dễ_dàng debug hơn rất nhiều .
Nhiều người ngại viết trình chấm vì cho_rằng làm_vậy mất thời_gian .
Tuy_nhiên , khi đã thành_thạo thì viết một bộ trình chấm cho một bài_chỉ mất khoảng 10 phút , nếu_như bài đó có_thể làm trâu và sinh test ngẫu_nhiên một_cách dễ_dàng .
Lợi_thế về_mặt tâm_lí khi đã biết chắc bài_làm của mình đúng sẽ giúp bạn làm_bài hiệu_quả hơn , thực_tế sẽ tiết_kiệm được thời_gian so_với khi_không kiểm_tra bài .
Tương_tự , viết trình chấm để debug những bài code khó đôi_khi hiệu_quả hơn nhiều so_với việc debug bằng mắt , tiết_kiệm được rất nhiều thời_gian .
Khi_nào nên viết trình chấm ?
Lời_khuyên của tác_giả là : Hãy viết trình chấm bất_cứ lúc nào mà bài có_thể làm trâu và sinh test ngẫu_nhiên dễ_dàng .
Có_một số bài mà cách trâu còn khó hơn cách chuẩn thì_có thể tạm bỏ_qua , tuy_nhiên nếu có thời_gian vẫn nên viết trình chấm sau đấy để đảm_bảo chắc_chắn .
Thành_phần của một bộ trình chấm Lưu_ý : Bài viết này hướng_dẫn cho Pascal/C++ trên hệ_điều_hành Windows .
Với các ngôn_ngữ khác hoặc chạy trên hệ_điều_hành khác , một_số lệnh sẽ thay_đổi , tuy_nhiên ý_tưởng vẫn tương_tự .
Một bộ trình chấm gồm có 4 thành_phần : Lời_giải 1 , lời_giải 2 , trình sinh test , trình so test .
Lời_giải 1 : Thường là code chuẩn của bạn .
Dù viết trình chấm hay_không thì phần này bắt_buộc phải có nên cũng không cần phải nói nhiều .
Trong bài viết này , ta sẽ giả_sử input của trình lời_giải 1 là . inp , output là . out .
Lời_giải 2 : Thường là code trâu , hoặc_là một_cách giải khác , miễn_là ra đúng đáp_số .
Hãy chọn cách dễ code nhất , dễ đúng nhất có_thể , vì thời_gian chạy thực_ra không quan_trọng lắm khi bạn chỉ_cần sinh test nhỏ để kiểm_tra .
Trong bài viết này , ta sẽ giả_sử input của trình lời_giải 2 là . inp , output là . ans .
Trình sinh test : Chương_trình này có nhiệm_vụ sinh input ngẫu_nhiên vào file . inp .
Để_cho hàm ngẫu_nhiên được thay_đổi khi chương_trình khởi_động , sử_dụng lệnh randomize trong Pascal và srand(time(NULL)) trong C++ .
Lưu_ý : Lệnh srand(time(NULL)) trong C++ tính random theo giây , tức_là sau 1 giây nó mới thay_đổi random seed .
Vì_vậy nhiều khả_năng các test random sinh_ra liên_tục sẽ bị giống nhau .
Để khắc_phục điều này , ta có_thể lồng trình sinh test vào trình so test chứ không tách ra cho chạy riêng nữa .
Với_Pascal thì không_phải lo về điều này , vì randomize thay_đổi random seed theo mili giây .
Trình so test : Chương_trình này có nhiệm_vụ duyệt N lần , với N là số test cần so , mỗi lần thì chạy trình sinh test trước , xong đến lần_lượt lời_giải 1 và lời_giải 2 .
Sau khi chạy xong , ta có được file . out và . ans tương_ứng là kết_quả của hai chương_trình lời_giải , và việc còn_lại là so_sánh 2 file này với_nhau .
Nếu kết_quả trùng nhau (hoặc thỏa_mãn điều_kiện đề_bài với những bài có nhiều đáp số) , ta coi_như test đó đúng và chuyển đến test sau .
Nếu khác_nhau , ta in ra sai và dừng chương_trình lại luôn , và ta có 3 file . inp , . out , . ans là dữ_liệu của test sai .
Để chạy file , ta sử_dụng exec( . exe , ) trong Pascal và system(" . exe") trong C++ .
Ví_dụ : Bài_VMELLIP_Đây là một bài cấu_trúc dữ_liệu rất khó , thuộc đề thi VNOI_Marathon 2015 .
Bài viết xin được lấy code của tanphatls987 được 90 điểm làm ví_dụ .
Lời_giải 1 : Link code Đây là code của tanphatls987 , được thêm 2 dòng freopen vào để mở file .
Code gốc không có 2 dòng này vì nộp trên SPOJ sử_dụng Standard_Input / Output .
Lời_giải 2 : Link code Đây là code trâu với độ phức_tạp O(N_M) , làm y_như những gì đề_bài bảo .
Trình sinh test + Trình so test : Link code Vì đây là code C++ nên tác_giả kết_hợp trình sinh test với trình so test để_cho hàm_random chạy không bị trùng .
Code sinh test từ dòng 11 đến dòng 37 .
Ở đây , ta duyệt 100 lần ứng với 100 test , mỗi lần duyệt ta sinh ngẫu_nhiên ra file input vmellip . inp .
Sau_đó , ta lần_lượt chạy hai chương_trình ở trên : system("vmellip . exe") và system("vmellip_trau . exe") (lời giải 2 đặt_tên là vmellip_trau ) .
Sau_đó ta sử_dụng lệnh system("fc vmellip . out vmellip . ans") , có nhiệm_vụ so hai file text vmellip . out và vmellip . ans với_nhau .
Nếu hai file hoàn_toàn khớp nhau , lệnh system sẽ trả về exit code là 0 , còn không sẽ trả về exit code là 1 .
Chạy thử chương_trình này , ta có_thể sinh được một test sai như_sau : 1 5 6 6 3 1 1 8 1 1 1 1 6 1 1 1 1 1 9 2 1 1 8 9 8 Trong đó , lời_giải 1 ra output là : 1 Lời_giải 2 ra output là : 0 Giới_hạn test (dòng 3) được đặt nhỏ , mục_đích là để sinh_ra test sai nhỏ dễ debug hơn .
Sau khi code đã đúng , có_thể tăng giới_hạn lên để kiểm_tra mạnh hơn .
Làm_sao để viết trình chấm một_cách hiệu_quả ?
Qua ví_dụ trên , bạn có_thể cảm_thấy khá ngại khi code trình so test khá dài , code có_thể mất thời_gian .
Tuy_nhiên , ta hoàn_toàn có_thể viết code so test thành một template để ứng_dụng cho tất_cả các bài ! Với một template so test có_sẵn , việc còn_lại của ta chỉ là code phần sinh test và trình trâu , nếu_như đã làm_quen với trình chấm thì chỉ mất khoảng 10 phút để viết .
Tác_giả xin được chia_sẻ với các bạn các template trình chấm do chính mình sử_dụng .
Template dành cho C++ : include lt;bits/stdc++ . hgt; using namespace std ; // Tên chương_trình const string NAME = "template" ; // Số test kiểm_tra const int NTEST = 100 ; // Viết lại hàm_random để sử_dụng cho thuận_tiện .
Hàm_random này sinh ngẫu_nhiên số trong phạm_vi long_long , số sinh_ra gt;= l và lt;= h .
long_long Rand ( long_long l , long_long h ) return l + (( long_long ) rand () ( RAND_MAX + 1 ) ( RAND_MAX + 1 ) ( RAND_MAX + 1 ) + ( long_long ) rand () ( RAND_MAX + 1 ) ( RAND_MAX + 1 ) + ( long_long ) rand () ( RAND_MAX + 1 ) + rand ()) % ( h - l + 1 ); int main () srand ( time ( NULL )); for ( int iTest = 1 ; iTest lt;= NTEST ; iTest ++ ) ofstream inp (( NAME + " . inp" ) .
c_str ()); // Code phần sinh test ở đây inp .
close (); // Nếu dùng Linux thì " . /" + Tên chương_trình system (( NAME + " . exe" ) .
c_str ()); system (( NAME + "_trau . exe" ) .
c_str ()); // Nếu dùng linux thì thay fc bằng diff if ( system (( "fc " + NAME + " . out " + NAME + " . ans" ) .
c_str ()) ! = 0 ) cout lt;lt; "Test " lt;lt; iTest lt;lt; " : WRONG ! \n " ; return 0 ; cout lt;lt; "Test " lt;lt; iTest lt;lt; " : CORRECT ! \n " ; return 0 ; Template dành cho Pascal : mode objfpc // Thư_viện dos_chứa lệnh exec uses dos ; const // Tên chương_trình NAM = template ; // Số test kiểm_tra NTEST = 100 ; var iTest : integer ; begin for iTest : = 1 to NTEST do begin // Pascal không gặp vấn_đề với randomize , vì_vậy ta có_thể tách trình sinh test riêng ra .
Exec ( NAM + _sinhtest . exe , ); Exec ( NAM + . exe , ); Exec ( NAM + _trau . exe , ); Exec ( fc , NAM + . out + NAM + . ans ); if DosExitCode lt;gt; 0 then begin writeln ( Test , iTest , : WRONG ! ); exit ; end ; writeln ( Test , iTest , : CORRECT ! ); end ; end .
Template dùng Shell script Giả_sử bạn có 2 code khác_nhau , đã dịch ra 2 file executable là prog1 và prog2 .
Bạn viết thêm 1 trình sinh test và dịch ra file gen , gen nhận 1 argument là randomized seed (VD với C++ bạn dùng srand(atoi(argv1)) ) : Sinh 100 test for (( i = 1;ilt; = 100;i++ )) ; do Sinh input với seed i và lưu vào in_tmp . /gen i gt; in_tmp So_sánh output của 2 code , nếu output khác_nhau thì dừng lại .
Khi đó ta có file in_tmp chính là input mà 2 code chạy ra kết_quả khác_nhau .
diff lt; ( . /prog1 lt; in_tmp ) lt; ( . /prog2 lt; in_tmp ) break done Luyện_tập viết trình chấm Để viết trình chấm thành_thạo , hãy thử viết trình chấm với tất_cả các bài mà bạn luyện_tập , cho_đến khi_không còn ngại viết trình chấm nữa thì lúc_đó bạn sẽ thành_công .
Hãy đặt ra mục_tiêu là một sub AC với tất_cả các bài mình làm với sự hỗ_trợ của trình chấm .
Một_khi đã thành_thạo tuyệt_kĩ này , bạn sẽ dễ_dàng chinh_phục những kì_thi chấm offline và không bao_giờ phải lo_lắng làm sai nữa .

