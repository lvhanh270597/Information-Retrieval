Nơi tổng_hợp và chia_sẻ những kiến_thức liên_quan tới giải_thuật nói_chung và lý_thuyết khoa_học máy_tính nói_riêng .
in Trong bài trước_ta đã tìm_hiểu các thuật_toán tìm_kiếm xâu với thời_gian trong đó là độ_dài của văn_bản và là độ_dài của xâu tìm_kiếm .
Mỗi thuật_toán có đặc_tính và ứng_dụng riêng 2 : là thuật_toán tìm_kiếm tuyến_tính đơn_giản nhất , là thuật_toán có thời_gian sublinear trong thực_tế , có_ý nghĩa về_mặt lịch_sử cũng_như ý_tưởng của thuật_toán và thuật_toán này còn có_thể được mở_rộng ra trong trường_hợp thời_gian_thực và tìm_kiếm một_tập nhiều mẫu , được trong phát_hiện đạo_văn .
Tuy_nhiên , tất_cả các thuật_toán này đều rất khó mở_rộng khi chúng_ta muốn thực_hiện các truy_vấn (query) văn_bản .
Một_số truy_vấn thường gặp như : Ngoài hai truy_vấn cuối_cùng , các truy_vấn còn_lại có_thể được thực_hiện lặp_đi lặp_lại với các xâu mẫu khác_nhau .
Ta có_thể tưởng_tượng trong thực_tế văn_bản có kích_thước lớn còn xâu mẫu có kích_thước nhỏ .
Do_đó , một truy_vấn có_thể coi là nếu thời_gian_thực hiện truy_vấn chỉ phụ_thuộc vào độ_dài của , không phụ_thuộc vào độ_dài của .
Phương_pháp đầu_tiên chúng_ta có_thể nghĩ tới đó là tìm một_cách biểu_diễn sao_cho việc thực_hiện các truy_vấn được thực_hiện hiệu_quả .
Thời_gian để biểu_diễn sẽ được tính vào thời_gian tiền xử_lí .
Thông_thường , thời_gian tiền xử_lí là khá lớn .
Cây hậu_tố (suffix tree) , được đề_xuất bởi Weiner 1 vào năm 1973 , là một trong những cách biểu_diễn có_thể trả_lời các truy_vấn trên một_cách hiệu_quả .
Điều đặc_biệt là cây hậu_tố có_thể được xây_dựng trong thời_gian .
Knuth , theo , đã gọi thuật_toán xây_dựng cây hậu_tố của Winer là "giải thuật của năm 1973" .
Ví_dụ : , hình dưới_đây biểu_diễn cây hậu_tố với 6 nút lá .
Một điều đặc_biệt chú_ý là .
Ví_dụ không có cây hậu_tố biểu_diễn nào thỏa_mãn 5 tính_chất ở trên (mình khuyến_khích bạn_đọc nên thử xây dựng) .
Lí_do (sau khi bạn thử xây_dựng bạn sẽ thấy) không có cây hậu_tố tương_ứng là_vì hậu_tố là tiền_tố của hậu_tố .
Tổng_quát_hóa ta sẽ thấy : có cây hậu_tố biểu_diễn nó khi và chỉ khi có_một hậu_tố là tiền_tố của một hậu_tố khác . Do_đó , để đảm_bảo ta luôn có_thể xây_dựng được cây hậu_tố cho mọi văn_bản đầu_vào , ta sẽ thêm kí_tự không thuộc bảng_chữ_cái vào cuối của văn_bản .
Dễ thấy sau khi thêm , trường_hợp của nhận_xét trên không bao_giờ xảy_ra .
Từ đoạn này trở_đi của bài viết , ta luôn giả_sử .
Ta sẽ biểu_diễn cây hậu_tố dưới dạng cấu_trúc cây .
Về cơ_bản , mỗi nút của cây hậu_tố sẽ có các thông_tin sau : Nếu có các thông_tin khác lưu_trữ để tăng_tốc thuật_toán xây_dựng thì chúng_ta sẽ bổ_sung sau . Hậu_tố với được gọi_là hậu_tố thứ của và kí_hiệu là .
Với mỗi nút của cây hậu_tố , là xâu con thu được bằng cách ghép (concatenation) các xâu con của các cạnh trên đường_đi từ nút gốc đến của .
Độ_dài của xâu được gọi_là string depth và kí_hiệu là ( là viết tắt của string depth) .
Giả_sử chúng_ta đã xây_dựng được cây hậu_tố cho .
Sử_dụng cây hậu_tố , ta có_thể trả_lời một_số truy_vấn ở trên như_sau : Giả mã của các truy_vấn này được cho ở phần_phụ_lục ở cuối bài .
Dưới_đây , chúng_ta giới_thiệu thuật_toán đơn_giản với thời_gian xây_dựng cây hậu_tố .
Bài tiếp_theo chúng_ta sẽ làm_quen với thuật_toán . Ta lần_lượt xây_dựng cây hậu_tố bằng cách chèn lần_lượt các hậu_tố , trong đó là hậu_tố thứ của , vào cây hậu_tố hiện_tại .
Cây hậu_tố chỉ_có 1 nút lá (và một nút gốc) biểu_diễn hậu_tố .
Tại bước thứ , thuật_toán chèn hậu_tố vào cây hậu_tố hiện_tại .
Để chèn hậu_tố vào cây hậu_tố hiện_tại , ta sẽ : Ví_dụ Cây hậu tối khi chèn và lần_lượt tương_ứng với trường_hợp (I) và (II) sẽ như ở hình_vẽ sau : Giả mã của thuật_toán như_sau : Code của giả mã bằng C .
Code đầy_đủ được đính ở cuối bài .
Trước_hết ta phân_tích xem cây hậu_tố ở trên có tối_đa bao_nhiêu nút .
Dễ_dàng thấy số nút lá của cây hậu_tố là , bằng kích_thước của văn_bản đầu_vào , vì mỗi nút lá ứng với một hậu_tố .
Trong quá_trình xây_dựng cây hậu_tố , một nút trong chỉ xuất_hiện khi chèn thêm một hậu_tố mới .
Do_đó , số nút trong của cây không_thể vượt_quá là số nút lá .
Do_đó , cây hậu_tố có tối_đa nút .
Nếu biểu_diễn con_trỏ tới các nút con bằng mảng như thực_hiện ở trên , thì cần con_trỏ cho mỗi nút trong của cây .
Do_đó , mỗi nút chiếm bộ_nhớ là để biểu_diễn và tổng_bộ_nhớ cần để biểu_diễn cây là .
Tuy_nhiên , nếu ta biểu_diễn con_trỏ tới các nút con là một danh_sách , thì số_lượng con_trỏ của tất_cả các nút trong không lớn hơn số cạnh của cây hậu_tố .
Vì cây hậu_tố có tối_đa nút , nó sẽ có tối_đa cạnh và do_đó số con_trỏ đó không quá .
Như_vậy , bộ_nhớ để biểu_diễn cây trong trường_hợp này là . Về_mặt thời_gian , có_thể thấy rằng thuật_toán xây_dựng cây hậu_tố trong bước .
Bước thứ tìm_kiếm hậu_tố trong cây hậu_tố đang xây_dựng hiện_tại .
Bước này sử_dụng (là chiều_dài của hậu_tố ) phép so_sánh để tìm_kiếm .
Do_đó , tổng thời_gian của thuật_toán là .
Code của giả mã bằng C : Code của giả mã bằng C : Như đã nhắc đến ở trên , để thực_hiện truy_vấn này , với mỗi nút , chúng_ta lưu thêm một trường lưu_số lượng nút lá của cây_con gốc .
Thông_tin này có_thể được cập_nhật trong quá_trình xây_dựng cây mà không làm giảm thời_gian tiệm_cận xây_dựng cây .
Code của giả mã bằng C : Để thực_hiện truy_vấn này , với mỗi nút , chúng_ta lưu thêm một trường lưu string depth của nút .
Thông_tin này có_thể được cập_nhật trong quá_trình xây_dựng cây mà không làm giảm thời_gian tiệm_cận xây_dựng cây .
Code của giả mã bằng C : Code của giả mã bằng C : Code : .
1 Weiner , Peter .
Switching and Automata_Theory , 1973 .
SWAT08 .
IEEE_Conference_Record of 14th Annual_Symposium on .
IEEE , 1973 .
2 Gusfield , Dan .
.
Cambridge university press , 1997 .
3 Carl_Kingsford .
.
CMSC 423 , CMU .
Hậu_tố của một xâu là một xâu con của có dạng với là một_số nào_đó thỏa_mãn .
Ví_dụ thì_là một hậu_tố của .
Chú_ý là hậu_tố của chính nó .
Một hậu_tố của được gọi_là một hậu_tố riêng (proper suffix) nếu hậu_tố đó khác .
, , Trackback link : Powered by and
