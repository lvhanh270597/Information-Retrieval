{"content": "Table of_Contents Giới_thiệu Mô_tả regex Sử_dụng regex Debug regex Trong_Java_Trong_C++ POSIX_regex Ví_dụ GNU_regex Ví_dụ Ví_dụ trong các cuộc_thi SRMs Tham_khảo Bài viết gốc : Using_Regular_Expressions - đăng bởi DanPopovici amp; mariusmuja trên Topcoder Giới_thiệu Một regex ( regular expression ) là một chuỗi ký_tự đặc_biệt dùng để mô_tả một mẫu tìm_kiếm ( search pattern ) .\nHẳn_là nhiều bạn đã nhìn_thấy hoặc dùng regex trong các câu_lệnh như ls . txt (hoặc dir . txt ) để liệt_kê ra tất_cả các file có đuôi txt .\nRegex rất hữu_dụng không chỉ trong việc tìm_kiếm trên xâu ( pattern matching ) mà_còn trong việc xử_lý văn_bản .\nTrong các kỳ SRMs thì regex có_thể cực_kỳ hữu_ích .\nVài dòng code sử_dụng regex trong các bài_toán xử_lý text có_thể khiến việc lập_trình trở_nên dễ_thở hơn nhiều .\nMô_tả regex Một regex là một hoặc nhiều \"nhánh\" không rỗng , được phân_cách bởi ký_tự .\nRegex sẽ khớp với bất_kỳ cái_gì khớp với một trong các nhánh của nó .\nRegex sau sẽ khớp với bất_kỳ từ nào trong 3 từ \"the\" , \"top\" , \"coder\" .\nRegex : thetopcoder INPUT : Marius is one of the topcoders .\nTìm_thấy \"the\" bắt_đầu ở vị_trí 17 và kết_thúc ở vị_trí 20 .\nTìm_thấy \"top\" bắt_đầu ở vị_trí 21 và kết_thúc ở vị_trí 24 .\nTìm_thấy \"coder\" bắt_đầu ở vị_trí 24 và kết_thúc ở vị_trí 29 .\nMột nhánh bao_gồm một hoặc nhiều mảnh nối vào với_nhau .\nNó sẽ khớp với mảnh đầu_tiên trước , rồi sau_đó sẽ đến mảnh thứ 2 , thứ 3 , v . v . Một mảnh là một nguyên_tử (atom) có_thể được theo sau bởi một trong các ký_tự sau , + , ?\n, hoặc biên ( bound ) : Một nguyên_tử được theo sau bởi sẽ khớp với chuỗi nào có 0 hoặc nhiều hơn phần khớp với nguyên_tử đó .\nMột nguyên_tử được theo sau bởi + sẽ khớp với chuỗi nào có 1 hoặc nhiều hơn phần khớp với nguyên_tử đó .\nMột nguyên_tử được theo sau bởi ?\nsẽ khớp với chuỗi nào có 0 hoặc 1 phần khớp với nguyên_tử đó .\nRegex sau sẽ khớp với chuỗi nào có chữ \"top\" và \"coder\" nối_tiếp nhau : Regex : (topcoder)+ INPUT : This regex matches topcoder , codertop , toptop , toptoptop , codercoder . . .\nTìm_thấy \"topcoder\" bắt_đầu ở vị_trí 19 và kết_thúc ở vị_trí 27 .\nTìm_thấy \"codertop\" bắt_đầu ở vị_trí 37 vả kết_thúc ở vị_trí 45 .\nMột biên được bắt_đầu bởi được theo sau bởi 1 hoặc 2 số_nguyên không dấu cách nhau bởi dấu , , và luôn kết_thúc bởi .\nNếu có 2 số_nguyên thì số thứ nhất sẽ không lớn hơn số thứ_hai .\nMột nguyên_tử theo sau bởi một biên chứa duy_nhất một_số nguyên i thì sẽ khớp với xâu được ghép bởi đúng i nguyên_tử .\nMột nguyên_tử theo sau bởi một biên chứa duy_nhất một_số nguyên i có dấu , đằng_sau thì sẽ khớp với xâu được ghép bởi i hoặc nhiều hơn i nguyên_tử .\nMột nguyên_tử theo sau bởi một biên chứa 2 số_nguyên i , j sẽ khớp với xâu được ghép bởi i đến j nguyên_tử .\nRegex sau sẽ khớp với bất_kỳ xâu nào có 2 , 3 hoặc 4 ký_tự 1 : Regex : 12 , 4 INPUT : 101 + 10 = 111 , 11111 = 10000 + 1111 Tìm_thấy \"111\" bắt_đầu ở vị_trí 11 và kết_thúc ở vị_trí 14 .\nTìm_thấy \"1111\" bắt_đầu ở vị_trí 17 và kết_thúc ở vị_trí 21 Tìm_thấy \"1111\" bắt_đầu ở vị_trí 33 và kết_thúc ở vị_trí 37 .\nChúng_ta có_thể thấy rằng chuỗi dài nhất có_thể sẽ được khớp và các đoạn được khớp sẽ không giao nhau .\nMột nguyên_tử (atom) có_thể là : Một regex được đặt trong dấu ngoặc tròn () (khớp với cả regex) Một biểu_thức ngoặc (xem ví dụ) .\n(khớp với bất_kỳ ký_tự nào) (khớp với xâu rỗng ở đầu dòng) (khớp với xâu rỗng ở cuối dòng) Ký_tự \\ được theo sau bởi một trong các ký_tự . ()\\+ ? \\ (khớp với các ký_tự đặc_biệt tương ứng) Một ký_tự (khớp với ký_tự đó) .\nKý_tự \\ được theo sau bởi một chữ_số d khác 0 .\nNguyên_tử này sẽ khớp với chuỗi ký_tự giống với chuỗi ký_tự được khớp bởi biểu_thức con trong ngoặc tròn thứ d (đánh số ngoặc tròn bằng vị_trí của mở ngoặc từ trái qua phải) .\nVí_dụ : (bc)\\1 sẽ khớp với bb hoặc cc và không khớp với bc .\nRegex sau_đây khớp với một xâu được tạo bởi 2 chữ_in thường giống nhau được phân_cách bởi bất_kỳ ký_tự nào : Regex : (a-z+) . \\1 INPUT : top-topcodercoder Tìm_thấy \"top-top\" bắt_đầu ở vị_trí 0 và kết_thúc ở vị_trí 7 .\nTìm_thấy \"codercoder\" bắt_đầu vở vị_trí 7 và kết_thúc ở vị_trí 18 .\nMột danh_sách các ký_tự được viết trong dấu khớp với bất_ký ký_tự đơn nào ở trong danh_sách .\nNếu danh_sách được bắt_đầu bởi , nó sẽ khớp với bất_kỳ ký_tự nào không ở trong danh_sách .\nNếu 2 ký_tự trong danh_sách được phân_cách bởi - thì_có nghĩa_là danh_sách này bao_gồm tất_cả các ký_tự nằm trong \"đoạn\" với 2 đầu là 2 ký_tự đó (ví dụ 0-9 khớp với bất_kỳ chữ_số_thập_phân nào) .\nTất_cả các ký_tự (ngoại trừ , , - ) , kể_cả ký_tự đặc_biệt đều mất đi tính_chất đặc_biệt của nó trong biểu_thức ngoặc .\nRegex sau_đây khớp với các từ không bắt_đầu bởi b , c , d và kết_thúc bởi at : Regex : b-dat INPUT : bat Không tìm_thấy xâu nào khớp .\nRegex : b-dat INPUT : hat Tìm_thấy \"hat\" bắt_đầu ở vị_trí 0 và kết_thúc ở vị_trí 3 .\nVí_dụ sau_đây sẽ bao_gồm hầu_hết các định_nghĩa ở phía trên đã nêu .\nNó sẽ khớp với một cặp HTML tag đóng/mở và nội_dung giữa 2 tag này .\nRegex : lt;(a-zA-Za-zA-Z0-9)(() gt;)gt;( . )lt;/\\1gt; INPUT : lt;font size=\"2\"gt;Topcoder is thelt;/fontgt; lt;bgt;bestlt;/bgt; Tìm_thấy \"lt;font size=\"2\"gt;Topcoder is thelt;/fontgt;\" bắt_đầu ở vị_trí 0 và kết_thúc ở vị_trí 37 .\nTìm_thấy \"lt;bgt;bestlt;/bgt;\" bắt_đầu ở vị_trí 38 và kết_thúc ở vị_trí 49 .\nGiải_thích : (a-zA-Za-zA-Z0-9\\) sẽ khớp với bất_kỳ từ nào bắt_đầu bởi một chữ_cái và tiếp_tục bởi một_số lượng chữ_cái hoặc chữ_số bất_kỳ .\n(() gt;\\) sẽ khớp với xâu rỗng hoặc bất_kỳ xâu nào không chứa gt; .\n\\1 khớp với xâu nào mà (a-zA-Za-zA-Z0-9\\) đã khớp trước đó .\nMô_tả trên là mô_tả sơ_qua về regex cơ_bản .\nMột regex được viết bởi các luật trên sẽ chạy được ở Java (gt;= 1 . 4) và C++ (POSIX EXTENDED) .\nĐể tìm_hiểu sâu hơn về các mở_rộng được cung_cấp bởi các ngôn_ngữ khác mời các bạn xem phần tham_khảo .\nSử_dụng regex Debug regex Trong các ngôn_ngữ_lập_trình khác_nhau , thường regex có_thể khác_nhau đôi_chút .\nĐể kiểm_tra 1 đoạn regex trong 1 ngôn_ngữ có_ý nghĩa gì , các bạn có_thể lên search \"debug regex online\" , có khá nhiều trang phù_hợp .\nTrong_Java_Trong_Java (từ 1 . 4 trở lên) có_một package tên là java . util . regex cho_phép sử_dụng regex .\nPackage này bao_gồm 3 class : Pattern , Matcher , PatternSyntaxException .\nObject_Pattern là một regex đã được biên_dịch .\nClass_Pattern không cung_cấp public constructors .\nĐể tạo ra một object , bạn phải sử_dụng một trong các method của nó và chúng sẽ trả về một object Pattern .\nObject_Matcher sẽ tiến_hành thông_dịch mẫu và khớp với input .\nGiống_như class Pattern , Matcher không có public constructors .\nĐể tạo ra một object Matcher bạn phải sử_dụng method của class Matcher trên một object Pattern và nó sẽ trả về một object Matcher .\nObject_PatternSyntaxException là unchecked exception chỉ ra lỗi cú_pháp của regex .\nVí_dụ (lấy từ 4) : Pattern pattern ; Matcher matcher ; pattern = Pattern .\ncompile (lt; REGEX gt;); matcher = pattern .\nmatcher (lt; INPUT gt;); boolean found ; while ( matcher .\nfind ()) System .\nout .\nprintln ( \"Found the text \\\"\" + matcher .\ngroup () + \"\\\" starting at index \" + matcher .\nstart () + \" and ending at index \" + matcher .\nend () + \" . \" ); found = true ; if ( ! found ) System .\nout .\nprintln ( \"No match found . \" ); Java cũng cung_cấp các method sau trong class String : boolean matches(String regex) : kiểm_tra xem xâu hiện_tại có khớp với regex không .\nString replaceAll(String regex , String replacement) : Thay tất_cả các xâu con của xâu hiện_tại mà khớp với regex bằng xâu replacement .\nString replaceFirst(String regex , String replacement) : Thay xâu con_đầu tiên của xâu hiện_tại mà khớp với regex bằng xâu replacement .\nString split(String regex) : Chia xâu hiện_tại thành nhiều xâu sử_dụng các xâu con khớp với regex làm phân_cách .\nTrong_C++_Nhiều topcoders cho_rằng regex là một trong những điểm mạnh_của Java so_với C++ .\nTuy_nhiên các coders sử_dụng C++ cũng không_hề nản_chí vì regex cũng có_thể được sử_dụng trong C++ .\nCó nhiều thư_viện hỗ_trợ regex cho C++ , tuy_nhiên chúng không tương_thích với_nhau tốt cho_lắm .\nMột điều may_mắn đó là bạn có_thể chọn_lựa một trong các thư_viện này để sử_dụng và không_phải lo là nó không tương_thích với_nhau .\nNếu bạn muốn dùng regex ở arena bạn phải lựa_chọn giữa 2 APIs : POSIX_regex và GNU_regex .\nĐể sử_dụng 2 APIs này bạn phải thêm header \"regex . h\" .\nCả 2 APIs đều được thực_hiện qua 2 bước .\nĐầu_tiên sẽ có_một hàm biên_dịch regex , sau_đó sẽ có_một hàm khớp/tìm regex đã được biên_dịch với xâu cần khớp .\nSau_đây sẽ là mô_tả ngắn_gọn về 2 APIs này để_cho các bạn có_thể chọn_lựa bạn thích cái nào hơn .\nPOSIX_regex POSIX_regex hỗ_trợ 2 kiểu regex khác_nhau : cơ_bản và mở_rộng .\nRegex cơ_bản tương_tự như trong ed , trong_khi regex mở_rộng tương_tự như trong egrep , thêm vào các phép_toán , + , ?\nvà không yêu_cầu \\ ở các biểu_thức con viết trong ngoặc_đơn () hoặc các biên được viết trong ngoặc nhọn .\nKiểu cơ_bản là mặc_định , nhưng kiểu mở_rộng được ưa_thích hơn .\nVới_POSIX , bạn chỉ_có thể tìm_kiếm regex mà không_thể khớp được .\nĐể khớp được , bạn phải biên_dịch nó thành một pattern buffer , sử_dụng regcomp .\nMột_khi đã biên_dịch thành pattern buffer bạn có_thể tìm_kiếm trong một xâu kết_thúc bằng null bằng cách dùng regexec .\nNếu một trong hai hàm regcomp và regexec gặp lỗi nó sẽ trả về error code .\nĐể biết được lỗi là gì bạn dùng regerror .\nĐể giải_phóng bộ_nhớ của pattern buffer bạn dùng regfree .\nĐể biết cách sử_dụng chi_tiết mời các bạn xem mục 2 và 3 ở phần tham_khảo .\nVí_dụ Sau_đây là một ví_dụ về cách sử_dụng các hàm này : regex_t reg ; string pattern = \"tpr2 , \" ; string str = \"topcoder\" ; regmatch_t matches 1 ; regcomp ( amp; reg , pattern .\nc_str () , REG_EXTENDED REG_ICASE ); if ( regexec ( amp; reg , str .\nc_str () , 1 , matches , 0 ) == 0 ) cout lt;lt; \"Match \" cout lt;lt; str .\nsubstr ( matches 0 .\nrm_so , matches 0 .\nrm_eo - matches 0 .\nrm_so ) cout lt;lt; \" found starting at : \" cout lt;lt; matches 0 .\nrm_so cout lt;lt; \" and ending at \" cout lt;lt; matches 0 .\nrm_eo cout lt;lt; endl ; else cout lt;lt; \"Match not found . \" cout lt;lt; endl ; regfree ( amp; reg ); GNU_regex GNU_regex API có nhiều hàm hơn .\nVới các hàm của GNU_regex các bạn có_thể khớp một xâu với mẫu và cũng có_thể tìm_kiếm mẫu ở trong xâu .\nViệc sử_dụng các hàm này cũng tương_tự như việc sử_dụng các hàm của POSIX : đầu_tiên một mẫu cần phải được biên_dịch sử_dụng re_compile_pattern , sau_đó nhận được pattern buffer và nó được dùng để tìm và khớp .\nCác hàm sử_dụng cho tìm_kiếm và khớp là re_search và re_match .\nTrong trường_hợp tìm_kiếm thì fastmap có_thể được sử_dụng để tối_ưu việc tìm_kiếm .\nNếu_không có fastmap thuật_toán tìm_kiếm sẽ khớp các mẫu ở các_vị trí liên_tiếp nhau trong xâu .\nFastmap sẽ chỉ ra vị_trí của ký_tự bắt_đầu tìm_kiếm .\nFastmap được tạo bằng cách gọi re_compile_fastmap .\nGNU_regex còn có hàm re_search2 và re_match2 cho việc tìm_kiếm và khớp với những data tách_rời .\nĐể giải_phóng bộ_nhớ của pattern buffer bạn dùng regfree .\nĐể biết cách sử_dụng chi_tiết mời các bạn xem mục 3 ở phần tham_khảo .\nVí_dụ string pattern = \"(a-z+) .\n\\\\ 1\" ; string str = \"top-topcodercoder\" ; re_pattern_buffer buffer ; char map 256 ; buffer .\ntranslate = 0 ; buffer .\nfastmap = map ; buffer .\nbuffer = 0 ; buffer .\nallocated = 0 ; re_set_syntax ( RE_SYNTAX_POSIX_EXTENDED ); const char status = re_compile_pattern ( pattern .\nc_str () , pattern .\nsize () , amp; buffer ); if ( status ) cout lt;lt; \"Error : \" lt;lt; status lt;lt; endl ; re_compile_fastmap ( amp; buffer ); struct re_registers regs ; int ofs = 0 ; if ( re_search ( amp; buffer , str .\nc_str () , str .\nsize () , 0 , str .\nsize () , amp; regs ) ! =- 1 ) cout lt;lt; \"Match \" cout lt;lt; str .\nsubstr ( regs .\nstart 0 , regs .\nend 0 - regs .\nstart 0 ) cout lt;lt; \" found starting at : \" cout lt;lt; regs .\nstart 0 cout lt;lt; \" and ending at \" cout lt;lt; regs .\nend 0 cout lt;lt; endl ; else cout lt;lt; \"Match not found . \" cout lt;lt; endl ; regfree ( amp; buffer ); Ví_dụ trong các cuộc_thi SRMs_Các ví_dụ phía dưới được viết_bằng Java .\nBạn nào dùng C++ có_thể dùng POSIX hoặc GNU_regex APIs để viết các hàm tương_đương trong Java (replace_all , split , matches) .\nCyberLine (SRM 187 div 1 , level 1) import java . util .\n; public class Cyberline public String lastCyberword ( String cyberline ) String w = cyberline .\nreplaceAll ( \"-\" , \"\" ) .\nreplaceAll ( \"a-zA-Z0-9\" , \" \" ) .\nsplit ( \" \" ) ; return w w .\nlength - 1 ; UnLinker (SRM 203 div 2 , level 3) import java . util .\n; public class UnLinker public String clean ( String text ) String m = text .\nsplit ( \"((http : //) ? www . http : //)a-zA-Z0-9 . + . (comorgeduinfotv)\" , - 1 ); String s = m 0 ; for ( int i = 1 ; i lt; m .\nlength ; ++ i ) s = s + \"OMIT\" + i + m i ; return s ; CheatCode (SRM 154 div 1 , level 1) import java . util .\n; public class CheatCode public int matches ( String keyPresses , String codes ) boolean map = new boolean codes .\nlength ; int count = 0 ; for ( int i = 0 ; i lt; codes .\nlength ; ++ i ) String regex = \" . \" ; for ( int j = 0 ; j lt; codes i .\nlength (); ) int k = 1 ; while (( j + k )lt; codes i .\nlength () amp;amp; codes i .\ncharAt ( j + k )== codes i .\ncharAt ( j )) k ++; regex = regex + codes i .\ncharAt ( j ) + \"\" + k + \" , \" ; j += k ; regex = regex + \" . \" ; if ( keyPresses .\nmatches ( regex )) map i = true ; count ++ ; int res = new int count ; int j = 0 ; for ( int i = 0 ; i lt; codes .\nlength ; ++ i ) if ( map i == true ) res j ++= i ; return res ; Tham_khảo Xem trang hướng_dẫn của linux : regex(7) Xem trang hướng_dẫn của linux : regex(3) http : //docs . freebsd . org/info/regex/regex . info . Programming_with_Regex . html http : //www . regular-expressions . info/ http : //java . sun . com/docs/books/tutorial/extra/regex/\n", "tagged": "Table/Np of_Contents/Np Giới_thiệu/V Mô_tả/V regex/Np Sử_dụng/V regex/Np Debug/Np regex/Np Trong_Java_Trong_C++/Np POSIX_regex/Np Ví_dụ/C GNU_regex/Np Ví_dụ/C Ví_dụ/C trong/E các/L cuộc_thi/Np SRMs/Np Tham_khảo/V Bài/N viết/V gốc/N :/CH Using_Regular_Expressions/Np -/CH đăng/V bởi/E DanPopovici/Np amp;/Np mariusmuja/Np trên/E Topcoder/Np Giới_thiệu/V Một/M regex/Np (/CH regular/Np expression/Np )/CH là/V một/M chuỗi/N ký_tự/Np đặc_biệt/A dùng/V để/E mô_tả/V một/M mẫu/N tìm_kiếm/V (/CH search/Np pattern/Np )/CH ./CH\nHẳn_là/Np nhiều/A bạn/N đã/R nhìn_thấy/Np hoặc/Cc dùng/V regex/Np trong/E các/L câu_lệnh/Np như/C ls/Np ./CH txt/Np (hoặc/Np dir/Np ./CH txt/Np )/CH để/E liệt_kê/V ra/V tất_cả/P các/L file/Np có/V đuôi/N txt/Np ./CH\nRegex/Np rất/R hữu_dụng/Np không/R chỉ/R trong/E việc/N tìm_kiếm/V trên/E xâu/Np (/CH pattern/Np matching/Np )/CH mà_còn/C trong/E việc/N xử_lý/V văn_bản/N ./CH\nTrong/E các/L kỳ/N SRMs/Np thì/C regex/Np có_thể/R cực_kỳ/R hữu_ích/A ./CH\nVài/L dòng/N code/Np sử_dụng/V regex/Np trong/E các/L bài_toán/N xử_lý/V text/Np có_thể/R khiến/V việc/N lập_trình/V trở_nên/V dễ_thở/A hơn/A nhiều/A ./CH\nMô_tả/V regex/Np Một/M regex/Np là/V một/M hoặc/Cc nhiều/A \"nhánh\"/Np không/R rỗng/A ,/CH được/V phân_cách/V bởi/E ký_tự/Np ./CH\nRegex/Np sẽ/R khớp/N với/E bất_kỳ/A cái_gì/Np khớp/N với/E một/M trong/E các/L nhánh/N của/E nó/P ./CH\nRegex/Np sau/E sẽ/R khớp/N với/E bất_kỳ/A từ/E nào/P trong/E 3/M từ/E \"the\"/Np ,/CH \"top\"/Np ,/CH \"coder\"/Np ./CH\nRegex/Np :/CH thetopcoder/Np INPUT/Np :/CH Marius/Np is/Np one/Np of/E the/B topcoders/Np ./CH\nTìm_thấy/Np \"the\"/Np bắt_đầu/V ở/E vị_trí/N 17/M và/Cc kết_thúc/V ở/E vị_trí/N 20/M ./CH\nTìm_thấy/Np \"top\"/Np bắt_đầu/V ở/E vị_trí/N 21/M và/Cc kết_thúc/V ở/E vị_trí/N 24/M ./CH\nTìm_thấy/Np \"coder\"/Np bắt_đầu/V ở/E vị_trí/N 24/M và/Cc kết_thúc/V ở/E vị_trí/N 29/M ./CH\nMột/M nhánh/N bao_gồm/V một/M hoặc/Cc nhiều/A mảnh/Nc nối/V vào/E với_nhau/Np ./CH\nNó/P sẽ/R khớp/N với/E mảnh/Nc đầu_tiên/A trước/E ,/CH rồi/C sau_đó/Np sẽ/R đến/E mảnh/Nc thứ/N 2/M ,/CH thứ/N 3/M ,/CH v/Nu ./CH v/Nu ./CH Một/M mảnh/Nc là/V một/M nguyên_tử/Np (atom)/Np có_thể/R được/V theo/V sau/E bởi/E một/M trong/E các/L ký_tự/Np sau/E ,/CH +/CH ,/CH ?/CH\n,/CH hoặc/Cc biên/N (/CH bound/Np )/CH :/CH Một/M nguyên_tử/Np được/V theo/V sau/E bởi/E sẽ/R khớp/N với/E chuỗi/N nào/P có/V 0/M hoặc/Cc nhiều/A hơn/A phần/N khớp/N với/E nguyên_tử/Np đó/P ./CH\nMột/M nguyên_tử/Np được/V theo/V sau/E bởi/E +/CH sẽ/R khớp/N với/E chuỗi/N nào/P có/V 1/M hoặc/Cc nhiều/A hơn/A phần/N khớp/N với/E nguyên_tử/Np đó/P ./CH\nMột/M nguyên_tử/Np được/V theo/V sau/E bởi/E ?/CH\nsẽ/R khớp/N với/E chuỗi/N nào/P có/V 0/M hoặc/Cc 1/M phần/N khớp/N với/E nguyên_tử/Np đó/P ./CH\nRegex/Np sau/E sẽ/R khớp/N với/E chuỗi/N nào/P có/V chữ/N \"top\"/Np và/Cc \"coder\"/Np nối_tiếp/V nhau/N :/CH Regex/Np :/CH (topcoder)+/Np INPUT/Np :/CH This/Np regex/Np matches/Np topcoder/Np ,/CH codertop/Np ,/CH toptop/Np ,/CH toptoptop/Np ,/CH codercoder/Np ./CH ./CH ./CH\nTìm_thấy/Np \"topcoder\"/Np bắt_đầu/V ở/E vị_trí/N 19/M và/Cc kết_thúc/V ở/E vị_trí/N 27/M ./CH\nTìm_thấy/Np \"codertop\"/Np bắt_đầu/V ở/E vị_trí/N 37/M vả/Np kết_thúc/V ở/E vị_trí/N 45/M ./CH\nMột/M biên/N được/V bắt_đầu/V bởi/E được/V theo/V sau/E bởi/E 1/M hoặc/Cc 2/M số_nguyên/Np không/R dấu/N cách/N nhau/N bởi/E dấu/N ,/CH ,/CH và/Cc luôn/R kết_thúc/V bởi/E ./CH\nNếu/C có/V 2/M số_nguyên/Np thì/C số/N thứ/N nhất/A sẽ/R không/R lớn/A hơn/A số/N thứ_hai/N ./CH\nMột/M nguyên_tử/Np theo/V sau/E bởi/E một/M biên/N chứa/V duy_nhất/A một_số/L nguyên/A i/M thì/C sẽ/R khớp/N với/E xâu/Np được/V ghép/V bởi/E đúng/A i/M nguyên_tử/Np ./CH\nMột/M nguyên_tử/Np theo/V sau/E bởi/E một/M biên/N chứa/V duy_nhất/A một_số/L nguyên/A i/M có/V dấu/N ,/CH đằng_sau/Np thì/C sẽ/R khớp/N với/E xâu/Np được/V ghép/V bởi/E i/M hoặc/Cc nhiều/A hơn/A i/M nguyên_tử/Np ./CH\nMột/M nguyên_tử/Np theo/V sau/E bởi/E một/M biên/N chứa/V 2/M số_nguyên/Np i/M ,/CH j/Np sẽ/R khớp/N với/E xâu/Np được/V ghép/V bởi/E i/M đến/E j/Np nguyên_tử/Np ./CH\nRegex/Np sau/E sẽ/R khớp/N với/E bất_kỳ/A xâu/Np nào/P có/V 2/M ,/CH 3/M hoặc/Cc 4/M ký_tự/Np 1/M :/CH Regex/Np :/CH 12/M ,/CH 4/M INPUT/Np :/CH 101/M +/CH 10/M =/CH 111/M ,/CH 11111/Np =/CH 10000/M +/CH 1111/Np Tìm_thấy/Np \"111\"/Np bắt_đầu/V ở/E vị_trí/N 11/M và/Cc kết_thúc/V ở/E vị_trí/N 14/M ./CH\nTìm_thấy/Np \"1111\"/Np bắt_đầu/V ở/E vị_trí/N 17/M và/Cc kết_thúc/V ở/E vị_trí/N 21/M Tìm_thấy/Np \"1111\"/Np bắt_đầu/V ở/E vị_trí/N 33/M và/Cc kết_thúc/V ở/E vị_trí/N 37/M ./CH\nChúng_ta/P có_thể/R thấy/V rằng/C chuỗi/N dài/A nhất/A có_thể/R sẽ/R được/V khớp/N và/Cc các/L đoạn/Nc được/V khớp/N sẽ/R không/R giao/V nhau/N ./CH\nMột/M nguyên_tử/Np (atom)/Np có_thể/R là/V :/CH Một/M regex/Np được/V đặt/V trong/E dấu/N ngoặc/Np tròn/A ()/Np (khớp/Np với/E cả/P regex)/Np Một/M biểu_thức/Np ngoặc/Np (xem/Np ví/N dụ)/Np ./CH\n(khớp/Np với/E bất_kỳ/A ký_tự/Np nào)/Np (khớp/Np với/E xâu/Np rỗng/A ở/E đầu/N dòng)/Np (khớp/Np với/E xâu/Np rỗng/A ở/E cuối/N dòng)/Np Ký_tự/Np \\/Np được/V theo/V sau/E bởi/E một/M trong/E các/L ký_tự/Np ./CH ()\\+/Np ?/CH \\/Np (khớp/Np với/E các/L ký_tự/Np đặc_biệt/A tương/Np ứng)/Np Một/M ký_tự/Np (khớp/Np với/E ký_tự/Np đó)/Np ./CH\nKý_tự/Np \\/Np được/V theo/V sau/E bởi/E một/M chữ_số/Np d/Ny khác/A 0/M ./CH\nNguyên_tử/Np này/P sẽ/R khớp/N với/E chuỗi/N ký_tự/Np giống/N với/E chuỗi/N ký_tự/Np được/V khớp/N bởi/E biểu_thức/Np con/Nc trong/E ngoặc/Np tròn/A thứ/N d/Ny (đánh/Np số/N ngoặc/Np tròn/A bằng/E vị_trí/N của/E mở/V ngoặc/Np từ/E trái/Nc qua/V phải)/Np ./CH\nVí_dụ/C :/CH (bc)\\1/Np sẽ/R khớp/N với/E bb/Np hoặc/Cc cc/Ny và/Cc không/R khớp/N với/E bc/Np ./CH\nRegex/Np sau_đây/Np khớp/N với/E một/M xâu/Np được/V tạo/V bởi/E 2/M chữ_in/Np thường/R giống/N nhau/N được/V phân_cách/V bởi/E bất_kỳ/A ký_tự/Np nào/P :/CH Regex/Np :/CH (a-z+)/Np ./CH \\1/Np INPUT/Np :/CH top-topcodercoder/Np Tìm_thấy/Np \"top-top\"/Np bắt_đầu/V ở/E vị_trí/N 0/M và/Cc kết_thúc/V ở/E vị_trí/N 7/M ./CH\nTìm_thấy/Np \"codercoder\"/Np bắt_đầu/V vở/N vị_trí/N 7/M và/Cc kết_thúc/V ở/E vị_trí/N 18/M ./CH\nMột/M danh_sách/N các/L ký_tự/Np được/V viết/V trong/E dấu/N khớp/N với/E bất_ký/Np ký_tự/Np đơn/N nào/P ở/E trong/E danh_sách/N ./CH\nNếu/C danh_sách/N được/V bắt_đầu/V bởi/E ,/CH nó/P sẽ/R khớp/N với/E bất_kỳ/A ký_tự/Np nào/P không/R ở/E trong/E danh_sách/N ./CH\nNếu/C 2/M ký_tự/Np trong/E danh_sách/N được/V phân_cách/V bởi/E -/CH thì_có/X nghĩa_là/V danh_sách/N này/P bao_gồm/V tất_cả/P các/L ký_tự/Np nằm/V trong/E \"đoạn\"/Np với/E 2/M đầu/N là/V 2/M ký_tự/Np đó/P (ví/Np dụ/V 0-9/Np khớp/N với/E bất_kỳ/A chữ_số_thập_phân/Np nào)/Np ./CH\nTất_cả/P các/L ký_tự/Np (ngoại/Np trừ/V ,/CH ,/CH -/CH )/CH ,/CH kể_cả/X ký_tự/Np đặc_biệt/A đều/R mất/V đi/V tính_chất/N đặc_biệt/A của/E nó/P trong/E biểu_thức/Np ngoặc/Np ./CH\nRegex/Np sau_đây/Np khớp/N với/E các/L từ/E không/R bắt_đầu/V bởi/E b/Ni ,/CH c/Ni ,/CH d/Ny và/Cc kết_thúc/V bởi/E at/Np :/CH Regex/Np :/CH b-dat/Np INPUT/Np :/CH bat/Np Không/R tìm_thấy/Np xâu/Np nào/P khớp/N ./CH\nRegex/Np :/CH b-dat/Np INPUT/Np :/CH hat/Np Tìm_thấy/Np \"hat\"/Np bắt_đầu/V ở/E vị_trí/N 0/M và/Cc kết_thúc/V ở/E vị_trí/N 3/M ./CH\nVí_dụ/C sau_đây/Np sẽ/R bao_gồm/V hầu_hết/R các/L định_nghĩa/N ở/E phía/N trên/E đã/R nêu/V ./CH\nNó/P sẽ/R khớp/N với/E một/M cặp/N HTML/Np tag/Np đóng/V và/Cc nội_dung/N giữa/N 2/M tag/Np này/P ./CH\nRegex/Np :/CH lt;(a-zA-Za-zA-Z0-9)(()/Np gt;)gt;(/Np ./CH )lt;/Np INPUT/Np :/CH lt;font/Np size=\"2\"gt;Topcoder/Np is/Np thelt;/Np lt;bgt;bestlt;/Np Tìm_thấy/Np \"lt;font/Np size=\"2\"gt;Topcoder/Np is/Np thelt;/Np bắt_đầu/V ở/E vị_trí/N 0/M và/Cc kết_thúc/V ở/E vị_trí/N 37/M ./CH\nTìm_thấy/Np \"lt;bgt;bestlt;/Np bắt_đầu/V ở/E vị_trí/N 38/M và/Cc kết_thúc/V ở/E vị_trí/N 49/M ./CH\nGiải_thích/V :/CH (a-zA-Za-zA-Z0-9\\)/Np sẽ/R khớp/N với/E bất_kỳ/A từ/E nào/P bắt_đầu/V bởi/E một/M chữ_cái/Np và/Cc tiếp_tục/V bởi/E một_số/L lượng/N chữ_cái/Np hoặc/Cc chữ_số/Np bất_kỳ/A ./CH\n(()/Np gt;\\)/Np sẽ/R khớp/N với/E xâu/Np rỗng/A hoặc/Cc bất_kỳ/A xâu/Np nào/P không/R chứa/V gt;/Np ./CH\n\\1/Np khớp/N với/E xâu/Np nào/P mà/C (a-zA-Za-zA-Z0-9\\)/Np đã/R khớp/N trước/E đó/P ./CH\nMô_tả/V trên/E là/V mô_tả/V sơ_qua/Np về/E regex/Np cơ_bản/A ./CH\nMột/M regex/Np được/V viết/V bởi/E các/L luật/N trên/E sẽ/R chạy/V được/V ở/E Java/Np (gt;=/Np 1/M ./CH 4)/Np và/Cc C++/Np (POSIX/Np EXTENDED)/Np ./CH\nĐể/E tìm_hiểu/V sâu/A hơn/A về/E các/L mở_rộng/V được/V cung_cấp/V bởi/E các/L ngôn_ngữ/N khác/A mời/V các/L bạn/N xem/V phần/N tham_khảo/V ./CH\nSử_dụng/V regex/Np Debug/Np regex/Np Trong/E các/L ngôn_ngữ_lập_trình/Np khác_nhau/Np ,/CH thường/R regex/Np có_thể/R khác_nhau/Np đôi_chút/L ./CH\nĐể/E kiểm_tra/V 1/M đoạn/Nc regex/Np trong/E 1/M ngôn_ngữ/N có_ý/Np nghĩa/N gì/P ,/CH các/L bạn/N có_thể/R lên/V search/Np \"debug/Np regex/Np online\"/Np ,/CH có/V khá/R nhiều/A trang/N phù_hợp/V ./CH\nTrong_Java_Trong_Java/Np (từ/Np 1/M ./CH 4/M trở/V lên)/Np có_một/Np package/Np tên/N là/V java/Np ./CH util/Np ./CH regex/Np cho_phép/V sử_dụng/V regex/Np ./CH\nPackage/Np này/P bao_gồm/V 3/M class/Np :/CH Pattern/Np ,/CH Matcher/Np ,/CH PatternSyntaxException/Np ./CH\nObject_Pattern/Np là/V một/M regex/Np đã/R được/V biên_dịch/Np ./CH\nClass_Pattern/Np không/R cung_cấp/V public/Np constructors/Np ./CH\nĐể/E tạo/V ra/V một/M object/Np ,/CH bạn/N phải/V sử_dụng/V một/M trong/E các/L method/Np của/E nó/P và/Cc chúng/P sẽ/R trả/V về/E một/M object/Np Pattern/Np ./CH\nObject_Matcher/Np sẽ/R tiến_hành/V thông_dịch/N mẫu/N và/Cc khớp/N với/E input/Np ./CH\nGiống_như/Np class/Np Pattern/Np ,/CH Matcher/Np không/R có/V public/Np constructors/Np ./CH\nĐể/E tạo/V ra/V một/M object/Np Matcher/Np bạn/N phải/V sử_dụng/V method/Np của/E class/Np Matcher/Np trên/E một/M object/Np Pattern/Np và/Cc nó/P sẽ/R trả/V về/E một/M object/Np Matcher/Np ./CH\nObject_PatternSyntaxException/Np là/V unchecked/Np exception/Np chỉ/R ra/V lỗi/N cú_pháp/Np của/E regex/Np ./CH\nVí_dụ/C (lấy/Np từ/E 4)/Np :/CH Pattern/Np pattern/Np ;/CH Matcher/Np matcher/Np ;/CH pattern/Np =/CH Pattern/Np ./CH\ncompile/Np (lt;/Np REGEX/Np gt;);/Np matcher/Np =/CH pattern/Np ./CH\nmatcher/Np (lt;/Np INPUT/Np gt;);/Np boolean/Np found/Np ;/CH while/Np (/CH matcher/Np ./CH\nfind/Np ())/Np System/Np ./CH\nout/Np ./CH\nprintln/Np (/CH \"Found/Np the/B text/Np \\\"\"/Np +/CH matcher/Np ./CH\ngroup/Np ()/Np +/CH \"\\\"/Np starting/Np at/Np index/Np \"/CH +/CH matcher/Np ./CH\nstart/Np ()/Np +/CH \"/CH and/Np ending/Np at/Np index/Np \"/CH +/CH matcher/Np ./CH\nend/Np ()/Np +/CH \"/CH ./CH \"/CH );/CH found/Np =/CH true/Np ;/CH if/Np (/CH !/CH found/Np )/CH System/Np ./CH\nout/Np ./CH\nprintln/Np (/CH \"No/Np match/Np found/Np ./CH \"/CH );/CH Java/Np cũng/R cung_cấp/V các/L method/Np sau/E trong/E class/Np String/Np :/CH boolean/Np matches(String/Np regex)/Np :/CH kiểm_tra/V xem/V xâu/Np hiện_tại/N có/V khớp/N với/E regex/Np không/R ./CH\nString/Np replaceAll(String/Np regex/Np ,/CH String/Np replacement)/Np :/CH Thay/V tất_cả/P các/L xâu/Np con/Nc của/E xâu/Np hiện_tại/N mà/C khớp/N với/E regex/Np bằng/E xâu/Np replacement/Np ./CH\nString/Np replaceFirst(String/Np regex/Np ,/CH String/Np replacement)/Np :/CH Thay/V xâu/Np con_đầu/Np tiên/N của/E xâu/Np hiện_tại/N mà/C khớp/N với/E regex/Np bằng/E xâu/Np replacement/Np ./CH\nString/Np split(String/Np regex)/Np :/CH Chia/V xâu/Np hiện_tại/N thành/V nhiều/A xâu/Np sử_dụng/V các/L xâu/Np con/Nc khớp/N với/E regex/Np làm/V phân_cách/V ./CH\nTrong_C++_Nhiều/Np topcoders/Np cho_rằng/Np regex/Np là/V một/M trong/E những/L điểm/N mạnh_của/Np Java/Np so_với/Np C++/Np ./CH\nTuy_nhiên/C các/L coders/Np sử_dụng/V C++/Np cũng/R không_hề/Np nản_chí/Np vì/E regex/Np cũng/R có_thể/R được/V sử_dụng/V trong/E C++/Np ./CH\nCó/V nhiều/A thư_viện/N hỗ_trợ/V regex/Np cho/E C++/Np ,/CH tuy_nhiên/C chúng/P không/R tương_thích/Np với_nhau/Np tốt/A cho_lắm/Np ./CH\nMột/M điều/N may_mắn/A đó/P là/V bạn/N có_thể/R chọn_lựa/V một/M trong/E các/L thư_viện/N này/P để/E sử_dụng/V và/Cc không_phải/Np lo/V là/V nó/P không/R tương_thích/Np với_nhau/Np ./CH\nNếu/C bạn/N muốn/V dùng/V regex/Np ở/E arena/Np bạn/N phải/V lựa_chọn/V giữa/N 2/M APIs/Np :/CH POSIX_regex/Np và/Cc GNU_regex/Np ./CH\nĐể/E sử_dụng/V 2/M APIs/Np này/P bạn/N phải/V thêm/V header/Np \"regex/Np ./CH h\"/Np ./CH\nCả/P 2/M APIs/Np đều/R được/V thực_hiện/V qua/V 2/M bước/V ./CH\nĐầu_tiên/A sẽ/R có_một/Np hàm/Np biên_dịch/Np regex/Np ,/CH sau_đó/Np sẽ/R có_một/Np hàm/Np khớp/N regex/Np đã/R được/V biên_dịch/Np với/E xâu/Np cần/V khớp/N ./CH\nSau_đây/Np sẽ/R là/V mô_tả/V ngắn_gọn/A về/E 2/M APIs/Np này/P để_cho/Np các/L bạn/N có_thể/R chọn_lựa/V bạn/N thích/V cái/Nc nào/P hơn/A ./CH\nPOSIX_regex/Np POSIX_regex/Np hỗ_trợ/V 2/M kiểu/N regex/Np khác_nhau/Np :/CH cơ_bản/A và/Cc mở_rộng/V ./CH\nRegex/Np cơ_bản/A tương_tự/A như/C trong/E ed/Np ,/CH trong_khi/Np regex/Np mở_rộng/V tương_tự/A như/C trong/E egrep/Np ,/CH thêm/V vào/E các/L phép_toán/Np ,/CH +/CH ,/CH ?/CH\nvà/Cc không/R yêu_cầu/V \\/Np ở/E các/L biểu_thức/Np con/Nc viết/V trong/E ngoặc_đơn/Np ()/Np hoặc/Cc các/L biên/N được/V viết/V trong/E ngoặc/Np nhọn/Np ./CH\nKiểu/N cơ_bản/A là/V mặc_định/Np ,/CH nhưng/C kiểu/N mở_rộng/V được/V ưa_thích/V hơn/A ./CH\nVới_POSIX/Np ,/CH bạn/N chỉ_có/Np thể/N tìm_kiếm/V regex/Np mà/C không_thể/R khớp/N được/V ./CH\nĐể/E khớp/N được/V ,/CH bạn/N phải/V biên_dịch/Np nó/P thành/V một/M pattern/Np buffer/Np ,/CH sử_dụng/V regcomp/Np ./CH\nMột_khi/X đã/R biên_dịch/Np thành/V pattern/Np buffer/Np bạn/N có_thể/R tìm_kiếm/V trong/E một/M xâu/Np kết_thúc/V bằng/E null/Np bằng/E cách/N dùng/V regexec/Np ./CH\nNếu/C một/M trong/E hai/M hàm/Np regcomp/Np và/Cc regexec/Np gặp/V lỗi/N nó/P sẽ/R trả/V về/E error/Np code/Np ./CH\nĐể/E biết/V được/V lỗi/N là/V gì/P bạn/N dùng/V regerror/Np ./CH\nĐể/E giải_phóng/V bộ_nhớ/Np của/E pattern/Np buffer/Np bạn/N dùng/V regfree/Np ./CH\nĐể/E biết/V cách/N sử_dụng/V chi_tiết/N mời/V các/L bạn/N xem/V mục/N 2/M và/Cc 3/M ở/E phần/N tham_khảo/V ./CH\nVí_dụ/C Sau_đây/Np là/V một/M ví_dụ/C về/E cách/N sử_dụng/V các/L hàm/Np này/P :/CH regex_t/Np reg/Np ;/CH string/Np pattern/Np =/CH \"tpr2/Np ,/CH \"/CH ;/CH string/Np str/Np =/CH \"topcoder\"/Np ;/CH regmatch_t/Np matches/Np 1/M ;/CH regcomp/Np (/CH amp;/Np reg/Np ,/CH pattern/Np ./CH\nc_str/Np ()/Np ,/CH REG_EXTENDED/Np REG_ICASE/Np );/CH if/Np (/CH regexec/Np (/CH amp;/Np reg/Np ,/CH str/Np ./CH\nc_str/Np ()/Np ,/CH 1/M ,/CH matches/Np ,/CH 0/M )/CH ==/Np 0/M )/CH cout/Np lt;lt;/Np \"Match/Np \"/CH cout/Np lt;lt;/Np str/Np ./CH\nsubstr/Np (/CH matches/Np 0/M ./CH\nrm_so/Np ,/CH matches/Np 0/M ./CH\nrm_eo/Np -/CH matches/Np 0/M ./CH\nrm_so/Np )/CH cout/Np lt;lt;/Np \"/CH found/Np starting/Np at/Np :/CH \"/CH cout/Np lt;lt;/Np matches/Np 0/M ./CH\nrm_so/Np cout/Np lt;lt;/Np \"/CH and/Np ending/Np at/Np \"/CH cout/Np lt;lt;/Np matches/Np 0/M ./CH\nrm_eo/Np cout/Np lt;lt;/Np endl/Np ;/CH else/Np cout/Np lt;lt;/Np \"Match/Np not/Np found/Np ./CH \"/CH cout/Np lt;lt;/Np endl/Np ;/CH regfree/Np (/CH amp;/Np reg/Np );/CH GNU_regex/Np GNU_regex/Np API/Np có/V nhiều/A hàm/Np hơn/A ./CH\nVới/E các/L hàm/Np của/E GNU_regex/Np các/L bạn/N có_thể/R khớp/N một/M xâu/Np với/E mẫu/N và/Cc cũng/R có_thể/R tìm_kiếm/V mẫu/N ở/E trong/E xâu/Np ./CH\nViệc/N sử_dụng/V các/L hàm/Np này/P cũng/R tương_tự/A như/C việc/N sử_dụng/V các/L hàm/Np của/E POSIX/Np :/CH đầu_tiên/A một/M mẫu/N cần/V phải/V được/V biên_dịch/Np sử_dụng/V re_compile_pattern/Np ,/CH sau_đó/Np nhận/V được/V pattern/Np buffer/Np và/Cc nó/P được/V dùng/V để/E tìm/V và/Cc khớp/N ./CH\nCác/L hàm/Np sử_dụng/V cho/E tìm_kiếm/V và/Cc khớp/N là/V re_search/Np và/Cc re_match/Np ./CH\nTrong/E trường_hợp/N tìm_kiếm/V thì/C fastmap/Np có_thể/R được/V sử_dụng/V để/E tối_ưu/A việc/N tìm_kiếm/V ./CH\nNếu_không/Np có/V fastmap/Np thuật_toán/N tìm_kiếm/V sẽ/R khớp/N các/L mẫu/N ở/E các_vị/Np trí/Np liên_tiếp/A nhau/N trong/E xâu/Np ./CH\nFastmap/Np sẽ/R chỉ/R ra/V vị_trí/N của/E ký_tự/Np bắt_đầu/V tìm_kiếm/V ./CH\nFastmap/Np được/V tạo/V bằng/E cách/N gọi/V re_compile_fastmap/Np ./CH\nGNU_regex/Np còn/R có/V hàm/Np re_search2/Np và/Cc re_match2/Np cho/E việc/N tìm_kiếm/V và/Cc khớp/N với/E những/L data/Np tách_rời/Np ./CH\nĐể/E giải_phóng/V bộ_nhớ/Np của/E pattern/Np buffer/Np bạn/N dùng/V regfree/Np ./CH\nĐể/E biết/V cách/N sử_dụng/V chi_tiết/N mời/V các/L bạn/N xem/V mục/N 3/M ở/E phần/N tham_khảo/V ./CH\nVí_dụ/C string/Np pattern/Np =/CH \"(a-z+)/Np ./CH\n\\\\/Np 1\"/Np ;/CH string/Np str/Np =/CH \"top-topcodercoder\"/Np ;/CH re_pattern_buffer/Np buffer/Np ;/CH char/Np map/Np 256/Np ;/CH buffer/Np ./CH\ntranslate/Np =/CH 0/M ;/CH buffer/Np ./CH\nfastmap/Np =/CH map/Np ;/CH buffer/Np ./CH\nbuffer/Np =/CH 0/M ;/CH buffer/Np ./CH\nallocated/Np =/CH 0/M ;/CH re_set_syntax/Np (/CH RE_SYNTAX_POSIX_EXTENDED/Np );/CH const/Np char/Np status/Np =/CH re_compile_pattern/Np (/CH pattern/Np ./CH\nc_str/Np ()/Np ,/CH pattern/Np ./CH\nsize/Nb ()/Np ,/CH amp;/Np buffer/Np );/CH if/Np (/CH status/Np )/CH cout/Np lt;lt;/Np \"Error/Np :/CH \"/CH lt;lt;/Np status/Np lt;lt;/Np endl/Np ;/CH re_compile_fastmap/Np (/CH amp;/Np buffer/Np );/CH struct/Np re_registers/Np regs/Np ;/CH int/Np ofs/Np =/CH 0/M ;/CH if/Np (/CH re_search/Np (/CH amp;/Np buffer/Np ,/CH str/Np ./CH\nc_str/Np ()/Np ,/CH str/Np ./CH\nsize/Nb ()/Np ,/CH 0/M ,/CH str/Np ./CH\nsize/Nb ()/Np ,/CH amp;/Np regs/Np )/CH !/CH =-/Np 1/M )/CH cout/Np lt;lt;/Np \"Match/Np \"/CH cout/Np lt;lt;/Np str/Np ./CH\nsubstr/Np (/CH regs/Np ./CH\nstart/Np 0/M ,/CH regs/Np ./CH\nend/Np 0/M -/CH regs/Np ./CH\nstart/Np 0/M )/CH cout/Np lt;lt;/Np \"/CH found/Np starting/Np at/Np :/CH \"/CH cout/Np lt;lt;/Np regs/Np ./CH\nstart/Np 0/M cout/Np lt;lt;/Np \"/CH and/Np ending/Np at/Np \"/CH cout/Np lt;lt;/Np regs/Np ./CH\nend/Np 0/M cout/Np lt;lt;/Np endl/Np ;/CH else/Np cout/Np lt;lt;/Np \"Match/Np not/Np found/Np ./CH \"/CH cout/Np lt;lt;/Np endl/Np ;/CH regfree/Np (/CH amp;/Np buffer/Np );/CH Ví_dụ/C trong/E các/L cuộc_thi/Np SRMs_Các/Np ví_dụ/C phía/N dưới/E được/V viết_bằng/Np Java/Np ./CH\nBạn/N nào/P dùng/V C++/Np có_thể/R dùng/V POSIX/Np hoặc/Cc GNU_regex/Np APIs/Np để/E viết/V các/L hàm/Np tương_đương/A trong/E Java/Np (replace_all/Np ,/CH split/Np ,/CH matches)/Np ./CH\nCyberLine/Np (SRM/Np 187/M div/Np 1/M ,/CH level/Np 1)/Np import/Np java/Np ./CH util/Np ./CH\n;/CH public/Np class/Np Cyberline/Np public/Np String/Np lastCyberword/Np (/CH String/Np cyberline/Np )/CH String/Np w/Nu =/CH cyberline/Np ./CH\nreplaceAll/Np (/CH \"-\"/Np ,/CH \"\"/Np )/CH ./CH\nreplaceAll/Np (/CH \"a-zA-Z0-9\"/Np ,/CH \"/CH \"/CH )/CH ./CH\nsplit/Np (/CH \"/CH \"/CH )/CH ;/CH return/Np w/Nu w/Nu ./CH\nlength/Np -/CH 1/M ;/CH UnLinker/Np (SRM/Np 203/Np div/Np 2/M ,/CH level/Np 3)/Np import/Np java/Np ./CH util/Np ./CH\n;/CH public/Np class/Np UnLinker/Np public/Np String/Np clean/Np (/CH String/Np text/Np )/CH String/Np m/Nu =/CH text/Np ./CH\nsplit/Np (/CH \"((http/Np :/CH //CH ?/CH www/Np ./CH http/Np :/CH //CH ./CH +/CH ./CH (comorgeduinfotv)\"/Np ,/CH -/CH 1/M );/CH String/Np s/Y =/CH m/Nu 0/M ;/CH for/Np (/CH int/Np i/M =/CH 1/M ;/CH i/M lt;/Np m/Nu ./CH\nlength/Np ;/CH ++/Np i/M )/CH s/Y =/CH s/Y +/CH \"OMIT\"/Np +/CH i/M +/CH m/Nu i/M ;/CH return/Np s/Y ;/CH CheatCode/Np (SRM/Np 154/M div/Np 1/M ,/CH level/Np 1)/Np import/Np java/Np ./CH util/Np ./CH\n;/CH public/Np class/Np CheatCode/Np public/Np int/Np matches/Np (/CH String/Np keyPresses/Np ,/CH String/Np codes/Np )/CH boolean/Np map/Np =/CH new/Np boolean/Np codes/Np ./CH\nlength/Np ;/CH int/Np count/Np =/CH 0/M ;/CH for/Np (/CH int/Np i/M =/CH 0/M ;/CH i/M lt;/Np codes/Np ./CH\nlength/Np ;/CH ++/Np i/M )/CH String/Np regex/Np =/CH \"/CH ./CH \"/CH ;/CH for/Np (/CH int/Np j/Np =/CH 0/M ;/CH j/Np lt;/Np codes/Np i/M ./CH\nlength/Np ();/Np )/CH int/Np k/N =/CH 1/M ;/CH while/Np ((/Np j/Np +/CH k/N )lt;/Np codes/Np i/M ./CH\nlength/Np ()/Np amp;amp;/Np codes/Np i/M ./CH\ncharAt/Np (/CH j/Np +/CH k/N )==/Np codes/Np i/M ./CH\ncharAt/Np (/CH j/Np ))/Np k/N ++;/Np regex/Np =/CH regex/Np +/CH codes/Np i/M ./CH\ncharAt/Np (/CH j/Np )/CH +/CH \"\"/Np +/CH k/N +/CH \"/CH ,/CH \"/CH ;/CH j/Np +=/Np k/N ;/CH regex/Np =/CH regex/Np +/CH \"/CH ./CH \"/CH ;/CH if/Np (/CH keyPresses/Np ./CH\nmatches/Np (/CH regex/Np ))/Np map/Np i/M =/CH true/Np ;/CH count/Np ++/Np ;/CH int/Np res/Np =/CH new/Np int/Np count/Np ;/CH int/Np j/Np =/CH 0/M ;/CH for/Np (/CH int/Np i/M =/CH 0/M ;/CH i/M lt;/Np codes/Np ./CH\nlength/Np ;/CH ++/Np i/M )/CH if/Np (/CH map/Np i/M ==/Np true/Np )/CH res/Np j/Np ++=/Np i/M ;/CH return/Np res/Np ;/CH Tham_khảo/V Xem/V trang/N hướng_dẫn/V của/E linux/Np :/CH regex(7)/Np Xem/V trang/N hướng_dẫn/V của/E linux/Np :/CH regex(3)/Np http/Np :/CH //CH ./CH freebsd/Np ./CH org/info/regex/Np ./CH info/Np ./CH Programming_with_Regex/Np ./CH html/Np http/Np :/CH //CH ./CH regular-expressions/Np ./CH info/Np http/Np :/CH //CH ./CH sun/Np ./CH com/docs/books/tutorial/extra/regex/Np\n", "title": "Sử dụng Regex\n", "link": "http://vnoi.info/wiki/translate/topcoder/Using-Regular-Expression\n"}