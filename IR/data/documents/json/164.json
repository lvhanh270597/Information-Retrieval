{"content": "Tác_giả : Khúc Anh_Tuấn Đôi lời về tác_giả : Khúc Anh_Tuấn được coi là huyền_thoại của Competitive_Programming Việt_Nam với nhiều thành_tích khủng : HCB_IOI 2006 Người Việt_Nam duy_nhất từng đạt được Đỏ_Target trên Topcoder (max rating là hơn 3000 , chỉ_có khoảng chưa đến 100 người trên thế_giới đạt được) .\nRank 2 Facebook_Hackercup_Người Việt_Nam duy_nhất từng lọt vào chung_kết Google_Code_Jam .\nGiữ kỷ_lục thi_ACM ICPC_World final của Việt_Nam tính đến_thời điểm 2011 (rank 17 toàn cầu) .\nBài viết này được đưa lên thư_viện VNOI cũ và được mình khôi_phục lại sau nhiều năm thất_truyền .\nTrước_khi đọc_bài viết này , bạn cần đọc_bài viết : Bài_toán RMQ và bài_toán LCA để nắm được những khái_niệm cơ_bản .\nĐể giải bài_toán LCA ta có_thể chuyển sang bài_toán RMQ tương_ứng và có_thể giải bằng một_số cách khác_nhau .\nTrong bài viết này chúng_ta sẽ đề_cập tới một_số phương_pháp giải bài_toán LCA một_cách trực_tiếp .\nBài_toán LCA (Least Common_Ancestor) : Input : 1 cây với n đỉnh .\nTruy_vấn : với 2 nút u , v bất_kỳ của cây T , truy_vấn LCA(u , v) cho_biết cha chung gần nhất của 2 đỉnh u , v trong cây T , tức_là cho_biết đỉnh xa gốc nhất_là cha của cả u và v .\nCách 1 - Sparse_Table_Từ cây đầu_vào ta có_thể xây_dựng được mảng F1 . . n với Fi cho ta biết nút cha của nút i .\nSau_đó ta có_thể xây_dựng mảng A1 . . n0 . . logN với Aij cho ta biết nút tổ_tiên thứ 2j của nút i .\nXây_dựng mảng A mất O(Nlog(N)) sử_dụng phương_pháp QHĐ .\nGọi d(i) là khoảng_cách tới gốc của nút i .\nĐể xác_định LCA(u , v) ta thực_hiện các bước sau : Giả_sử d(u) gt; d(v) , ta thay u bằng một nút tổ_tiên của u đến khi d(u)=d(v) .\nKhi d(u)=d(v) ta thay u và v bằng 2 nút tổ_tiên tương_ứng sao_cho vẫn thỏa_mãn d(u)=d(v) đến khi u=v .\nKhi đó ta có được kết_quả cần tìm .\nTất_nhiên trong quá_trình thay một nút bằng nút tổ_tiên của nó , ta sẽ sử_dụng mảng A để có_thể nhảy một_lần được nhiều bước .\nKhi đó độ phức_tạp của thuật_toán sẽ là lt; O(Nlog(N)) , O(log(N)) gt; .\nCách 2 - Euler_Tour + Interval_Tree_Từ cây đầu_vào ta sử_dụng thủ_tục DFS để xây_dựng 2 mảng : prevnum1 . . n với prevnumi cho ta biết thứ_tự gọi thủ_tục DFS cho đỉnh i .\npostnum1 . . n với postnumi cho ta biết thứ_tự thoát_khỏi thủ_tục DFS cho đỉnh i .\nTừ 2 mảng prevnum và postnum ta có_thể thấy điều_kiện_cần và đủ để u là cha của v là prevnumu \\le prevnumv và postnumu \\ge postnumv .\nDo_đó thao_tác chất_vấn LCA(u , v) thực_chất là tìm một đỉnh i sao_cho : prevnumi \\le min(prevnumu , prevnumv) postnumi \\ge max(postnumu , postnumv) prevnumi lớn nhất có_thể (hoặc postnumi nhỏ nhất có_thể ) .\n2 điều_kiện đầu đảm_bảo i sẽ là cha chung của u và v , điều_kiện thứ 3 đảm_bảo i sẽ là đỉnh xa gốc nhất , tức i = LCA(u , v) .\nXây_dựng mảng A1 . . n với Ai cho ta biết postnumk với k là đỉnh sao_cho prevnumk=i .\nTa hoàn_toàn có_thể xây_dựng mảng A trong thời_gian O(N) .\nNhư_vậy ta cần tìm trong mảng con A1 . . min(prevnumu , prevnumv) phần_tử cuối_cùng sao_cho giá_trị của nó không nhỏ hơn max(postnumu , postnumv) .\nTa có_thể sử_dụng cấu_trúc dữ_liệu Interval_Tree để làm_việc này , mỗi nút của cây Interval sẽ lưu giá_trị lớn nhất của một đoạn và khi thực_hiện thủ_tục DFS trên cây Interval_ta ưu_tiên đi sang cây_con bên phải .\nKhi biết được_giá trị postnum (và cả prevnum) của đỉnh cần tìm rồi ta sẽ dễ_dàng biết được đỉnh đó .\nĐộ phức_tạp của thuật_toán này cũng giống_như thuật_toán 1 với thời_gian là như chỉ mất O(N) bộ_nhớ .\nCách 3 Cũng tương_tự cách 2 ta khởi tạo các mảng prevnum1 . . n và postnum1 . . n .\nMảng_A1 . . n với Ai cho ta biết đỉnh k sao_cho prevnumk = i .\nNhư_vậy ta cần tìm LCA(u , v) trong mảng con A1 . . min(prevnumu , prevnumv) .\nTa có_thể sử_dụng phương_pháp chặt nhị_phân kết_hợp đệ_quy để làm cận (khá tốt) như_sau : Xét thủ_tục Find_LCA(left , right , u , v : Integer) tìm cha chung gần nhất của u , v trong mảng con Aleft . . right .\nKhông mất tính tổng_quát giả_sử prevnumult;prevnumv .\nNếu postnumugt;postnumv thì LCA(u , v)=u và đây là trường_hợp dễ_dàng tìm_ra đáp_án .\nNếu postnumult;postnumv , gọi mid = (left+right)/2 .\nXét phần_tử chính giữa đoạn i = Amid sẽ có các khả_năng sau : postnumigt;postnumv : i sẽ là cha chung của u và v nhưng chưa chắc đã_là LCA(u , v) .\nHiển_nhiên prevnumi \\le prevnumLCA(u , v) nên ta gọi đệ_quy : Find_LCA( mid , right , u , v) .\npostnumvgt;postnumigt;postnumu : i là cha của u nhưng không_phải là cha của v .\nVì_vậy LCA(u , v) = LCA(i , v) , ta gọi đệ_quy : Find_LCA( left , mid , i , v) .\npostnumilt;postnumu : đỉnh i là đỉnh được rẽ nhánh ra từ một nút cha nào_đó của u , nhưng ta hoàn_toàn chưa biết nút cha này nằm dưới hay trên LCA(u , v) .\nTa có_thể xử_lý theo 2 cách : gọi đệ_quy Find_LCA(left , right , cha(u) , cha(v)) hoặc lấy j = Find_LCA(left , mid , i , u) và j sẽ rơi vào 2 trường_hợp đầu .\nThuật_toán trên nếu chỉ_thực hiện 2 trường_hợp đầu thì độ phức_tạp cho mỗi lần chất_vấn là LogN , còn nếu chỉ_thực hiện_trường hợp 3 thì độ phức_tạp sẽ là N .\nQua khảo_sát bằng việc chạy chương_trình cho thấy thời_gian_thực hiện trung_bình của thuật_toán này ngang với các thuật_toán với độ phức_tạp .\nThuật_toán này tuy có độ phức_tạp lớn nhưng lại là phương_pháp tiết_kiệm bộ_nhớ và cài_đặt dễ_dàng nên đây là thuật_toán có ứng_dụng cao trong làm_bài .\nCách 4 - Heavy_Light_Decomposition Sử_dụng Heavy_Light_Decomposition .\nXuất_phát từ_trường hợp suy_biến của cây : mỗi nút của cây chỉ_có đúng 1 con (trừ 1 nút lá không có con) .\nVới một cây suy_biến ta hoàn_toàn có_thể tìm LCA(u , v) trong thời_gian O(1) (đỉnh nào gần gốc hơn trong 2 đỉnh u , v sẽ là LCA(u , v)) .\nTư_tưởng của Heavy_Light_Decomposition sẽ là chia cây ban_đầu ra thành nhiều cây suy_biến .\nNhững đoạn cùng màu là một cây suy_biến .\nNếu coi mỗi cây suy_biến là một đỉnh thì ta sẽ được một cây mới gọi_là cây rút_gọn .\nSau_đây là một_cách chia cây để cây rút_gọn thu được có độ_cao O(LogN) với N là số nút của cây ban_đầu : Xuất_phát từ đỉnh gốc Với mỗi đỉnh nếu là lá thì nó sẽ là kết_thúc của một cây suy_biến Nếu_không ta sẽ phát_triển tiếp_cây suy_biến này xuống đỉnh con có trọng_lượng lớn nhất , các đỉnh con khác sẽ là nút gốc của những cây suy_biến mới .\nTrọng_lượng của một nút được định_nghĩa_là số nút nhận nút đó là tổ_tiên (hiểu một_cách trực_quan thì nếu coi mỗi nút có_một “sức nặng” thì trọng_lượng của một nút chính là “sức nặng” mà nút đó phải gánh) .\nChứng_minh : Gọi_F(n) là hàm cho ta chiều_cao tối_đa của một cây rút_gọn có n đỉnh .\nTa sẽ chứng_minh F(n) \\le log(N)+1 .\nVới n=1 thì F(1) = log(1)+1 .\nGiả_sử điều cần chứng_minh đã đúng đến n-1 .\nVới một cây có N đỉnh và nút gốc sẽ có các cây_con với số đỉnh là x_1 , . . . , x_k .\nGiả_sử x_1 = max(x1 . . xk) .\nTa có 2max(x_2 . . x_k) \\le max(x_2 . . x_k) + x_1 \\le N \\rightarrow max(x2…xk) \\le N/2 .\nTheo cách xây_dựng cây thì : F(N) = max( F(x_1) , F(x_2)+1 , F(x_3)+1 , . . , F(x_k)+1 ) Mà : - F(x_1) \\le F(N-1) \\le LogN+1 - F(x_2) +1 \\le F(N/2)+1 \\le LogN+1 - . . .\n- F(x_k) +1 \\le F(N/2)+1 \\le LogN+1_Vậy_F(N) \\le LogN+1 (Điều phải chứng minh) .\nĐể thực_hiện chất_vấn LCA(u , v) ta lần_lượt nhảy từ u và v trở_về gốc của cây .\nTừ một đỉnh ta thực_hiện lần_lượt một_bước nhảy_dài tới gốc của cây suy_biến chứa nó và một_bước nhảy ngắn tới nút cha (qua đó chuyển sang cây suy_biến mới) .\nSau khi xác_định được cây suy_biến chứa LCA(u , v) , ta có_thể xác_định được đỉnh u_1 , v_1 tương_ứng là nút đầu_tiên_ta gặp khi nhảy từ u , v tới cây suy_biến chứa LCA(u , v) .\nSau_đó chỉ_cần sử_dụng một_phép so_sánh xem u_1 hay v_1 gần gốc hơn_là có_thể xác_định được LCA(u , v) .\nTuy về ý_tưởng ta quan_tâm nhiều đến việc chia cây ban_đầu ra thành nhiều cây suy_biến nhưng về_mặt cài_đặt , ta chỉ_cần quan_tâm với mỗi nút của cây đầu_vào , nút gốc của cây suy_biến chứa nó là nút nào .\nDễ thấy khi thực_hiện thủ_tục DFS (có ưu_tiên gọi đệ_quy tới nút con có trọng_lượng lớn nhất trước) các nút sẽ được liệt_kê lần_lượt theo từng cây suy_biến .\nVì_vậy ta có_thể khởi tạo mảng Head1 . . n với Headi cho ta biết nút gốc của cây suy_biến chứa nút i chỉ với O(N) .\nThuật_toán này sẽ chạy trong thời_gian .\nThuật_toán này khá linh_hoạt và có_thể mở_rộng ra để ứng_dụng vào nhiều bài_toán khác trên cây .\nĐể_ý rằng nếu cây ban_đầu có trọng số ở mỗi cạnh , sau khi chia thành các cây suy_biến thì cạnh của mỗi cây suy_biến sẽ giống_như các phần_tử liên_tiếp của một mảng .\nDo_đó ta hoàn_toàn có_thể sử_dụng các cấu_trúc dữ_liệu như Interval_Tree để quản_lý việc thay_đổi hay chất_vấn thông_tin về các cạnh này .\nĐây chính là ý_tưởng để làm_bài QTREE .\nCách 5 - Xử_lý offline Đây là một phương_pháp để giải bài_toán LCA khi đã biết trước mọi câu_hỏi chất_vấn .\nCách làm này tuy không linh_hoạt nhưng thời_gian chạy khá nhanh và tiết_kiệm bộ_nhớ .\nTư_tưởng của phương_pháp này là trả_lời các câu chất_vấn theo một thứ_tự khác dễ_dàng hơn .\nVới mỗi nút của cây_ta sẽ lưu nó trong một_tập hợp có nhãn .\nBan_đầu mỗi nút thuộc một_tập hợp khác_nhau và nhãn của tập_hợp chính là chỉ_số của nút đó .\nSau_đó ta thực_hiện thủ_tục DFS , trước_khi thoát ra khỏi thủ_tục DFS ta thực_hiện 2 thao_tác sau : Tìm cha chung của u với các đỉnh v mà thủ_tục DFS(v) đã được thực_thi .\nĐỉnh cha chung chính là nhãn của tập_hợp chứa v .\nHợp_nhất tập_hợp chứa u với tập_hợp chứa cha(u) và lấy nhãn là cha(u) .\nTa sẽ chứng_minh “Đỉnh cha chung chính là nhãn của tập_hợp chứa v” .\nGiả_sử i=LCA(u , v) .\nSau khi thực_thi thủ_tục DFS(v) xong , từ v thủ_tục DFS phải đi_về i và rẽ xuống u để có_thể thực_hiện DFS(u) .\nTrong quá_trình đi_về i , nó sẽ hợp_nhất v với cha v , ông v , . .\nrồi với i .\nDo_đó nhãn của tập chứa v chính là i .\nĐể thực_hiện thao_tác hợp_nhất 2 tập_hợp với thời_gian ngắn , ta có_thể sử_dụng cấu_trúc disjoint set giống_như trong thuật_toán Kruskal .\nĐộ phức_tạp của phương_pháp này là (M+N)log(N) với M là số thao_tác .\nCác bài_tập áp_dụng : VOJ - LUBENICA_SPOJ - LCA_SPOJ - QTREE_VOJ - QTREE3_VOJ - VOTREE\n", "tagged": "Tác_giả/N :/CH Khúc/N Anh_Tuấn/Np Đôi/M lời/N về/E tác_giả/N :/CH Khúc/N Anh_Tuấn/Np được/V coi/V là/V huyền_thoại/N của/E Competitive_Programming/Np Việt_Nam/N với/E nhiều/A thành_tích/N khủng/A :/CH HCB_IOI/Np 2006/M Người/N Việt_Nam/N duy_nhất/A từng/R đạt/V được/V Đỏ_Target/Np trên/E Topcoder/Np (max/Np rating/Np là/V hơn/A 3000/M ,/CH chỉ_có/Np khoảng/N chưa/R đến/E 100/M người/N trên/E thế_giới/N đạt/V được)/Np ./CH\nRank/Np 2/M Facebook_Hackercup_Người/Np Việt_Nam/N duy_nhất/A từng/R lọt/V vào/E chung_kết/N Google_Code_Jam/Np ./CH\nGiữ/V kỷ_lục/N thi_ACM/Np ICPC_World/Np final/Np của/E Việt_Nam/N tính/V đến_thời/Np điểm/N 2011/M (rank/Np 17/M toàn/R cầu)/Np ./CH\nBài/N viết/V này/P được/V đưa/V lên/V thư_viện/N VNOI/Np cũ/A và/Cc được/V mình/P khôi_phục/V lại/R sau/E nhiều/A năm/N thất_truyền/Np ./CH\nTrước_khi/Np đọc_bài/Np viết/V này/P ,/CH bạn/N cần/V đọc_bài/Np viết/V :/CH Bài_toán/N RMQ/Np và/Cc bài_toán/N LCA/Np để/E nắm/V được/V những/L khái_niệm/N cơ_bản/A ./CH\nĐể/E giải/N bài_toán/N LCA/Np ta/P có_thể/R chuyển/V sang/V bài_toán/N RMQ/Np tương_ứng/V và/Cc có_thể/R giải/N bằng/E một_số/L cách/N khác_nhau/Np ./CH\nTrong/E bài/N viết/V này/P chúng_ta/P sẽ/R đề_cập/V tới/E một_số/L phương_pháp/N giải/N bài_toán/N LCA/Np một_cách/N trực_tiếp/A ./CH\nBài_toán/N LCA/Np (Least/Np Common_Ancestor)/Np :/CH Input/Np :/CH 1/M cây/N với/E n/Ny đỉnh/N ./CH\nTruy_vấn/Np :/CH với/E 2/M nút/N u/N ,/CH v/Nu bất_kỳ/A của/E cây/N T/Nu ,/CH truy_vấn/Np LCA(u/Np ,/CH v)/Np cho_biết/V cha/N chung/A gần/A nhất/A của/E 2/M đỉnh/N u/N ,/CH v/Nu trong/E cây/N T/Nu ,/CH tức_là/V cho_biết/V đỉnh/N xa/A gốc/N nhất_là/X cha/N của/E cả/P u/N và/Cc v/Nu ./CH\nCách/N 1/M -/CH Sparse_Table_Từ/Np cây/N đầu_vào/N ta/P có_thể/R xây_dựng/V được/V mảng/N F1/Ny ./CH ./CH n/Ny với/E Fi/Np cho/E ta/P biết/V nút/N cha/N của/E nút/N i/M ./CH\nSau_đó/Np ta/P có_thể/R xây_dựng/V mảng/N A1/Np ./CH ./CH n0/Np ./CH ./CH logN/Np với/E Aij/Np cho/E ta/P biết/V nút/N tổ_tiên/N thứ/N 2j/Np của/E nút/N i/M ./CH\nXây_dựng/V mảng/N A/Ni mất/V O(Nlog(N))/Np sử_dụng/V phương_pháp/N QHĐ/Np ./CH\nGọi/V d(i)/Np là/V khoảng_cách/N tới/E gốc/N của/E nút/N i/M ./CH\nĐể/E xác_định/V LCA(u/Np ,/CH v)/Np ta/P thực_hiện/V các/L bước/V sau/E :/CH Giả_sử/Np d(u)/Np gt;/Np d(v)/Np ,/CH ta/P thay/V u/N bằng/E một/M nút/N tổ_tiên/N của/E u/N đến/E khi/N d(u)=d(v)/Np ./CH\nKhi/N d(u)=d(v)/Np ta/P thay/V u/N và/Cc v/Nu bằng/E 2/M nút/N tổ_tiên/N tương_ứng/V sao_cho/Np vẫn/R thỏa_mãn/V d(u)=d(v)/Np đến/E khi/N u=v/Np ./CH\nKhi/N đó/P ta/P có/V được/V kết_quả/N cần/V tìm/V ./CH\nTất_nhiên/A trong/E quá_trình/N thay/V một/M nút/N bằng/E nút/N tổ_tiên/N của/E nó/P ,/CH ta/P sẽ/R sử_dụng/V mảng/N A/Ni để/E có_thể/R nhảy/V một_lần/Np được/V nhiều/A bước/V ./CH\nKhi/N đó/P độ/N phức_tạp/A của/E thuật_toán/N sẽ/R là/V lt;/Np O(Nlog(N))/Np ,/CH O(log(N))/Np gt;/Np ./CH\nCách/N 2/M -/CH Euler_Tour/Np +/CH Interval_Tree_Từ/Np cây/N đầu_vào/N ta/P sử_dụng/V thủ_tục/N DFS/Np để/E xây_dựng/V 2/M mảng/N :/CH prevnum1/Np ./CH ./CH n/Ny với/E prevnumi/Np cho/E ta/P biết/V thứ_tự/N gọi/V thủ_tục/N DFS/Np cho/E đỉnh/N i/M ./CH\npostnum1/Np ./CH ./CH n/Ny với/E postnumi/Np cho/E ta/P biết/V thứ_tự/N thoát_khỏi/Np thủ_tục/N DFS/Np cho/E đỉnh/N i/M ./CH\nTừ/E 2/M mảng/N prevnum/Np và/Cc postnum/Np ta/P có_thể/R thấy/V điều_kiện_cần/Np và/Cc đủ/A để/E u/N là/V cha/N của/E v/Nu là/V prevnumu/Np \\le/Np prevnumv/Np và/Cc postnumu/Np \\ge/Np postnumv/Np ./CH\nDo_đó/C thao_tác/V chất_vấn/V LCA(u/Np ,/CH v)/Np thực_chất/N là/V tìm/V một/M đỉnh/N i/M sao_cho/Np :/CH prevnumi/Np \\le/Np min(prevnumu/Np ,/CH prevnumv)/Np postnumi/Np \\ge/Np max(postnumu/Np ,/CH postnumv)/Np prevnumi/Np lớn/A nhất/A có_thể/R (hoặc/Np postnumi/Np nhỏ/A nhất/A có_thể/R )/CH ./CH\n2/M điều_kiện/N đầu/N đảm_bảo/V i/M sẽ/R là/V cha/N chung/A của/E u/N và/Cc v/Nu ,/CH điều_kiện/N thứ/N 3/M đảm_bảo/V i/M sẽ/R là/V đỉnh/N xa/A gốc/N nhất/A ,/CH tức/V i/M =/CH LCA(u/Np ,/CH v)/Np ./CH\nXây_dựng/V mảng/N A1/Np ./CH ./CH n/Ny với/E Ai/P cho/E ta/P biết/V postnumk/Np với/E k/N là/V đỉnh/N sao_cho/Np prevnumk=i/Np ./CH\nTa/P hoàn_toàn/A có_thể/R xây_dựng/V mảng/N A/Ni trong/E thời_gian/N O(N)/Np ./CH\nNhư_vậy/X ta/P cần/V tìm/V trong/E mảng/N con/Nc A1/Np ./CH ./CH min(prevnumu/Np ,/CH prevnumv)/Np phần_tử/N cuối_cùng/A sao_cho/Np giá_trị/N của/E nó/P không/R nhỏ/A hơn/A max(postnumu/Np ,/CH postnumv)/Np ./CH\nTa/P có_thể/R sử_dụng/V cấu_trúc/N dữ_liệu/N Interval_Tree/Np để/E làm_việc/V này/P ,/CH mỗi/L nút/N của/E cây/N Interval/Np sẽ/R lưu/V giá_trị/N lớn/A nhất/A của/E một/M đoạn/Nc và/Cc khi/N thực_hiện/V thủ_tục/N DFS/Np trên/E cây/N Interval_ta/Np ưu_tiên/V đi/V sang/V cây_con/Np bên/N phải/V ./CH\nKhi/N biết/V được_giá/Np trị/V postnum/Np (và/Np cả/P prevnum)/Np của/E đỉnh/N cần/V tìm/V rồi/C ta/P sẽ/R dễ_dàng/A biết/V được/V đỉnh/N đó/P ./CH\nĐộ/N phức_tạp/A của/E thuật_toán/N này/P cũng/R giống_như/Np thuật_toán/N 1/M với/E thời_gian/N là/V như/C chỉ/R mất/V O(N)/Np bộ_nhớ/Np ./CH\nCách/N 3/M Cũng/R tương_tự/A cách/N 2/M ta/P khởi/V tạo/V các/L mảng/N prevnum1/Np ./CH ./CH n/Ny và/Cc postnum1/Np ./CH ./CH n/Ny ./CH\nMảng_A1/Np ./CH ./CH n/Ny với/E Ai/P cho/E ta/P biết/V đỉnh/N k/N sao_cho/Np prevnumk/Np =/CH i/M ./CH\nNhư_vậy/X ta/P cần/V tìm/V LCA(u/Np ,/CH v)/Np trong/E mảng/N con/Nc A1/Np ./CH ./CH min(prevnumu/Np ,/CH prevnumv)/Np ./CH\nTa/P có_thể/R sử_dụng/V phương_pháp/N chặt/A nhị_phân/Np kết_hợp/V đệ_quy/Np để/E làm/V cận/A (khá/Np tốt)/Np như_sau/Np :/CH Xét/V thủ_tục/N Find_LCA(left/Np ,/CH right/Np ,/CH u/N ,/CH v/Nu :/CH Integer)/Np tìm/V cha/N chung/A gần/A nhất/A của/E u/N ,/CH v/Nu trong/E mảng/N con/Nc Aleft/Np ./CH ./CH right/Np ./CH\nKhông/R mất/V tính/V tổng_quát/Np giả_sử/Np prevnumult;prevnumv/Np ./CH\nNếu/C postnumugt;postnumv/Np thì/C LCA(u/Np ,/CH v)=u/Np và/Cc đây/P là/V trường_hợp/N dễ_dàng/A tìm_ra/Np đáp_án/N ./CH\nNếu/C postnumult;postnumv/Np ,/CH gọi/V mid/Np =/CH (left+right)/Np ./CH\nXét/V phần_tử/N chính/T giữa/N đoạn/Nc i/M =/CH Amid/Np sẽ/R có/V các/L khả_năng/N sau/E :/CH postnumigt;postnumv/Np :/CH i/M sẽ/R là/V cha/N chung/A của/E u/N và/Cc v/Nu nhưng/C chưa/R chắc/V đã_là/Np LCA(u/Np ,/CH v)/Np ./CH\nHiển_nhiên/Np prevnumi/Np \\le/Np prevnumLCA(u/Np ,/CH v)/Np nên/C ta/P gọi/V đệ_quy/Np :/CH Find_LCA(/Np mid/Np ,/CH right/Np ,/CH u/N ,/CH v)/Np ./CH\npostnumvgt;postnumigt;postnumu/Np :/CH i/M là/V cha/N của/E u/N nhưng/C không_phải/Np là/V cha/N của/E v/Nu ./CH\nVì_vậy/C LCA(u/Np ,/CH v)/Np =/CH LCA(i/Np ,/CH v)/Np ,/CH ta/P gọi/V đệ_quy/Np :/CH Find_LCA(/Np left/Np ,/CH mid/Np ,/CH i/M ,/CH v)/Np ./CH\npostnumilt;postnumu/Np :/CH đỉnh/N i/M là/V đỉnh/N được/V rẽ/V nhánh/N ra/V từ/E một/M nút/N cha/N nào_đó/P của/E u/N ,/CH nhưng/C ta/P hoàn_toàn/A chưa/R biết/V nút/N cha/N này/P nằm/V dưới/E hay/Cc trên/E LCA(u/Np ,/CH v)/Np ./CH\nTa/P có_thể/R xử_lý/V theo/V 2/M cách/N :/CH gọi/V đệ_quy/Np Find_LCA(left/Np ,/CH right/Np ,/CH cha(u)/Np ,/CH cha(v))/Np hoặc/Cc lấy/V j/Np =/CH Find_LCA(left/Np ,/CH mid/Np ,/CH i/M ,/CH u)/Np và/Cc j/Np sẽ/R rơi/V vào/E 2/M trường_hợp/N đầu/N ./CH\nThuật_toán/N trên/E nếu/C chỉ_thực/Np hiện/N 2/M trường_hợp/N đầu/N thì/C độ/N phức_tạp/A cho/E mỗi/L lần/N chất_vấn/V là/V LogN/Np ,/CH còn/R nếu/C chỉ_thực/Np hiện_trường/N hợp/V 3/M thì/C độ/N phức_tạp/A sẽ/R là/V N/Ny ./CH\nQua/V khảo_sát/V bằng/E việc/N chạy/V chương_trình/N cho/E thấy/V thời_gian_thực/Np hiện/N trung_bình/A của/E thuật_toán/N này/P ngang/A với/E các/L thuật_toán/N với/E độ/N phức_tạp/A ./CH\nThuật_toán/N này/P tuy/C có/V độ/N phức_tạp/A lớn/A nhưng/C lại/R là/V phương_pháp/N tiết_kiệm/V bộ_nhớ/Np và/Cc cài_đặt/V dễ_dàng/A nên/C đây/P là/V thuật_toán/N có/V ứng_dụng/V cao/A trong/E làm_bài/Np ./CH\nCách/N 4/M -/CH Heavy_Light_Decomposition/Np Sử_dụng/V Heavy_Light_Decomposition/Np ./CH\nXuất_phát/V từ_trường/Np hợp/V suy_biến/Np của/E cây/N :/CH mỗi/L nút/N của/E cây/N chỉ_có/Np đúng/A 1/M con/Nc (trừ/Np 1/M nút/N lá/N không/R có/V con)/Np ./CH\nVới/E một/M cây/N suy_biến/Np ta/P hoàn_toàn/A có_thể/R tìm/V LCA(u/Np ,/CH v)/Np trong/E thời_gian/N O(1)/Np (đỉnh/Np nào/P gần/A gốc/N hơn/A trong/E 2/M đỉnh/N u/N ,/CH v/Nu sẽ/R là/V LCA(u/Np ,/CH v))/Np ./CH\nTư_tưởng/N của/E Heavy_Light_Decomposition/Np sẽ/R là/V chia/V cây/N ban_đầu/N ra/V thành/V nhiều/A cây/N suy_biến/Np ./CH\nNhững/L đoạn/Nc cùng/A màu/N là/V một/M cây/N suy_biến/Np ./CH\nNếu/C coi/V mỗi/L cây/N suy_biến/Np là/V một/M đỉnh/N thì/C ta/P sẽ/R được/V một/M cây/N mới/R gọi_là/V cây/N rút_gọn/Np ./CH\nSau_đây/Np là/V một_cách/N chia/V cây/N để/E cây/N rút_gọn/Np thu/V được/V có/V độ_cao/Np O(LogN)/Np với/E N/Ny là/V số/N nút/N của/E cây/N ban_đầu/N :/CH Xuất_phát/V từ/E đỉnh/N gốc/N Với/E mỗi/L đỉnh/N nếu/C là/V lá/N thì/C nó/P sẽ/R là/V kết_thúc/V của/E một/M cây/N suy_biến/Np Nếu_không/Np ta/P sẽ/R phát_triển/V tiếp_cây/Np suy_biến/Np này/P xuống/V đỉnh/N con/Nc có/V trọng_lượng/N lớn/A nhất/A ,/CH các/L đỉnh/N con/Nc khác/A sẽ/R là/V nút/N gốc/N của/E những/L cây/N suy_biến/Np mới/R ./CH\nTrọng_lượng/N của/E một/M nút/N được/V định_nghĩa_là/Np số/N nút/N nhận/V nút/N đó/P là/V tổ_tiên/N (hiểu/Np một_cách/N trực_quan/Np thì/C nếu/C coi/V mỗi/L nút/N có_một/Np “sức/Np nặng”/Np thì/C trọng_lượng/N của/E một/M nút/N chính/T là/V “sức/Np nặng”/Np mà/C nút/N đó/P phải/V gánh)/Np ./CH\nChứng_minh/V :/CH Gọi_F(n)/Np là/V hàm/Np cho/E ta/P chiều_cao/N tối_đa/A của/E một/M cây/N rút_gọn/Np có/V n/Ny đỉnh/N ./CH\nTa/P sẽ/R chứng_minh/V F(n)/Np \\le/Np log(N)+1/Np ./CH\nVới/E n=1/Np thì/C F(1)/Np =/CH log(1)+1/Np ./CH\nGiả_sử/Np điều/N cần/V chứng_minh/V đã/R đúng/A đến/E n-1/Np ./CH\nVới/E một/M cây/N có/V N/Ny đỉnh/N và/Cc nút/N gốc/N sẽ/R có/V các/L cây_con/Np với/E số/N đỉnh/N là/V x_1/Np ,/CH ./CH ./CH ./CH ,/CH x_k/Np ./CH\nGiả_sử/Np x_1/Np =/CH max(x1/Np ./CH ./CH xk)/Np ./CH\nTa/P có/V 2max(x_2/Np ./CH ./CH x_k)/Np \\le/Np max(x_2/Np ./CH ./CH x_k)/Np +/CH x_1/Np \\le/Np N/Ny \\rightarrow/Np max(x2…xk)/Np \\le/Np N/Ny ./CH\nTheo/V cách/N xây_dựng/V cây/N thì/C :/CH F(N)/Np =/CH max(/Np F(x_1)/Np ,/CH F(x_2)+1/Np ,/CH F(x_3)+1/Np ,/CH ./CH ./CH ,/CH F(x_k)+1/Np )/CH Mà/C :/CH -/CH F(x_1)/Np \\le/Np F(N-1)/Np \\le/Np LogN+1/Np -/CH F(x_2)/Np +1/Np \\le/Np F(N/Np \\le/Np LogN+1/Np -/CH ./CH ./CH ./CH\n-/CH F(x_k)/Np +1/Np \\le/Np F(N/Np \\le/Np LogN+1_Vậy_F(N)/Np \\le/Np LogN+1/Np (Điều/Np phải/V chứng/N minh)/Np ./CH\nĐể/E thực_hiện/V chất_vấn/V LCA(u/Np ,/CH v)/Np ta/P lần_lượt/R nhảy/V từ/E u/N và/Cc v/Nu trở_về/V gốc/N của/E cây/N ./CH\nTừ/E một/M đỉnh/N ta/P thực_hiện/V lần_lượt/R một_bước/Np nhảy_dài/Np tới/E gốc/N của/E cây/N suy_biến/Np chứa/V nó/P và/Cc một_bước/Np nhảy/V ngắn/A tới/E nút/N cha/N (qua/Np đó/P chuyển/V sang/V cây/N suy_biến/Np mới)/Np ./CH\nSau/E khi/N xác_định/V được/V cây/N suy_biến/Np chứa/V LCA(u/Np ,/CH v)/Np ,/CH ta/P có_thể/R xác_định/V được/V đỉnh/N u_1/Np ,/CH v_1/Np tương_ứng/V là/V nút/N đầu_tiên_ta/Np gặp/V khi/N nhảy/V từ/E u/N ,/CH v/Nu tới/E cây/N suy_biến/Np chứa/V LCA(u/Np ,/CH v)/Np ./CH\nSau_đó/Np chỉ_cần/Np sử_dụng/V một_phép/Np so_sánh/V xem/V u_1/Np hay/Cc v_1/Np gần/A gốc/N hơn_là/Np có_thể/R xác_định/V được/V LCA(u/Np ,/CH v)/Np ./CH\nTuy/C về/E ý_tưởng/N ta/P quan_tâm/V nhiều/A đến/E việc/N chia/V cây/N ban_đầu/N ra/V thành/V nhiều/A cây/N suy_biến/Np nhưng/C về_mặt/Np cài_đặt/V ,/CH ta/P chỉ_cần/Np quan_tâm/V với/E mỗi/L nút/N của/E cây/N đầu_vào/N ,/CH nút/N gốc/N của/E cây/N suy_biến/Np chứa/V nó/P là/V nút/N nào/P ./CH\nDễ/A thấy/V khi/N thực_hiện/V thủ_tục/N DFS/Np (có/Np ưu_tiên/V gọi/V đệ_quy/Np tới/E nút/N con/Nc có/V trọng_lượng/N lớn/A nhất/A trước)/Np các/L nút/N sẽ/R được/V liệt_kê/V lần_lượt/R theo/V từng/R cây/N suy_biến/Np ./CH\nVì_vậy/C ta/P có_thể/R khởi/V tạo/V mảng/N Head1/Np ./CH ./CH n/Ny với/E Headi/Np cho/E ta/P biết/V nút/N gốc/N của/E cây/N suy_biến/Np chứa/V nút/N i/M chỉ/R với/E O(N)/Np ./CH\nThuật_toán/N này/P sẽ/R chạy/V trong/E thời_gian/N ./CH\nThuật_toán/N này/P khá/R linh_hoạt/A và/Cc có_thể/R mở_rộng/V ra/V để/E ứng_dụng/V vào/E nhiều/A bài_toán/N khác/A trên/E cây/N ./CH\nĐể_ý/V rằng/C nếu/C cây/N ban_đầu/N có/V trọng/Np số/N ở/E mỗi/L cạnh/N ,/CH sau/E khi/N chia/V thành/V các/L cây/N suy_biến/Np thì/C cạnh/N của/E mỗi/L cây/N suy_biến/Np sẽ/R giống_như/Np các/L phần_tử/N liên_tiếp/A của/E một/M mảng/N ./CH\nDo_đó/C ta/P hoàn_toàn/A có_thể/R sử_dụng/V các/L cấu_trúc/N dữ_liệu/N như/C Interval_Tree/Np để/E quản_lý/V việc/N thay_đổi/V hay/Cc chất_vấn/V thông_tin/N về/E các/L cạnh/N này/P ./CH\nĐây/P chính/T là/V ý_tưởng/N để/E làm_bài/Np QTREE/Np ./CH\nCách/N 5/M -/CH Xử_lý/V offline/Np Đây/P là/V một/M phương_pháp/N để/E giải/N bài_toán/N LCA/Np khi/N đã/R biết/V trước/E mọi/L câu_hỏi/N chất_vấn/V ./CH\nCách/N làm/V này/P tuy/C không/R linh_hoạt/A nhưng/C thời_gian/N chạy/V khá/R nhanh/A và/Cc tiết_kiệm/V bộ_nhớ/Np ./CH\nTư_tưởng/N của/E phương_pháp/N này/P là/V trả_lời/V các/L câu/N chất_vấn/V theo/V một/M thứ_tự/N khác/A dễ_dàng/A hơn/A ./CH\nVới/E mỗi/L nút/N của/E cây_ta/Np sẽ/R lưu/V nó/P trong/E một_tập/Np hợp/V có/V nhãn/N ./CH\nBan_đầu/N mỗi/L nút/N thuộc/V một_tập/Np hợp/V khác_nhau/Np và/Cc nhãn/N của/E tập_hợp/N chính/T là/V chỉ_số/N của/E nút/N đó/P ./CH\nSau_đó/Np ta/P thực_hiện/V thủ_tục/N DFS/Np ,/CH trước_khi/Np thoát/V ra/V khỏi/V thủ_tục/N DFS/Np ta/P thực_hiện/V 2/M thao_tác/V sau/E :/CH Tìm/V cha/N chung/A của/E u/N với/E các/L đỉnh/N v/Nu mà/C thủ_tục/N DFS(v)/Np đã/R được/V thực_thi/V ./CH\nĐỉnh/N cha/N chung/A chính/T là/V nhãn/N của/E tập_hợp/N chứa/V v/Nu ./CH\nHợp_nhất/Np tập_hợp/N chứa/V u/N với/E tập_hợp/N chứa/V cha(u)/Np và/Cc lấy/V nhãn/N là/V cha(u)/Np ./CH\nTa/P sẽ/R chứng_minh/V “Đỉnh/Np cha/N chung/A chính/T là/V nhãn/N của/E tập_hợp/N chứa/V v”/Np ./CH\nGiả_sử/Np i=LCA(u/Np ,/CH v)/Np ./CH\nSau/E khi/N thực_thi/V thủ_tục/N DFS(v)/Np xong/V ,/CH từ/E v/Nu thủ_tục/N DFS/Np phải/V đi_về/Np i/M và/Cc rẽ/V xuống/V u/N để/E có_thể/R thực_hiện/V DFS(u)/Np ./CH\nTrong/E quá_trình/N đi_về/Np i/M ,/CH nó/P sẽ/R hợp_nhất/Np v/Nu với/E cha/N v/Nu ,/CH ông/N v/Nu ,/CH ./CH ./CH\nrồi/C với/E i/M ./CH\nDo_đó/C nhãn/N của/E tập/V chứa/V v/Nu chính/T là/V i/M ./CH\nĐể/E thực_hiện/V thao_tác/V hợp_nhất/Np 2/M tập_hợp/N với/E thời_gian/N ngắn/A ,/CH ta/P có_thể/R sử_dụng/V cấu_trúc/N disjoint/Np set/N giống_như/Np trong/E thuật_toán/N Kruskal/Np ./CH\nĐộ/N phức_tạp/A của/E phương_pháp/N này/P là/V (M+N)log(N)/Np với/E M/Nu là/V số/N thao_tác/V ./CH\nCác/L bài_tập/Np áp_dụng/V :/CH VOJ/Np -/CH LUBENICA_SPOJ/Np -/CH LCA_SPOJ/Np -/CH QTREE_VOJ/Np -/CH QTREE3_VOJ/Np -/CH VOTREE/Np\n", "title": "Các phương pháp giải bài toán LCA\n", "link": "http://vnoi.info/wiki/algo/data-structures/lca\n"}