{"content": "Table of_Contents Tìm_kiếm tam_phân - Ternary_Search Mở_đầu Bài_toán Thuật_toán Cài_đặt Mở_rộng Bài_tập tự luyện Tìm_kiếm tam_phân - Ternary_Search_Nguồn : e-maxx Người dịch : Đỗ Thanh_Lam Mở_đầu Cho một hàm F(x) chỉ_có một cực_trị duy_nhất (unimodal) .\nCó hai dạng hàm F(x) cơ_bản : Phần đầu tăng chặt , đạt đến giá_trị lớn nhất , sau_đó giảm chặt .\n(concave) Một hàm_số thoả_mãn tính_chất này nếu tất_cả các đoạn_thẳng nối 2 điểm của đồ_thị hàm_số , nằm \"bên dưới\" của đồ_thị .\nPhần đầu giảm chặt , đạt đến giá_trị nhỏ nhất , sau_đó tăng chặt .\n(convex) Một hàm_số thoả_mãn tính_chất này nếu tất_cả các đoạn_thẳng nối 2 điểm của đồ_thị hàm_số , đều nằm \"bên trên\" của đồ_thị .\nTrong bài viết này chúng_tôi sẽ giải_quyết trường_hợp 1 , trường_hợp 2 sẽ làm tương_tự nhưng ngược_lại .\nBài_toán Cho một hàm F(x) trong đoạn l , r thoả_mãn : F tăng chặt tới một cực_đại (điểm H) rồi giảm chặt .\nYêu_cầu tìm điểm đạt giá_trị lớn nhất (điểm H) .\nThuật_toán Xét hai vị_trí m_1 và m_2 trong đoạn l , r sao_cho l lt; m_1 lt; m_2 lt; r .\nRõ_ràng cực_trị có_thể nằm ở 1 trong 3 phần : l , m_1 .\nKhi đó , ta biết chắc_chắn F(m_1) gt; F(m_2) .\nm_1 , m_2 .\nTa không_thể rút ra kết_luận gì về F(m_1) và F(m_2) .\nm_2 , R .\nTương_tự trường_hợp đầu , ta biết chắc_chắn F(m_1) lt; F(m_2) .\nNgược_lại , bằng việc so_sánh F(m_1) và F(m_2) , ta có_thể rút ra kết_luận như_sau : Nếu F(m_1) lt; F(m_2) : Ta biết chắc_chắn H nằm trong m_1 , r .\nF(m_1) gt; F(m_2) : Ta biết chắc_chắn H nằm trong l , m_2 .\nF(m_1) = F(m_2) : H nằm trong m_1 , m_2 .\n(Chú ý : khi cài_đặt chặt tam_phân với hàm_số thực , ta thường bỏ_qua trường_hợp này , để tránh sai_số , và do trên thực_tế 2 số_thực hầu_như_không bao_giờ bằng nhau) .\nDo_đó , dựa vào việc so_sánh F ở hai điểm m1 , m2 ta có_thể thay_đổi và giảm không_gian tìm_kiếm l , r xuống một khoản không_gian nhỏ hơn l , r .\nNếu ta chọn : m_1 = l + (r - l) / 3 m_2 = r - (r - l) / 3 Thì sau mỗi lần , độ lớn của đoạn l , r giảm xuống còn 2/3 lần .\nNếu ta lặp_đi lặp_lại K lần , thì độ lớn của l , r sẽ chỉ còn (2 / 3) K .\nVí_dụ với l = -109 , r = 109 , ta lặp_lại K = 100 lần , thì đoạn l , r thu về chỉ còn độ_dài là (2 / 3 . 0) 100 (2109) lt; 5 10-9 , đủ chính_xác với hầu_hết mọi bài_toán .\nĐộ phức_tạp thuật_toán là O(logT) với T là độ_chính_xác mà ta cần thực_hiện .\nCài_đặt double max_f ( double left , double right ) int N_ITER = 100 ; for ( int i = 0 ; i lt; N_ITER ; i ++ ) double x1 = left + ( right - left ) / 3 . 0 ; double x2 = right - ( right - left ) / 3 . 0 ; if ( f ( x1 ) gt; f ( x2 )) right = x2 ; else left = x1 ; return f ( left ); Mở_rộng Tìm_kiếm tam_phân cũng có_thể dùng để giải các bài_toán trên 2D với hàm dạng f(x , y) nếu hàm f là hàm lồi .\nVí_dụ bài E trong đề ACM_ICPC_Vietnam_National_Round 2017 , lời_giải chi_tiết ở đây .\nBài_tập tự luyện Codechef - Race time Hackerearth - Rescuer_Spoj - Building_Construction_Codeforces - Weakness and Poorness\n", "tagged": "Table/Np of_Contents/Np Tìm_kiếm/V tam_phân/Np -/CH Ternary_Search/Np Mở_đầu/V Bài_toán/N Thuật_toán/N Cài_đặt/V Mở_rộng/V Bài_tập/Np tự/P luyện/V Tìm_kiếm/V tam_phân/Np -/CH Ternary_Search_Nguồn/Np :/CH e-maxx/Np Người/N dịch/N :/CH Đỗ/V Thanh_Lam/Np Mở_đầu/V Cho/E một/M hàm/Np F(x)/Np chỉ_có/Np một/M cực_trị/N duy_nhất/A (unimodal)/Np ./CH\nCó/V hai/M dạng/N hàm/Np F(x)/Np cơ_bản/A :/CH Phần/N đầu/N tăng/V chặt/A ,/CH đạt/V đến/E giá_trị/N lớn/A nhất/A ,/CH sau_đó/Np giảm/V chặt/A ./CH\n(concave)/Np Một/M hàm_số/Np thoả_mãn/V tính_chất/N này/P nếu/C tất_cả/P các/L đoạn_thẳng/Np nối/V 2/M điểm/N của/E đồ_thị/Np hàm_số/Np ,/CH nằm/V \"bên/Np dưới\"/Np của/E đồ_thị/Np ./CH\nPhần/N đầu/N giảm/V chặt/A ,/CH đạt/V đến/E giá_trị/N nhỏ/A nhất/A ,/CH sau_đó/Np tăng/V chặt/A ./CH\n(convex)/Np Một/M hàm_số/Np thoả_mãn/V tính_chất/N này/P nếu/C tất_cả/P các/L đoạn_thẳng/Np nối/V 2/M điểm/N của/E đồ_thị/Np hàm_số/Np ,/CH đều/R nằm/V \"bên/Np trên\"/Np của/E đồ_thị/Np ./CH\nTrong/E bài/N viết/V này/P chúng_tôi/P sẽ/R giải_quyết/V trường_hợp/N 1/M ,/CH trường_hợp/N 2/M sẽ/R làm/V tương_tự/A nhưng/C ngược_lại/X ./CH\nBài_toán/N Cho/E một/M hàm/Np F(x)/Np trong/E đoạn/Nc l/Ny ,/CH r/Np thoả_mãn/V :/CH F/Np tăng/V chặt/A tới/E một/M cực_đại/A (điểm/Np H)/Np rồi/C giảm/V chặt/A ./CH\nYêu_cầu/V tìm/V điểm/N đạt/V giá_trị/N lớn/A nhất/A (điểm/Np H)/Np ./CH\nThuật_toán/N Xét/V hai/M vị_trí/N m_1/Np và/Cc m_2/Np trong/E đoạn/Nc l/Ny ,/CH r/Np sao_cho/Np l/Ny lt;/Np m_1/Np lt;/Np m_2/Np lt;/Np r/Np ./CH\nRõ_ràng/A cực_trị/N có_thể/R nằm/V ở/E 1/M trong/E 3/M phần/N :/CH l/Ny ,/CH m_1/Np ./CH\nKhi/N đó/P ,/CH ta/P biết/V chắc_chắn/A F(m_1)/Np gt;/Np F(m_2)/Np ./CH\nm_1/Np ,/CH m_2/Np ./CH\nTa/P không_thể/R rút/V ra/V kết_luận/V gì/P về/E F(m_1)/Np và/Cc F(m_2)/Np ./CH\nm_2/Np ,/CH R/Np ./CH\nTương_tự/A trường_hợp/N đầu/N ,/CH ta/P biết/V chắc_chắn/A F(m_1)/Np lt;/Np F(m_2)/Np ./CH\nNgược_lại/X ,/CH bằng/E việc/N so_sánh/V F(m_1)/Np và/Cc F(m_2)/Np ,/CH ta/P có_thể/R rút/V ra/V kết_luận/V như_sau/Np :/CH Nếu/C F(m_1)/Np lt;/Np F(m_2)/Np :/CH Ta/P biết/V chắc_chắn/A H/Ny nằm/V trong/E m_1/Np ,/CH r/Np ./CH\nF(m_1)/Np gt;/Np F(m_2)/Np :/CH Ta/P biết/V chắc_chắn/A H/Ny nằm/V trong/E l/Ny ,/CH m_2/Np ./CH\nF(m_1)/Np =/CH F(m_2)/Np :/CH H/Ny nằm/V trong/E m_1/Np ,/CH m_2/Np ./CH\n(Chú/Np ý/N :/CH khi/N cài_đặt/V chặt/A tam_phân/Np với/E hàm_số/Np thực/A ,/CH ta/P thường/R bỏ_qua/V trường_hợp/N này/P ,/CH để/E tránh/V sai_số/Np ,/CH và/Cc do/E trên/E thực_tế/N 2/M số_thực/Np hầu_như_không/Np bao_giờ/P bằng/E nhau)/Np ./CH\nDo_đó/C ,/CH dựa/V vào/E việc/N so_sánh/V F/Np ở/E hai/M điểm/N m1/Np ,/CH m2/Nu ta/P có_thể/R thay_đổi/V và/Cc giảm/V không_gian/N tìm_kiếm/V l/Ny ,/CH r/Np xuống/V một/M khoản/N không_gian/N nhỏ/A hơn/A l/Ny ,/CH r/Np ./CH\nNếu/C ta/P chọn/V :/CH m_1/Np =/CH l/Ny +/CH (r/Np -/CH l)/Np //CH 3/M m_2/Np =/CH r/Np -/CH (r/Np -/CH l)/Np //CH 3/M Thì/C sau/E mỗi/L lần/N ,/CH độ/N lớn/A của/E đoạn/Nc l/Ny ,/CH r/Np giảm/V xuống/V còn/R 2/M lần/N ./CH\nNếu/C ta/P lặp_đi/Np lặp_lại/Np K/N lần/N ,/CH thì/C độ/N lớn/A của/E l/Ny ,/CH r/Np sẽ/R chỉ/R còn/R (2/Np //CH 3)/Np K/N ./CH\nVí_dụ/C với/E l/Ny =/CH -109/Np ,/CH r/Np =/CH 109/M ,/CH ta/P lặp_lại/Np K/N =/CH 100/M lần/N ,/CH thì/C đoạn/Nc l/Ny ,/CH r/Np thu/V về/E chỉ/R còn/R độ_dài/Np là/V (2/Np //CH 3/M ./CH 0)/Np 100/M (2109)/Np lt;/Np 5/M 10-9/Np ,/CH đủ/A chính_xác/A với/E hầu_hết/R mọi/L bài_toán/N ./CH\nĐộ/N phức_tạp/A thuật_toán/N là/V O(logT)/Np với/E T/Nu là/V độ_chính_xác/Np mà/C ta/P cần/V thực_hiện/V ./CH\nCài_đặt/V double/Np max_f/Np (/CH double/Np left/Np ,/CH double/Np right/Np )/CH int/Np N_ITER/Np =/CH 100/M ;/CH for/Np (/CH int/Np i/M =/CH 0/M ;/CH i/M lt;/Np N_ITER/Np ;/CH i/M ++/Np )/CH double/Np x1/Np =/CH left/Np +/CH (/CH right/Np -/CH left/Np )/CH //CH 3/M ./CH 0/M ;/CH double/Np x2/Np =/CH right/Np -/CH (/CH right/Np -/CH left/Np )/CH //CH 3/M ./CH 0/M ;/CH if/Np (/CH f/Np (/CH x1/Np )/CH gt;/Np f/Np (/CH x2/Np ))/Np right/Np =/CH x2/Np ;/CH else/Np left/Np =/CH x1/Np ;/CH return/Np f/Np (/CH left/Np );/CH Mở_rộng/V Tìm_kiếm/V tam_phân/Np cũng/R có_thể/R dùng/V để/E giải/N các/L bài_toán/N trên/E 2D/Np với/E hàm/Np dạng/N f(x/Np ,/CH y)/Np nếu/C hàm/Np f/Np là/V hàm/Np lồi/Np ./CH\nVí_dụ/C bài/N E/Ni trong/E đề/V ACM_ICPC_Vietnam_National_Round/Np 2017/Np ,/CH lời_giải/Np chi_tiết/N ở/E đây/P ./CH\nBài_tập/Np tự/P luyện/V Codechef/Np -/CH Race/Np time/Np Hackerearth/Np -/CH Rescuer_Spoj/Np -/CH Building_Construction_Codeforces/Np -/CH Weakness/Np and/Np Poorness/Np\n", "title": "Tìm kiếm tam phân - Ternary Search\n", "link": "http://vnoi.info/wiki/translate/emaxx/Tim-kiem-tam-phan-Ternary-Search\n"}